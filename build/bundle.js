(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ZID = 'X1-ZWz1a4bb3101l7_64j9s';

exports.ZID = ZID;

exports.accessToken = 'pk.eyJ1IjoibW9ib3QxMSIsImEiOiI4N2FjYWZhNWQ4YmU5Yjk2MzFlZjkxMjMzNzNmMGQzNiJ9.kkMw6O4lV-74eEs-MgHvkQ';

},{}],2:[function(require,module,exports){
var admiral = {"name":"Admiral","median":"530100", "type":"MultiPolygon","coordinates":[[[[-122.373757610029,47.5806867767596],[-122.372776686786,47.5792652248942],[-122.371888903303,47.5777039685111],[-122.371589126669,47.5771833038302],[-122.371418727318,47.5767793942596],[-122.371264105686,47.5760914857721],[-122.37105439523,47.575032124733],[-122.37087776774,47.5738077627164],[-122.370817749957,47.5731260739935],[-122.370733103526,47.5719061695551],[-122.370698434988,47.5714562101401],[-122.370943704266,47.5714060414238],[-122.371124869074,47.5713586598587],[-122.371264226618,47.5713112782935],[-122.371384074106,47.5712666838793],[-122.371498347293,47.5712165151632],[-122.371721319364,47.5711078162784],[-122.371894122719,47.5710074788464],[-122.372025118811,47.5709266514706],[-122.372168606687,47.5708148059758],[-122.372315436707,47.5706962124986],[-122.372434030185,47.5705606770958],[-122.372563918279,47.5703912578424],[-122.372648627906,47.5702557224396],[-122.372722042916,47.5701314816537],[-122.372772868691,47.5699677097089],[-122.372812399851,47.5698321743061],[-122.374003981933,47.5698321743058],[-122.37419599042,47.5698491162311],[-122.374387998907,47.5698604108481],[-122.37452353431,47.5698547635395],[-122.375319804801,47.5701088924196],[-122.375596522915,47.5701879547379],[-122.375861946412,47.570227485897],[-122.376099133367,47.5702218385886],[-122.37634196763,47.5701766601211],[-122.379554334342,47.5698238461122],[-122.380065257124,47.5691097154053],[-122.38084905912,47.570183814436],[-122.387413427615,47.5702350188573],[-122.392810078831,47.5702771146662],[-122.403049330865,47.5703843328771],[-122.403197572452,47.5704163851123],[-122.403457996864,47.5705526071122],[-122.40389070204,47.5708090249939],[-122.40382259104,47.5722233298739],[-122.402768873806,47.5722233298739],[-122.402761145238,47.5758197298175],[-122.403368911116,47.5758197298175],[-122.403364759589,47.5772575420371],[-122.403364649083,47.5772958138467],[-122.40027352455,47.5790734935237],[-122.400285116246,47.5790734910791],[-122.402899141224,47.5790729398036],[-122.403076693914,47.5790351626356],[-122.403265579754,47.578933164282],[-122.403477131895,47.5788084996275],[-122.403586685682,47.5787593893091],[-122.403722683487,47.5787405007252],[-122.403828459557,47.5787518338756],[-122.403922902477,47.5787933887603],[-122.403994679096,47.5788538322292],[-122.404021123114,47.5789104979812],[-122.404026477593,47.5790023699665],[-122.404024900831,47.5794280451827],[-122.403371225708,47.5794278792509],[-122.402643635852,47.5797057727644],[-122.401723705635,47.5799066770646],[-122.400867218882,47.5800018422594],[-122.400327949445,47.5801393030964],[-122.399989584307,47.5803084856648],[-122.399735810454,47.5804988160545],[-122.399619497438,47.5806362768915],[-122.398953341075,47.5820003113507],[-122.398572680295,47.58257130252],[-122.397377828405,47.5839036152477],[-122.396553063383,47.5848023976433],[-122.395083289818,47.5859549538918],[-122.393317446758,47.5873189883513],[-122.392306935861,47.5883706556767],[-122.391792598607,47.5891054231835],[-122.391620865943,47.5899207962827],[-122.390749157727,47.5904522129013],[-122.390224277072,47.5910113249028],[-122.38979068001,47.5913935749447],[-122.389168810539,47.5917415936395],[-122.388592582864,47.5919698026197],[-122.38811904923,47.5922950004166],[-122.387810967107,47.5926601347849],[-122.387497179759,47.5931621945414],[-122.387137750615,47.5937498326656],[-122.386906394687,47.594101842229],[-122.386684331868,47.5942536516349],[-122.386314335231,47.5943412824173],[-122.386051442884,47.5943315456637],[-122.385642499232,47.5942049678669],[-122.385262765842,47.5939712857806],[-122.384659087119,47.5932897130284],[-122.383549097209,47.5913520990621],[-122.383218047586,47.590719210078],[-122.382773232443,47.5899283575115],[-122.382242802789,47.5893524624587],[-122.381682062869,47.588822032805],[-122.380954616487,47.5883219134164],[-122.380333256035,47.5879430350923],[-122.379636119919,47.5871701233111],[-122.378893518403,47.586291125599],[-122.378257002819,47.5859122472749],[-122.37709005758,47.5855485240836],[-122.375741250746,47.5846998366376],[-122.374680391439,47.5833813400695],[-122.374366097174,47.5829528668181],[-122.373956942025,47.5819247333656],[-122.373757610029,47.5806867767596]]]]};
var alki = {"name":"Alki","median":"568600", "type":"MultiPolygon","coordinates":[[[[-122.383958367072,47.5947507175904],[-122.383625822242,47.5942241902596],[-122.383049914038,47.5928804011958],[-122.381859699194,47.5902312156465],[-122.381682062869,47.5888220328051],[-122.382242802789,47.5893524624589],[-122.382773232443,47.5899283575117],[-122.383218047586,47.5907192100782],[-122.383549097209,47.5913520990622],[-122.384659087119,47.5932897130286],[-122.385262765842,47.5939712857808],[-122.385642499232,47.5942049678671],[-122.386051442884,47.594331545664],[-122.386314335231,47.5943412824175],[-122.386684331868,47.594253651635],[-122.386906394687,47.5941018422291],[-122.387137750615,47.5937498326658],[-122.387497179759,47.5931621945416],[-122.387810967107,47.592660134785],[-122.38811904923,47.5922950004169],[-122.388592582864,47.5919698026199],[-122.389168810539,47.5917415936397],[-122.38979068001,47.5913935749449],[-122.390224277072,47.591011324903],[-122.390749157727,47.5904522129015],[-122.391620865943,47.5899207962829],[-122.391792598607,47.5891054231837],[-122.392306935861,47.588370655677],[-122.393317446758,47.5873189883515],[-122.395083289818,47.585954953892],[-122.396553063383,47.5848023976435],[-122.397377828404,47.5839036152478],[-122.398572680295,47.5825713025201],[-122.398953341075,47.582000311351],[-122.399619497438,47.5806362768917],[-122.399735810454,47.5804988160547],[-122.399989584307,47.580308485665],[-122.400327949445,47.5801393030966],[-122.400867218882,47.5800018422595],[-122.401723705635,47.5799066770647],[-122.402643635852,47.5797057727646],[-122.403371225708,47.5794278792511],[-122.404024900831,47.579428045183],[-122.404026477593,47.5790023699667],[-122.404021123114,47.5789104979813],[-122.403994679096,47.5788538322294],[-122.403922902477,47.5787933887605],[-122.403828459557,47.5787518338758],[-122.403722683487,47.5787405007254],[-122.403586685682,47.5787593893093],[-122.403477131895,47.5788084996277],[-122.403265579754,47.5789331642821],[-122.403076693914,47.5790351626358],[-122.402899141224,47.5790729398038],[-122.400285116246,47.5790734910793],[-122.40027352455,47.5790734935239],[-122.403364649083,47.5772958138468],[-122.403364759589,47.5772575420371],[-122.40369751911,47.5772379893077],[-122.403733,47.5772188181819],[-122.405389,47.5771198181819],[-122.406811,47.5767148181819],[-122.408215,47.5760218181818],[-122.40952,47.5760398181819],[-122.410861,47.5760578181819],[-122.412103,47.5760758181818],[-122.41339,47.5760938181819],[-122.41474,47.5761028181819],[-122.41474,47.5743208181819],[-122.41474,47.5739878181819],[-122.414659,47.5736998181819],[-122.414729621415,47.5732760896901],[-122.414791798337,47.5729050644337],[-122.421336394543,47.5760791921952],[-122.421413181653,47.5761943757891],[-122.421259605481,47.5765399207114],[-122.416652328133,47.5780756804784],[-122.414041537115,47.5788819539166],[-122.410278925783,47.5800337742302],[-122.408436015625,47.5806096824338],[-122.408167257812,47.5811471980595],[-122.401870644525,47.5840267468903],[-122.391343013656,47.5927920945547],[-122.387388433574,47.5957983426043],[-122.387273251933,47.5964894344018],[-122.38592946287,47.5958367371356],[-122.384086550758,47.5949536746348],[-122.383958367072,47.5947507175904]]]]};
var arborHeights = {"name":"Arbor Heights","median":"385500", "type":"MultiPolygon","coordinates":[[[[-122.392163415688,47.5175113623348],[-122.388489899839,47.5174969699435],[-122.384892372157,47.5174969699435],[-122.379337105689,47.5174828374837],[-122.376842839633,47.5175075261917],[-122.37141689363,47.5174371194739],[-122.370987186575,47.5121449378473],[-122.370852653052,47.5082317744973],[-122.370964570415,47.5082323420294],[-122.37053486336,47.5066718269348],[-122.370489631038,47.5054279380912],[-122.370602711842,47.5045232916593],[-122.370715792646,47.5037995745141],[-122.371032418897,47.503256786655],[-122.37141689363,47.502917544243],[-122.372570317831,47.5023069079015],[-122.373316651137,47.5015153422738],[-122.37367850971,47.5010856352187],[-122.374040368283,47.5004523827164],[-122.375216408644,47.4969694939541],[-122.375894893468,47.4959065343967],[-122.377401227244,47.4972413510165],[-122.377788798364,47.4975394826473],[-122.378414874788,47.4982549985612],[-122.379279456517,47.4987618223335],[-122.381485630585,47.4999245356936],[-122.384375953766,47.5011760998618],[-122.386026933504,47.5018998170072],[-122.387112509222,47.5024878371879],[-122.387418450038,47.5028760388384],[-122.387686768506,47.503412675774],[-122.387955086974,47.5039194995463],[-122.388610976561,47.5043965101556],[-122.389445745128,47.5051418392325],[-122.390196039027,47.5058095428673],[-122.389569612167,47.5062956590334],[-122.389140895426,47.5068958624704],[-122.389055152078,47.5080533976704],[-122.389098023752,47.5092966762186],[-122.389140895426,47.5098968796556],[-122.389226638774,47.5101112380261],[-122.389419561308,47.5103041605593],[-122.389805406375,47.5105613906039],[-122.390598532345,47.5109686715074],[-122.390984377412,47.5113116449001],[-122.391305914967,47.5119118483371],[-122.391606016686,47.5124477442631],[-122.392055079989,47.5141016387762],[-122.392140608172,47.5147915661183],[-122.392163415688,47.5175113623348]]]]}
var atlantic = {"name":"Atlantic","median":null, "type":"MultiPolygon","coordinates":[[[[-122.297471216703,47.590334747494],[-122.297543094087,47.5898652644028],[-122.297681335762,47.5893912929452],[-122.297819577437,47.5890555631627],[-122.297957819112,47.5887000845694],[-122.298056563166,47.588305108355],[-122.298135558409,47.5836246402112],[-122.298115809598,47.5831506687535],[-122.298056563166,47.5828346877818],[-122.297996114955,47.582641907672],[-122.297878092891,47.5824165928212],[-122.297513297418,47.581880128891],[-122.296676413687,47.580828659588],[-122.296515474508,47.5805604276227],[-122.296375993886,47.580227819986],[-122.296290159657,47.5799488587422],[-122.29619359615,47.5794874997624],[-122.296140928525,47.5788849256351],[-122.296129220478,47.5783180083945],[-122.296139949757,47.5778781079717],[-122.296180426146,47.5775025088839],[-122.296222229996,47.5772668756434],[-122.296269724218,47.5770768987554],[-122.296338326983,47.5768974761392],[-122.296412206884,47.5767180535228],[-122.296602183772,47.5763380997471],[-122.299453676509,47.5800376673949],[-122.307301185059,47.5903363476342],[-122.306323601145,47.590334747494],[-122.306329839721,47.5929049376231],[-122.306362228226,47.5992527262469],[-122.306362218445,47.6017119506039],[-122.302330044271,47.6016778286321],[-122.296736216595,47.6016388062319],[-122.296788497727,47.6012641247804],[-122.296865854934,47.6010372103098],[-122.296919200559,47.600880729807],[-122.297023762825,47.6005583294884],[-122.297163179179,47.6002882103026],[-122.297259027922,47.6000268046389],[-122.297311309055,47.59982639363],[-122.297354876665,47.5995388474],[-122.297389730754,47.5992774417363],[-122.297511720064,47.5958268869754],[-122.297555287674,47.5954957731348],[-122.297616282329,47.5952866486037],[-122.297712131072,47.5951036646392],[-122.29778183925,47.5949032536304],[-122.297851547427,47.5945721397896],[-122.297886401515,47.5939273391526],[-122.297895115037,47.5934393819135],[-122.297834120382,47.5930037058075],[-122.297738271639,47.592550602657],[-122.297590141763,47.5919232290642],[-122.297503006542,47.5914788394358],[-122.297440900319,47.5911381316981],[-122.297440900319,47.5906985441145],[-122.297471216703,47.590334747494]]]]}
var ballard = {"name":"Ballard","median":"397200", "type":"MultiPolygon","coordinates":[[[[-122.36075812146,47.6759920119894],[-122.360781646764,47.6668890126755],[-122.360782108665,47.6614990696722],[-122.366199035722,47.6614990696722],[-122.366199035722,47.6592874248973],[-122.364582509469,47.6576254522105],[-122.363887331445,47.6569107302038],[-122.360865528129,47.6538418253251],[-122.360866157644,47.6535254473167],[-122.360866581103,47.6533126275176],[-122.362526540691,47.6541872926348],[-122.364442114483,47.6551892850798],[-122.366077719797,47.6560733960606],[-122.368818463838,47.6579742346694],[-122.370115159943,47.6588730808334],[-122.372295967029,47.6604350102328],[-122.37381369088,47.660582362063],[-122.375522972109,47.6606413027949],[-122.376079703095,47.6608793094619],[-122.376206315662,47.6609242364243],[-122.377610811371,47.6606160735197],[-122.379857378879,47.6610306942278],[-122.382454873022,47.6627496239169],[-122.385357955057,47.6638573778241],[-122.386007328104,47.6640865692306],[-122.387186331506,47.6654326177161],[-122.387802656231,47.6661492860294],[-122.388108244121,47.6664548739202],[-122.389177800763,47.6663784774359],[-122.390582858689,47.6665072251861],[-122.390793942299,47.6659699214511],[-122.391507906234,47.6659200946229],[-122.392883050767,47.6664166747017],[-122.392847210144,47.6678696739431],[-122.392904778401,47.6709016021624],[-122.39296705153,47.6732047491624],[-122.393000803496,47.6759322346303],[-122.37666945305,47.6759896300663],[-122.376486363943,47.6759891899754],[-122.366078869215,47.6759641734893],[-122.36075812146,47.6759920119894]]]]}
var beaconHill = {"name":"Beacon Hill","median":"361900","type":"MultiPolygon","coordinates":[[[[-122.298422259488,47.5622979298785],[-122.298051680838,47.5616038164842],[-122.297817296578,47.5616681876919],[-122.297612504531,47.561698906499],[-122.297356514471,47.5616784272943],[-122.29700836799,47.5615862708728],[-122.296660221508,47.5615043540537],[-122.296230158208,47.5613405204155],[-122.29585129292,47.5611766867773],[-122.295462188029,47.5609923739343],[-122.295236916776,47.5609104571151],[-122.29486829109,47.5608592591033],[-122.293404027949,47.5608592591033],[-122.290560125016,47.5563755342015],[-122.290029906667,47.5552945918216],[-122.288043406277,47.5512447650593],[-122.285512783015,47.5460444733004],[-122.283885953774,47.5424988198284],[-122.28141531801,47.537418842385],[-122.280905368265,47.5363798033464],[-122.280835327325,47.5361997712786],[-122.280773753237,47.5359929349309],[-122.280745834898,47.5357775648852],[-122.280740509692,47.5356075147931],[-122.280716078361,47.5348184707799],[-122.280713330582,47.5315281560275],[-122.280683899735,47.530124315631],[-122.280661488782,47.5296648911127],[-122.280616666878,47.5292614939748],[-122.280571844974,47.5290037680254],[-122.280470995689,47.5287460420762],[-122.279854694506,47.5275022342339],[-122.279484913797,47.5267514673383],[-122.279148749515,47.526090344251],[-122.278913434518,47.5254180156875],[-122.278834996185,47.525093056882],[-122.278823790709,47.5247344816482],[-122.278846201661,47.5243422899863],[-122.278947050946,47.5238716599919],[-122.279933132839,47.5207341266964],[-122.280040185506,47.5203218073042],[-122.28003421145,47.5200098858699],[-122.279967172265,47.5196478742698],[-122.279873317406,47.5192322313221],[-122.279202925554,47.5164568090564],[-122.279109070695,47.5160679817825],[-122.279015215836,47.5155182604641],[-122.27842435192,47.5098727501156],[-122.28316317527,47.509880881221],[-122.285079823341,47.5124092254851],[-122.285813858773,47.5133471596473],[-122.287445048621,47.5155492659419],[-122.288474337221,47.5171679193829],[-122.289402476438,47.5188932051299],[-122.290258851108,47.5206875139624],[-122.29066664857,47.5217477873634],[-122.291441463748,47.5240314531502],[-122.292012380194,47.5257034227441],[-122.292746415626,47.5274161720841],[-122.293643570042,47.5294143796478],[-122.294703843443,47.5315349264499],[-122.295519438367,47.5333700150285],[-122.296090354813,47.5343895086835],[-122.296702051006,47.5352866630997],[-122.297395306692,47.5361022580237],[-122.298985716793,47.5375295491403],[-122.300691529596,47.5389464149243],[-122.30299461613,47.540896776493],[-122.305235457081,47.5430235005438],[-122.30679159663,47.5446003886203],[-122.308295864861,47.5460320370057],[-122.308959817736,47.5465818729797],[-122.309364414019,47.5468931008897],[-122.310349969067,47.5475466795003],[-122.31121103295,47.5481068897382],[-122.311781617452,47.5484181176481],[-122.313514119484,47.5494244212233],[-122.315827412246,47.5508674919305],[-122.316406770703,47.5512675251514],[-122.316848186671,47.5516951468703],[-122.317234425643,47.5521779455851],[-122.317565487619,47.5527021270469],[-122.318075874832,47.5535711647335],[-122.318737998783,47.5546747046532],[-122.320393308663,47.5571162867254],[-122.320980740741,47.558009023249],[-122.321427877337,47.5589371275926],[-122.321634791072,47.5595164860505],[-122.321745145064,47.5603441409901],[-122.321772733562,47.561020059191],[-122.321731350815,47.5617235658897],[-122.321579614076,47.5626477805723],[-122.32126234635,47.5641099709658],[-122.32097266712,47.5654756016163],[-122.320627810896,47.5672550597367],[-122.320338131667,47.5687448386283],[-122.32015880643,47.5700966750297],[-122.320070261656,47.5709647855083],[-122.320025413297,47.5719514494096],[-122.320016386179,47.5721003968423],[-122.319935716579,47.5734314452613],[-122.319860969313,47.5749861883785],[-122.319741373689,47.5761970940757],[-122.319681575876,47.5764960831368],[-122.319606828611,47.5769595161812],[-122.319432125199,47.5776260859113],[-122.319282044416,47.5782639292414],[-122.319188243926,47.578770451886],[-122.319131963632,47.579145653845],[-122.319108409336,47.5795770086634],[-122.319113203534,47.5801024188401],[-122.319225764122,47.5806277015827],[-122.319469645395,47.581490666088],[-122.319713526668,47.5824661911813],[-122.319938647844,47.5834041960785],[-122.320088728627,47.5845110418573],[-122.32013117335,47.5850152781155],[-122.320255341748,47.5868364146238],[-122.32040020488,47.5880367091406],[-122.32060715221,47.58905075106],[-122.32081409954,47.5897750667166],[-122.320979657405,47.5903338245089],[-122.32108313107,47.590768413903],[-122.321145215269,47.591182308564],[-122.321124520536,47.591637592691],[-122.32108313107,47.5920100978859],[-122.321000352138,47.5926516346104],[-122.320896878473,47.5932103924026],[-122.320792070295,47.5936763982836],[-122.316923489727,47.5948245815803],[-122.316178479338,47.5949694447118],[-122.31523235531,47.5949588195986],[-122.314529958235,47.5948464360665],[-122.313827561159,47.5946357169439],[-122.313265643499,47.5943407101722],[-122.312928492902,47.5940597513419],[-122.312675629955,47.5937647445704],[-122.312141808178,47.5930763954364],[-122.31169227405,47.59245828601],[-122.311284883746,47.5919244642326],[-122.310989876974,47.5915311218704],[-122.310751061969,47.5913204027477],[-122.310456055197,47.5911096836252],[-122.310048664893,47.590884916561],[-122.309585082823,47.5906741974384],[-122.309163644578,47.5905337180232],[-122.3086298228,47.5904072865496],[-122.307885281901,47.5903510947838],[-122.307301185059,47.5903363476348],[-122.299453676509,47.5800376673955],[-122.296602183772,47.5763380997475],[-122.296785386216,47.5761544551541],[-122.296785386216,47.5750938863743],[-122.299194579494,47.5750938863743],[-122.299190956452,47.5747911195925],[-122.299194579494,47.5737059815513],[-122.299194579494,47.5718969470165],[-122.299194579494,47.5665700558099],[-122.299193712116,47.5641292129997],[-122.299193530218,47.5636173435091],[-122.298422259488,47.5622979298785]]]]}
var belltown = {"name":"Belltown","median":"376700","type":"MultiPolygon","coordinates":[[[[-122.357332006091,47.6185906881421],[-122.350405754552,47.6185682653189],[-122.347295831418,47.6185682653189],[-122.337450436231,47.6126672498505],[-122.339142608255,47.6119628509744],[-122.340553666663,47.6110053470545],[-122.343107010449,47.6125675902921],[-122.345364827282,47.6108643329703],[-122.345721648842,47.6105951530583],[-122.346908184229,47.6112325304028],[-122.347798482742,47.611434870974],[-122.348213939557,47.6115013521821],[-122.348810185597,47.6117181477735],[-122.349437441367,47.6121025948585],[-122.351825060106,47.6133975745134],[-122.353909167988,47.6146318519968],[-122.355487424442,47.6156840229664],[-122.356843106268,47.6165945555361],[-122.357551298267,47.6171611091352],[-122.358583235179,47.6179097692481],[-122.359478854201,47.6185906881421],[-122.357332006091,47.6185906881421]]]]}
var bitterLake = {"name":"Bitter Lake","median":"363500", "type":"MultiPolygon","coordinates":[[[[-122.345239999941,47.7339842230969],[-122.344670705637,47.7051200031236],[-122.35540073991,47.7051536806063],[-122.355548433321,47.7340195160745],[-122.345239999941,47.7339842230969]]]]}
var blueRidge =  {"name":"Blue Ridge","median":"644100","type":"MultiPolygon","coordinates":[[[[-122.365376113731,47.7016849494959],[-122.365954417189,47.7015201782843],[-122.37677541641,47.7015688834538],[-122.380761321627,47.7015868239587],[-122.385322325224,47.7015940179707],[-122.387584915144,47.7015764678907],[-122.389324541761,47.7015629742451],[-122.389688113052,47.701691293524],[-122.390439779868,47.702872004744],[-122.389054364924,47.7032058694088],[-122.387774143036,47.7036982624425],[-122.386469301496,47.7042398947797],[-122.385262938564,47.7049538646788],[-122.383662661204,47.7061109883082],[-122.380683683349,47.7085237141737],[-122.38044999999,47.7091999996843],[-122.366800273483,47.7091928329483],[-122.365744494474,47.7083078417205],[-122.365356340427,47.7078420568639],[-122.365061343351,47.7073917981691],[-122.364797398598,47.7069570656361],[-122.364580032332,47.7064757546174],[-122.364347139904,47.7057770773324],[-122.364208456473,47.7051587298356],[-122.36423845677,47.7048610337807],[-122.364383605062,47.7044873269128],[-122.364480909834,47.70415649069],[-122.364587945082,47.7039424201929],[-122.364714441285,47.7037478106502],[-122.364889589873,47.7035629315844],[-122.365055007985,47.7033585915644],[-122.365142582279,47.7031542515445],[-122.365210695619,47.7026774581644],[-122.365376113731,47.7016849494959]]]]}
var brighton = {"name":"Brighton","median":"324700","type":"MultiPolygon","coordinates":[[[[-122.277677949862,47.5460444803733],[-122.273739433966,47.546043785681],[-122.273223583306,47.5460437856813],[-122.26994424697,47.5460437856815],[-122.269919682652,47.5422117522091],[-122.269931964811,47.5398290134478],[-122.266869224733,47.5398303128402],[-122.266990384035,47.539605302707],[-122.2670645632,47.5394272727113],[-122.26712885181,47.5392517153545],[-122.267188195142,47.5390415410542],[-122.267212722644,47.5388865388514],[-122.267291300719,47.5369672705026],[-122.267306973186,47.5355534969656],[-122.267291325149,47.5352998887366],[-122.267241447419,47.5349784544775],[-122.266929971018,47.5336684861307],[-122.266410151921,47.531664356426],[-122.270008647641,47.5316762458285],[-122.270008647641,47.531566732586],[-122.280713330582,47.5315281560275],[-122.280716078361,47.5348184707799],[-122.280740509692,47.5356075147931],[-122.280745834898,47.5357775648852],[-122.280773753237,47.5359929349309],[-122.280835327325,47.5361997712786],[-122.280905368265,47.5363798033464],[-122.28141531801,47.537418842385],[-122.283885953774,47.5424988198284],[-122.285512783015,47.5460444733005],[-122.277677949862,47.5460444803733]]]]}
var broadmoor = {"name":"Broadmoor","median":null,"type":"MultiPolygon","coordinates":[[[[-122.28533678327,47.6308313535182],[-122.292506851247,47.6259564754913],[-122.292536349568,47.6263014226027],[-122.292522680883,47.6267388205096],[-122.292468006144,47.6271488810472],[-122.292413331406,47.6273675800008],[-122.292440668775,47.6275042668466],[-122.292659367729,47.6276819597463],[-122.292905404051,47.6278459839615],[-122.293329133274,47.6280236768612],[-122.295511097551,47.6286456102127],[-122.295775827816,47.6287207797752],[-122.295939852031,47.6288711353059],[-122.296090207561,47.6291171716284],[-122.296595948891,47.6298552805964],[-122.297060684167,47.63040202798],[-122.297224823501,47.630741496562],[-122.297278098153,47.6309226303777],[-122.297310062944,47.6310824543325],[-122.297310062944,47.6312422782875],[-122.297288753083,47.6313807923815],[-122.297256788292,47.6315512712669],[-122.297214168571,47.6317750248037],[-122.297022379825,47.6323930107624],[-122.297033034755,47.6326274192297],[-122.297096964337,47.6328511727666],[-122.297267443222,47.6331068910944],[-122.297480541829,47.6333306446311],[-122.297704295366,47.6335437432376],[-122.298013288345,47.6337888066351],[-122.297977032588,47.6340864771049],[-122.297996175078,47.634354471968],[-122.298063173794,47.6345937530957],[-122.298211905456,47.6348452337322],[-122.298321597412,47.6350244591258],[-122.298426881108,47.6352541690084],[-122.298461040966,47.6353588402413],[-122.298467706011,47.6354210473299],[-122.298455594843,47.6354838788911],[-122.298359882392,47.635809301225],[-122.298225884961,47.6363548621964],[-122.29818759998,47.6365558583437],[-122.29818759998,47.6367185695106],[-122.298216313716,47.6368525669423],[-122.298253643973,47.6369111833129],[-122.298302454922,47.6369674218836],[-122.29832538628,47.6370150859636],[-122.298340739902,47.6370727055797],[-122.298345177261,47.6371103300603],[-122.298343775086,47.6371272224129],[-122.298340160561,47.6371440901997],[-122.298333333123,47.6371617612144],[-122.298324299351,47.6371785425779],[-122.298318473406,47.6371898741923],[-122.298310118311,47.6372008270695],[-122.298283782093,47.6372231115612],[-122.298252352996,47.6372414092828],[-122.298097402708,47.6373264305679],[-122.297902919873,47.6374277237117],[-122.297421900371,47.6376469802866],[-122.297283523458,47.6377036189979],[-122.29721424872,47.6377372667279],[-122.29715882893,47.6377689351795],[-122.297109346974,47.6377966450747],[-122.297085595635,47.6378124793005],[-122.297059865018,47.6378342513611],[-122.297044030792,47.6378580026998],[-122.297028196566,47.6378896711515],[-122.297004445228,47.637937173829],[-122.296988611002,47.637988635063],[-122.296968818219,47.6380539512447],[-122.296952983993,47.6381449980432],[-122.296947046159,47.6382439619548],[-122.296962880385,47.6386220040967],[-122.296962880385,47.6388179526416],[-122.296881729977,47.6395265342479],[-122.296836206578,47.6397917575308],[-122.296685781432,47.6401638618381],[-122.296598773292,47.6403939276337],[-122.295012658319,47.641186235857],[-122.290369667859,47.642187664733],[-122.288594406138,47.6435532506717],[-122.287820574106,47.6436442897344],[-122.287028208515,47.6436713386526],[-122.28600807789,47.6435579908052],[-122.285137150452,47.6435104362294],[-122.285348155503,47.6412824353708],[-122.285348155503,47.6367221700575],[-122.28533678327,47.6308313535182]]]]}
var broadview = {"name":"Broadview","median":"518100","type":"MultiPolygon","coordinates":[[[[-122.355548433321,47.7340195160746],[-122.35540073991,47.705153680551],[-122.360599999955,47.7051699991543],[-122.364208456473,47.7051587298355],[-122.364347139904,47.7057770773322],[-122.364580032332,47.7064757546174],[-122.364797398599,47.7069570656359],[-122.365061343351,47.7073917981689],[-122.365356340427,47.7078420568638],[-122.365744494474,47.7083078417203],[-122.366800273483,47.7091928329482],[-122.38044999999,47.7091999996842],[-122.379939999973,47.7124200007361],[-122.37640999997,47.71653000074],[-122.37613999997,47.7224200007454],[-122.373139999967,47.7292100007517],[-122.374939999969,47.7339200007561],[-122.355689999951,47.7340200007562],[-122.355548433321,47.7340195160746]]]]}
var bryant = {"name":"Bryant","median":"569300","type":"MultiPolygon","coordinates":[[[[-122.285078576812,47.6829041241342],[-122.285025477202,47.6756825069394],[-122.279556979003,47.6758033879266],[-122.279460495379,47.6679840521172],[-122.279768362388,47.6677993319118],[-122.279961878793,47.6676234079067],[-122.280436873607,47.6672275788953],[-122.281661956142,47.6660502268487],[-122.281791488446,47.6659257412576],[-122.281810094273,47.6659073205637],[-122.283559524698,47.6641752974069],[-122.284245628318,47.6635331747884],[-122.284966916738,47.6628382749682],[-122.285609039357,47.6622841143522],[-122.285943294967,47.6619938397437],[-122.28640949358,47.6616947689351],[-122.286726156789,47.6615452335308],[-122.287060412399,47.661413290527],[-122.287482630011,47.6612813475231],[-122.287904847623,47.6611845893204],[-122.288230307033,47.6611318121188],[-122.288626136044,47.6611230159186],[-122.290191302205,47.6611452411904],[-122.292876634378,47.6612429427892],[-122.290132781139,47.6627207666933],[-122.290292079968,47.6829519151501],[-122.285078576812,47.6829041241342]]]]}
var capitolHill = {"name":"Capitol Hill","median":"415600","median":415600,"type":"MultiPolygon","coordinates":[[[[-122.301847738915,47.6346152223937],[-122.301599472278,47.6345738446205],[-122.301603233893,47.6352735051463],[-122.301358728871,47.6351757031375],[-122.301097069643,47.6351038658227],[-122.300959997603,47.6350666162813],[-122.300815085999,47.6350106678388],[-122.300715492581,47.6349688142723],[-122.300613928956,47.6349123900364],[-122.300492477594,47.634821882179],[-122.300325199161,47.6346354862114],[-122.300106110833,47.6343970486814],[-122.29986160581,47.6341713517376],[-122.299597062125,47.6339918602123],[-122.299523060395,47.633953178025],[-122.299413973538,47.6339193234837],[-122.299176991747,47.6338929921736],[-122.298921201878,47.633870422479],[-122.298534038251,47.6338423724802],[-122.298013288345,47.6337888066355],[-122.297704295366,47.633543743238],[-122.297480541829,47.6333306446315],[-122.297267443222,47.6331068910945],[-122.297096964337,47.632851172767],[-122.297033034755,47.6326274192298],[-122.297022379825,47.6323930107628],[-122.297214168571,47.6317750248041],[-122.297256788292,47.6315512712673],[-122.297288753083,47.6313807923819],[-122.297310062944,47.6312422782876],[-122.297310062944,47.6310824543327],[-122.297278098153,47.6309226303781],[-122.297224823501,47.6307414965624],[-122.297060684167,47.6304020279804],[-122.296595948891,47.6298552805965],[-122.296090207561,47.6291171716288],[-122.295939852031,47.6288711353063],[-122.295775827816,47.6287207797756],[-122.295511097551,47.628645610213],[-122.293329133274,47.6280236768616],[-122.292905404051,47.6278459839619],[-122.292659367729,47.6276819597467],[-122.292440668775,47.627504266847],[-122.292413331406,47.627367580001],[-122.292468006144,47.6271488810476],[-122.292522680883,47.6267388205097],[-122.292536349568,47.6263014226029],[-122.292506851247,47.6259564754915],[-122.296028130292,47.6235627988357],[-122.302548637715,47.6191989879252],[-122.302942726602,47.6189338496597],[-122.304219396367,47.6180749215874],[-122.306413527248,47.6171448504372],[-122.312762167211,47.6145352017656],[-122.314133528401,47.6139082937933],[-122.31588364649,47.6131834314504],[-122.316654220872,47.6129026289212],[-122.319428267561,47.6129613093822],[-122.319428267561,47.6140722979786],[-122.325560621806,47.6140911033388],[-122.325562221776,47.6140911082452],[-122.327420319719,47.6140968062526],[-122.330367987244,47.6128806920554],[-122.329063281946,47.6161585627726],[-122.328869992273,47.6168189691579],[-122.328660595126,47.6175599129072],[-122.328499520398,47.6184619313847],[-122.328421387729,47.6259818042283],[-122.328359461175,47.6269324464636],[-122.328230303938,47.6276557269924],[-122.327971989463,47.6283273446264],[-122.327636180646,47.6290247937077],[-122.327274540382,47.629489759762],[-122.326525428405,47.6301872088434],[-122.325518001954,47.6309879837147],[-122.324613901294,47.6319179158232],[-122.324174766687,47.632692859247],[-122.323787294975,47.6335452970131],[-122.323399823263,47.6345010605692],[-122.323193171683,47.6353018354403],[-122.3229989461,47.6368283809396],[-122.322891085857,47.6396044324887],[-122.322769932911,47.6423288006813],[-122.318232667158,47.6427719728096],[-122.317576796468,47.6423227921191],[-122.317310110753,47.6421720114515],[-122.317121909524,47.6420739617223],[-122.316805827915,47.6419805739741],[-122.316461011614,47.6419087372446],[-122.316029991238,47.6418225331697],[-122.315828848396,47.6417363290943],[-122.315693589926,47.6416482344843],[-122.315577419844,47.6415495535982],[-122.315484032095,47.6414130638122],[-122.315448113731,47.6412047372972],[-122.315361909655,47.6409245740528],[-122.315211052524,47.6406084924437],[-122.315081746411,47.6404073496014],[-122.314916521933,47.6402133904323],[-122.314772848475,47.640033798609],[-122.314571705633,47.6398470231126],[-122.314241256678,47.6396458802705],[-122.313652900302,47.6393313153014],[-122.31235559366,47.6387168016292],[-122.311297265534,47.638648522332],[-122.310408552372,47.637840490142],[-122.30990668694,47.6375178623646],[-122.308975769439,47.6372829383464],[-122.307520834612,47.636490233148],[-122.306210458889,47.6359514910795],[-122.304943548661,47.6358452707373],[-122.30367588416,47.6356534283352],[-122.303484041758,47.6355970040989],[-122.303326053897,47.635514248553],[-122.303179350884,47.6353713071554],[-122.303085310491,47.635265981915],[-122.303017601408,47.6351719415218],[-122.302923561015,47.635070377897],[-122.302852090316,47.6350139536611],[-122.302743003459,47.634957529425],[-122.302498498437,47.6348446809532],[-122.302208854026,47.6347243092497],[-122.301847738915,47.6346152223937]]]]};
var cedarPark = {"name":"Cedar Park","median":"432200","type":"MultiPolygon","coordinates":[[[[-122.278665031023,47.7194243823228],[-122.277400779328,47.7158652389655],[-122.27746812676,47.7158691669136],[-122.278038881244,47.7157915886341],[-122.278148567018,47.7157915886341],[-122.278283846139,47.715813525789],[-122.278376164214,47.7158129075319],[-122.278452030992,47.7158025572115],[-122.278634840615,47.7157294333623],[-122.278762807351,47.7156636218979],[-122.27889443028,47.7156270599734],[-122.278996803669,47.7156270599734],[-122.279077239903,47.7156489971281],[-122.27913208279,47.7156819028603],[-122.279197894255,47.715758682902],[-122.279230799987,47.7158244943664],[-122.279249080949,47.7158939620232],[-122.279241768564,47.7167166053271],[-122.279256393334,47.7167531672518],[-122.279281986681,47.7167897291763],[-122.279351454338,47.716873821603],[-122.279483077266,47.7169835073769],[-122.279724385969,47.7171297550753],[-122.279907195592,47.7172175036945],[-122.280035162328,47.7173162208911],[-122.280108286178,47.7173966571251],[-122.280166785257,47.7174734371668],[-122.280203347182,47.717513655284],[-122.280261846261,47.7175684981709],[-122.280305720571,47.7175831229407],[-122.28036421965,47.7175977477105],[-122.28042271873,47.717601403903],[-122.280492186386,47.717594091518],[-122.280561654043,47.7175758105557],[-122.281216112494,47.7174222504725],[-122.281452549957,47.7173592112124],[-122.281723811875,47.717300090025],[-122.282033328679,47.7172722682898],[-122.282586285667,47.7172374911208],[-122.282666273155,47.7172374911208],[-122.28273930521,47.7172479242715],[-122.282801904114,47.7172618351391],[-122.282888847037,47.7172896568743],[-122.283045344297,47.717338344911],[-122.283125331786,47.7173696443631],[-122.283201841558,47.717376599797],[-122.283400071421,47.717376599797],[-122.283584390417,47.7173696443631],[-122.283883474071,47.717338344911],[-122.283107943202,47.7159924684703],[-122.283811281465,47.7155711250796],[-122.283976173214,47.7155579337394],[-122.29007716795,47.7155315510596],[-122.291541406687,47.7155051683797],[-122.297460365031,47.7156204895832],[-122.295235921862,47.7192604874967],[-122.29472895723,47.7200900659856],[-122.293681737638,47.7218930110562],[-122.293174321959,47.7229186384915],[-122.292753274907,47.7240522267094],[-122.292515761185,47.7249159129708],[-122.292375412167,47.7255096972755],[-122.292289043541,47.7261142776584],[-122.29223506315,47.7266972658849],[-122.292423971569,47.7337506085079],[-122.284079326323,47.7337296650833],[-122.283983133259,47.7334410858922],[-122.283804488998,47.7332349578986],[-122.281880627724,47.7318745131403],[-122.28167449973,47.7317783200767],[-122.281462150689,47.7316074049951],[-122.281275985609,47.731407289688],[-122.281138566946,47.7311599360957],[-122.281152308813,47.7309950337006],[-122.281358436806,47.730678970777],[-122.281537081067,47.7302667147897],[-122.281647015998,47.7298819425349],[-122.281619532265,47.7294559446812],[-122.281330953074,47.7288650444328],[-122.279965016462,47.725878113255],[-122.279846831519,47.7253608685404],[-122.279874315252,47.7251822242793],[-122.280011733914,47.7248799032218],[-122.280341538704,47.7237805539224],[-122.280547666698,47.7229697838139],[-122.280657601628,47.7224613347629],[-122.280698827227,47.7219116601131],[-122.280630117895,47.7213619854633],[-122.28057515043,47.720839794546],[-122.280492699233,47.7205649572211],[-122.280314054972,47.72027637803],[-122.279723154723,47.7199328313739],[-122.278936233604,47.7196685675529],[-122.278665031023,47.7194243823228]]]]}
var centralDistrict = {"name":"Central","median":"477500","type":"MultiPolygon","coordinates":[[[[-122.296718789551,47.6063092540899],[-122.296736216595,47.6016388062319],[-122.302330044271,47.6016778286321],[-122.306362218445,47.6017119506039],[-122.306362228226,47.5992527262471],[-122.306329839721,47.5929049376235],[-122.306323601145,47.5903347474941],[-122.307301185059,47.5903363476342],[-122.311500811947,47.5958061842868],[-122.312973394273,47.5977762606429],[-122.313742851706,47.5988773807612],[-122.313921949556,47.5990830116266],[-122.314078650005,47.5992043037798],[-122.314355082607,47.5993425200801],[-122.31461670632,47.5994412460092],[-122.314917820403,47.5995646534206],[-122.315362087085,47.5997374237967],[-122.315682946354,47.5998805763941],[-122.315988996735,47.6000582830666],[-122.31600819531,47.6000726819984],[-122.316146958222,47.6001767541816],[-122.316926893062,47.600838217907],[-122.316847912319,47.6009714979113],[-122.316793613058,47.6010949053228],[-122.316759058983,47.6012874208848],[-122.316729441204,47.6016872608978],[-122.316749037671,47.6043446453072],[-122.316762848111,47.6062174137161],[-122.316654220872,47.6129026289212],[-122.31588364649,47.6131834314504],[-122.314133528401,47.6139082937933],[-122.312762167211,47.6145352017656],[-122.306413527248,47.6171448504372],[-122.304219396367,47.6180749215875],[-122.302942726602,47.6189338496597],[-122.302539519469,47.6189322954986],[-122.29609926431,47.6189074715483],[-122.296075246789,47.6189072486361],[-122.296200662948,47.6139877526525],[-122.296214636759,47.6129173586967],[-122.296279076229,47.6079812953496],[-122.296291826967,47.607729558196],[-122.296326681055,47.6075640012756],[-122.296405102754,47.6073113091339],[-122.296500951497,47.6071021846031],[-122.296649081374,47.6067187896296],[-122.296683935462,47.606535805665],[-122.296718789551,47.6063092540899]]]]}
var columbiaCity = {"name":"Columbia City","median":"379000","type":"MultiPolygon","coordinates":[[[[-122.299193712116,47.5641292129997],[-122.288213714258,47.5641098924937],[-122.279730356173,47.5641211527891],[-122.274504972328,47.5641280886472],[-122.274470094094,47.5617300429566],[-122.274476777838,47.5606004901337],[-122.274474531719,47.5594100470345],[-122.274470094094,47.5570581055403],[-122.27382845462,47.5570581055403],[-122.273214177578,47.5570585147495],[-122.272720535304,47.5570585147497],[-122.27271950505,47.5551611829409],[-122.272721691817,47.551161804473],[-122.272722626666,47.549452057934],[-122.273230838662,47.549452057934],[-122.273230838662,47.5479112024148],[-122.273223583306,47.5460437856812],[-122.273739433966,47.546043785681],[-122.277677949862,47.5460444803733],[-122.285512783015,47.5460444733004],[-122.288043406277,47.5512447650593],[-122.290029906667,47.5552945918216],[-122.290560125016,47.5563755342015],[-122.293404027949,47.5608592591033],[-122.29486829109,47.5608592591033],[-122.295236916776,47.5609104571151],[-122.295462188029,47.5609923739343],[-122.29585129292,47.5611766867773],[-122.296230158208,47.5613405204155],[-122.296660221508,47.5615043540537],[-122.29700836799,47.5615862708728],[-122.297356514471,47.5616784272943],[-122.297612504531,47.561698906499],[-122.297817296578,47.5616681876919],[-122.298051680838,47.5616038164842],[-122.298422259488,47.5622979298785],[-122.299193530218,47.5636173435091],[-122.299193712116,47.5641292129997]]]]}
var crownHill = {"name":"Crown Hill","median":"422100","type":"MultiPolygon","coordinates":[[[[-122.366069531709,47.69066493706],[-122.376809524487,47.6905388491836],[-122.37677541641,47.7015688834538],[-122.365954417189,47.7015201782847],[-122.366069531709,47.69066493706]]]]}
var dennyBlaine = {"name":"Denny - Blaine","median":null,"type":"MultiPolygon","coordinates":[[[[-122.278891727509,47.6285388335259],[-122.278951351442,47.6284792096426],[-122.278910634645,47.6284792096426],[-122.280179594136,47.6269857504419],[-122.28045691406,47.6268748224723],[-122.281418289796,47.626024374706],[-122.281603169745,47.6257285667872],[-122.281687326053,47.6253838834679],[-122.282194785583,47.6244528951379],[-122.282324201547,47.6240831352396],[-122.282327709396,47.6235449305146],[-122.282270116247,47.622927839079],[-122.281972929644,47.6225301436664],[-122.281510729771,47.622178871763],[-122.281122481877,47.621957015824],[-122.280678769999,47.6218645758494],[-122.280327498096,47.6216057439205],[-122.279606466294,47.6206998321694],[-122.279606466294,47.6202746082863],[-122.279809834238,47.619886360393],[-122.279926530438,47.6193929210187],[-122.279865298223,47.618740104708],[-122.279680418274,47.6179266329317],[-122.279532514314,47.6172425771197],[-122.279735882258,47.616687937272],[-122.280142618147,47.6159299294804],[-122.280382962081,47.6151534336938],[-122.280928156472,47.6151576355108],[-122.281337774857,47.6151576355108],[-122.281304307809,47.615353437883],[-122.281280437674,47.6155682691064],[-122.281275133199,47.61570353321],[-122.281285742148,47.6157990137536],[-122.281309612284,47.615883885348],[-122.281349395844,47.6159448868064],[-122.281399788353,47.6160085405023],[-122.281471398761,47.6160748464353],[-122.281545112558,47.6161336398109],[-122.281600739746,47.6161892669991],[-122.281929445858,47.6161892669991],[-122.281975323853,47.6162419373868],[-122.282025716362,47.6162896776586],[-122.282070804396,47.6163294612186],[-122.282121196905,47.6163612880664],[-122.282182198364,47.6163931149142],[-122.282242980918,47.6164168327686],[-122.282384577396,47.6164471748713],[-122.282546401944,47.6164522318883],[-122.284604607903,47.6164522318883],[-122.284603214898,47.6176221998894],[-122.284620765932,47.6177099550608],[-122.284638316966,47.6177684585086],[-122.284655868001,47.6178211116115],[-122.284685119724,47.6178620640248],[-122.284720221793,47.617908866783],[-122.284784575585,47.6179790709202],[-122.284860630067,47.6180492750574],[-122.284965936273,47.6181311798842],[-122.285071242479,47.618189683332],[-122.285211650754,47.6182540371243],[-122.285322807304,47.6182949895378],[-122.285433963855,47.6183183909168],[-122.285568521784,47.6183359419512],[-122.285849338333,47.6183534929855],[-122.286159406606,47.6183593433302],[-122.287322499805,47.6183564538851],[-122.289936514399,47.6183378819516],[-122.290867617505,47.6183378819516],[-122.290993868773,47.6183536633603],[-122.291088557224,47.6183773354731],[-122.291151682859,47.6184088982902],[-122.291199027084,47.6184483518117],[-122.291242425958,47.618511477446],[-122.291266098071,47.6186022205451],[-122.291266098071,47.6188626137865],[-122.291176635969,47.6224430154072],[-122.291097664462,47.6249382140291],[-122.291005070459,47.6249077960278],[-122.290925949782,47.6248721699211],[-122.290859905674,47.6248325434565],[-122.290815876269,47.6247797081704],[-122.290785055686,47.6247224699435],[-122.290767443923,47.624665231717],[-122.290714608637,47.6244847111556],[-122.290679385113,47.624418667048],[-122.290639758649,47.6243614288212],[-122.290573714541,47.624308593535],[-122.290498864552,47.6242733700108],[-122.290384388099,47.6242513553083],[-122.29030953811,47.6242469523679],[-122.290203867538,47.6242601611895],[-122.289666708794,47.6242557582489],[-122.289428950006,47.6242249376652],[-122.288491123676,47.6240312082825],[-122.288235753127,47.6239827759369],[-122.288055232566,47.6239387465317],[-122.287914338469,47.6238903141859],[-122.287799862016,47.6238462847807],[-122.287628147335,47.62375382303],[-122.287143823879,47.623489646599],[-122.286765170994,47.6232474848707],[-122.286373309288,47.6230141290233],[-122.285955029939,47.6227895790569],[-122.285752494675,47.6226706996629],[-122.285571974114,47.6225826408526],[-122.285439885899,47.6225386114474],[-122.285268171219,47.6225121938044],[-122.284634147784,47.6225165967448],[-122.284616536022,47.6225826408526],[-122.28459892426,47.6226618937819],[-122.284612133082,47.6227279378897],[-122.284642953665,47.6227851761163],[-122.284700191892,47.6228556231645],[-122.284798758096,47.6229637078965],[-122.284968367983,47.6231017237846],[-122.285104664187,47.6232082121186],[-122.285462232065,47.6235141086073],[-122.285522000299,47.6235766784774],[-122.285572955979,47.6236646758617],[-122.285600119095,47.6237250383419],[-122.285615209715,47.6237884189461],[-122.285624264087,47.6238668901703],[-122.285633318459,47.6239845970066],[-122.285633615282,47.6242821758918],[-122.285629212341,47.6244318758694],[-122.285616003519,47.6247841111107],[-122.285600119095,47.6248538167211],[-122.285582010351,47.6248990885813],[-122.285489960859,47.6250003759559],[-122.285237350635,47.6252772404487],[-122.284590118379,47.6260169344553],[-122.284405194877,47.6262194697191],[-122.284286315483,47.6264043932208],[-122.284185047852,47.6265628990794],[-122.284074974339,47.6267390167002],[-122.284026541993,47.6268006578674],[-122.283956094945,47.6268490902129],[-122.283868036134,47.6268975225588],[-122.283788783205,47.6269283431423],[-122.283295653867,47.6270956548819],[-122.283071103901,47.6271793107517],[-122.282901571356,47.6272485866288],[-122.282862193489,47.627270960417],[-122.282834449992,47.6272942291566],[-122.282819235815,47.6273112332354],[-122.282807601446,47.6273237625569],[-122.282793718648,47.6273510254318],[-122.282781647852,47.6273819344057],[-122.282776106886,47.6274170695397],[-122.282770908433,47.6275081225705],[-122.282771703946,47.6285530281928],[-122.278891727509,47.6285388335259]]]]}
var downtown = {"name":"Downtown","median":"563000","type":"MultiPolygon","coordinates":[[[[-122.353909167988,47.6146318519969],[-122.351825060106,47.6133975745134],[-122.349437441367,47.6121025948586],[-122.348810185597,47.6117181477734],[-122.348213939557,47.6115013521821],[-122.347798482742,47.6114348709738],[-122.346908184229,47.6112325304029],[-122.345721648842,47.6105951530584],[-122.345364827282,47.6108643329703],[-122.343107010449,47.6125675902922],[-122.340553666663,47.6110053470545],[-122.339142608255,47.6119628509744],[-122.337450436231,47.6126672498505],[-122.347295831418,47.6185682653187],[-122.343608843441,47.6185682653187],[-122.33434032829,47.6185476686184],[-122.331703950647,47.6185476686184],[-122.330200391522,47.6184240884164],[-122.328499520398,47.6184619313847],[-122.328660595126,47.6175599129072],[-122.328869992273,47.6168189691579],[-122.329063281946,47.6161585627726],[-122.330367987244,47.6128806920554],[-122.330866192922,47.6110268511419],[-122.330990141291,47.6101710912862],[-122.331006445941,47.6093884681025],[-122.330892313393,47.6088015007145],[-122.330778180845,47.6084754077214],[-122.330484697152,47.6079047449832],[-122.32958794142,47.6068123334558],[-122.328218350848,47.6051492591902],[-122.32670201843,47.603469880275],[-122.326375925436,47.6031111779826],[-122.325997731581,47.6027320560315],[-122.325459440243,47.6022833464522],[-122.324813564485,47.6017339723362],[-122.328998120123,47.6017416956476],[-122.329041029316,47.5985342334856],[-122.333213882632,47.6030565735363],[-122.334320601264,47.602592956387],[-122.334933332167,47.6032608330711],[-122.336814416038,47.6025316832972],[-122.336289217948,47.6019315452166],[-122.335754678623,47.6013059362292],[-122.335667568511,47.6011435946565],[-122.335608175253,47.6009891721849],[-122.335548781995,47.6008426688144],[-122.33551314604,47.6007159631968],[-122.335491287887,47.6005475837572],[-122.335473550534,47.5982095676968],[-122.335405611096,47.5974061014317],[-122.335405611096,47.594850077176],[-122.335391331631,47.5938933530132],[-122.335437914579,47.5935610553473],[-122.335509186489,47.5932957654604],[-122.335676920934,47.5928652315248],[-122.335894518853,47.5924237504565],[-122.342586789001,47.5924499539292],[-122.339517089457,47.5992943106859],[-122.337375395248,47.5992695901787],[-122.337409534885,47.5996109865434],[-122.339662750893,47.5997475450894],[-122.339628611256,47.6005668963651],[-122.337425561941,47.6006559091354],[-122.336897440337,47.6010107116394],[-122.338024048342,47.6010789909123],[-122.339184795982,47.6012496890948],[-122.340036462061,47.6014700607856],[-122.340270436422,47.6019632074974],[-122.340168017513,47.6023387434986],[-122.338665873507,47.6031580947741],[-122.340645972423,47.6031580947741],[-122.341021508425,47.6037043289581],[-122.338802432054,47.6037726082312],[-122.338938990599,47.6039774460501],[-122.34009973824,47.6039774460501],[-122.340441134605,47.6044554009609],[-122.339382805874,47.6045578198701],[-122.340133877876,47.6045919595069],[-122.340543553514,47.6045919595069],[-122.340953229152,47.6049674955081],[-122.339963179694,47.6051381936906],[-122.340236296785,47.6053430315095],[-122.341806720064,47.6052406126001],[-122.342113976793,47.6056502882378],[-122.340543553514,47.6057868467838],[-122.34068011206,47.6059916846027],[-122.342352954248,47.6059916846027],[-122.342694350613,47.6063672206039],[-122.342182256065,47.6065037791499],[-122.341021508425,47.6065037791499],[-122.341431184063,47.6069475944242],[-122.341314970445,47.6070156128736],[-122.341485807481,47.6069475944242],[-122.341997902028,47.6073231304255],[-122.343773163125,47.6072548511524],[-122.344046280217,47.6076303871538],[-122.342612415485,47.6077669456998],[-122.342783113668,47.6079035042458],[-122.343704883853,47.6078693646094],[-122.344251118036,47.6081766213377],[-122.343670744216,47.6083131798837],[-122.34363660458,47.6085180177026],[-122.345138748585,47.6083131798837],[-122.346504334044,47.6091325311592],[-122.345002190039,47.6092349500687],[-122.346162937679,47.6097129049795],[-122.346483850263,47.610020161708],[-122.346859386264,47.6103956977091],[-122.348702926634,47.6102932787996],[-122.351195120098,47.6120685398969],[-122.35068302555,47.6121709588063],[-122.352253448829,47.6121368191698],[-122.353141079377,47.6127854722632],[-122.352424147011,47.6129561704455],[-122.352492426284,47.6131951479009],[-122.353141079377,47.6133999857198],[-122.355121178293,47.6135024046292],[-122.355838110659,47.6142193369955],[-122.355223597203,47.6143900351777],[-122.356725741208,47.6143900351777],[-122.357408533937,47.6150728279076],[-122.35563327284,47.6151752468169],[-122.357271975392,47.6161994359115],[-122.357652468552,47.6165338533647],[-122.358023047394,47.6168480890046],[-122.360741715443,47.618590688142],[-122.359478854201,47.618590688142],[-122.358583235179,47.6179097692481],[-122.357551298267,47.6171611091352],[-122.356843106268,47.6165945555359],[-122.355487424442,47.6156840229664],[-122.353909167988,47.6146318519969]]]]}
var eastlake = {"name":"Eastlake","median":"428400","type":"MultiPolygon","coordinates":[[[[-122.323399823263,47.634501060569],[-122.323787294975,47.6335452970129],[-122.324174766687,47.6326928592468],[-122.324613901294,47.6319179158231],[-122.325518001955,47.6309879837145],[-122.326525428406,47.6301872088432],[-122.327274540382,47.6294897597618],[-122.327636180646,47.6290247937075],[-122.327971989463,47.6283273446263],[-122.328230303938,47.6276557269922],[-122.328359461175,47.6269324464634],[-122.328421387729,47.6259818042279],[-122.33206027033,47.6250198007812],[-122.334335934014,47.6245619210068],[-122.33434032829,47.6257771104364],[-122.335904897872,47.625776807527],[-122.335912800714,47.6268651549536],[-122.334925359306,47.6274576197977],[-122.334579753837,47.6274576197977],[-122.333888544852,47.6284450612048],[-122.333394822196,47.6284450612048],[-122.333394822196,47.6293831315183],[-122.332654242117,47.6293831315183],[-122.332320250903,47.6292234167992],[-122.33216051946,47.6304693190193],[-122.330669482349,47.6309136666759],[-122.329731412036,47.6306668073007],[-122.327805900315,47.6325923190212],[-122.330471994068,47.6342216002727],[-122.330422621021,47.6355052741021],[-122.327460294846,47.6337278776161],[-122.327441015549,47.6337768444129],[-122.327434992112,47.6337744733192],[-122.327962656175,47.6350519772267],[-122.330184400318,47.636718285822],[-122.330267716724,47.6393010651212],[-122.330406576099,47.6409673737165],[-122.330064336708,47.6418888545422],[-122.329266968347,47.6433782619424],[-122.328129287034,47.6438000983285],[-122.327407220627,47.6452164616112],[-122.326213031173,47.6481047291919],[-122.322521554049,47.6525830737903],[-122.322521554049,47.6500774233868],[-122.322573216944,47.6487083566714],[-122.322650711287,47.6470809754814],[-122.322741554608,47.6429669440308],[-122.322769932911,47.6423288006811],[-122.322891085858,47.6396044324885],[-122.3229989461,47.6368283809393],[-122.323193171683,47.6353018354401],[-122.323399823263,47.634501060569]]]]}
var fauntleroy = {"name":"Fauntleroy","median":"535900","type":"MultiPolygon","coordinates":[[[[-122.388558414085,47.5339263117754],[-122.388777308916,47.5329256496878],[-122.387354492511,47.5329256496878],[-122.387401398546,47.5285321177101],[-122.380614975529,47.5283744705749],[-122.379594081951,47.5283507554384],[-122.376586353831,47.5282808865665],[-122.376646350204,47.5257134522636],[-122.376842839633,47.5175075261917],[-122.379337105689,47.5174828374837],[-122.384892372157,47.5174969699435],[-122.388489899839,47.5174969699435],[-122.392163415688,47.5175113623348],[-122.392140608172,47.5147915661183],[-122.392055079989,47.5141016387762],[-122.391606016686,47.5124477442631],[-122.391305914967,47.5119118483371],[-122.390984377412,47.5113116449001],[-122.390598532345,47.5109686715074],[-122.389805406375,47.5105613906039],[-122.389419561308,47.5103041605593],[-122.389226638775,47.5101112380261],[-122.389140895426,47.5098968796556],[-122.389098023752,47.5092966762186],[-122.389055152078,47.5080533976704],[-122.389140895426,47.5068958624704],[-122.389569612167,47.5062956590334],[-122.390196039027,47.5058095428673],[-122.392818195298,47.5096772253365],[-122.396504017567,47.5150694460448],[-122.399507281242,47.5170488698747],[-122.395275410144,47.5201203874557],[-122.394183316393,47.5229871394116],[-122.393910291002,47.5243522585533],[-122.394456339831,47.5253760983981],[-122.40128193554,47.5307683191062],[-122.396026226551,47.5357510066108],[-122.396353357845,47.5367869239357],[-122.391957816685,47.5370186377671],[-122.389918669492,47.5370186377671],[-122.389889949109,47.5380023108848],[-122.389243740492,47.5380238511719],[-122.387312294735,47.5385479981613],[-122.387312294735,47.5383972161507],[-122.387542057799,47.538390036055],[-122.387764640767,47.538361315672],[-122.388087745076,47.53819617347],[-122.388260067374,47.5380023108845],[-122.388425209576,47.5378012682035],[-122.388561631395,47.5375930454271],[-122.388561631395,47.5372699411182],[-122.388683693023,47.5369755571925],[-122.388640612449,47.5365375713518],[-122.388619072161,47.5358339219682],[-122.388523432165,47.5347234463777],[-122.388527143394,47.5342390186777],[-122.388558414085,47.5339263117754]]]]}
var firstHill = {"name":"First Hill","median":"296000","type":"MultiPolygon","coordinates":[[[[-122.32061279849,47.6043446228447],[-122.325459440243,47.6022833464522],[-122.325997731581,47.6027320560315],[-122.326375925436,47.6031111779826],[-122.32670201843,47.603469880275],[-122.328218350848,47.6051492591902],[-122.32958794142,47.6068123334557],[-122.330484697152,47.6079047449832],[-122.330778180845,47.6084754077214],[-122.330892313393,47.6088015007145],[-122.331006445941,47.6093884681025],[-122.330990141291,47.6101710912861],[-122.330866192922,47.6110268511418],[-122.330367987244,47.6128806920553],[-122.327420319719,47.6140968062527],[-122.325562221776,47.6140911082454],[-122.325560621806,47.6140911033389],[-122.319428267561,47.6140722979788],[-122.319428267561,47.6129613093824],[-122.316654220872,47.6129026289213],[-122.316762848111,47.6062174137163],[-122.316749037671,47.6043446453075],[-122.32061279849,47.6043446228447]]]]}
var fremont = {"name":"Fremont","median":"505400","type":"MultiPolygon","coordinates":[[[[-122.355097491133,47.662137946078],[-122.354575547756,47.6621309868331],[-122.353970093439,47.6621309868331],[-122.353983957541,47.6650632445465],[-122.347233406151,47.6649843802794],[-122.347265925616,47.6613828494943],[-122.342087200763,47.6613909793607],[-122.342775714215,47.6480758596481],[-122.343329471062,47.6481663033154],[-122.346879412744,47.6484880239668],[-122.348218872996,47.6474872197134],[-122.350120307081,47.6482342116756],[-122.354805983935,47.6502714624813],[-122.357977486668,47.6517710379451],[-122.360365421968,47.6529730188009],[-122.360866698569,47.6532535918477],[-122.360866581103,47.6533126275174],[-122.360866157644,47.6535254473165],[-122.360865528129,47.6538418253249],[-122.363887331445,47.6569107302036],[-122.364582509469,47.6576254522103],[-122.366199035722,47.6592874248971],[-122.366199035722,47.6614990696719],[-122.360782108665,47.6614990696719],[-122.360781646764,47.6668890126754],[-122.360455643458,47.6663107862674],[-122.360184659242,47.6658444413376],[-122.359793937815,47.6652205474448],[-122.359693106478,47.6650945082746],[-122.359459934014,47.664842429934],[-122.359151138047,47.6645336339671],[-122.357978973763,47.663512716688],[-122.357581950377,47.6631850148455],[-122.357166561559,47.6629047272787],[-122.356649402774,47.662632052475],[-122.356210970338,47.6624163158791],[-122.356101926734,47.6623689950702],[-122.355922757158,47.6622912422353],[-122.355842130351,47.6622562532435],[-122.35541065716,47.6621657830581],[-122.355097491133,47.662137946078]]]]}
var georgetown = {"name":"Georgetown","median":null,"type":"MultiPolygon","coordinates":[[[[-122.340211986264,47.556728344521],[-122.339828955014,47.5561920984267],[-122.338220218684,47.5562687038956],[-122.337147726496,47.5542003288936],[-122.334006859305,47.5542003288936],[-122.324737474531,47.5541237234248],[-122.323894802656,47.5534342644398],[-122.317565487619,47.5527021270469],[-122.317234425643,47.5521779455851],[-122.316848186671,47.5516951468704],[-122.316406770703,47.5512675251515],[-122.315827412246,47.5508674919305],[-122.313514119483,47.5494244212234],[-122.311781617452,47.5484181176482],[-122.31121103295,47.5481068897382],[-122.310349969067,47.5475466795004],[-122.309364414019,47.5468931008897],[-122.308959817736,47.5465818729799],[-122.308295864861,47.5460320370058],[-122.30679159663,47.5446003886203],[-122.305235457081,47.5430235005438],[-122.30299461613,47.5408967764931],[-122.300691529596,47.5389464149242],[-122.298985716793,47.5375295491403],[-122.297395306692,47.5361022580236],[-122.296702051006,47.5352866630996],[-122.296090354813,47.5343895086834],[-122.295519438367,47.5333700150285],[-122.294703843443,47.5315349264498],[-122.293643570042,47.5294143796477],[-122.292746415626,47.5274161720841],[-122.292012380194,47.5257034227441],[-122.291441463748,47.5240314531501],[-122.307842998873,47.5240540328919],[-122.309024712781,47.5270340070938],[-122.317023199281,47.5318518192053],[-122.320930130768,47.5343032271976],[-122.321466376267,47.5347628661963],[-122.325526520754,47.5365248156907],[-122.326522405251,47.5382101586854],[-122.327594896248,47.5392826496822],[-122.330429336739,47.5402019276792],[-122.331655040735,47.540967992677],[-122.332267892733,47.5426533356717],[-122.329433452242,47.5425001226722],[-122.328973813244,47.542883155171],[-122.329816484741,47.5431895811701],[-122.333646809729,47.5428065486712],[-122.33655785672,47.5446451046656],[-122.335178939724,47.5459474151614],[-122.334795907225,47.5474795451568],[-122.337247315218,47.5464836606598],[-122.342586789001,47.5568049499898],[-122.340211986264,47.556728344521]]]]}
var greenLake = {"name":"Green Lake","median":"573500","type":"MultiPolygon","coordinates":[[[[-122.34451609155,47.6905561123626],[-122.335038320921,47.6905177925353],[-122.334195284719,47.6905177925353],[-122.330414395088,47.6905177925353],[-122.329750184748,47.690479472708],[-122.329315893371,47.6903900597774],[-122.329061200895,47.6903004888255],[-122.328940879965,47.6899951889026],[-122.328794867425,47.689624702025],[-122.328471880355,47.6890814964975],[-122.328134212054,47.6886116971224],[-122.327928674827,47.6883327537435],[-122.327620368988,47.6879950854425],[-122.32709184469,47.6875252860674],[-122.326313739476,47.686893993157],[-122.325183284729,47.6860278005592],[-122.324346454592,47.6853818264183],[-122.323526902385,47.6847635470961],[-122.322452575861,47.683840297219],[-122.32211490756,47.6835466726093],[-122.321835964181,47.6831943230781],[-122.32148361465,47.6827245237029],[-122.32116062758,47.6822400430974],[-122.32092023234,47.681534141711],[-122.320558727353,47.6771710470023],[-122.320658274715,47.6759565691859],[-122.320976826273,47.6744334945472],[-122.321663703071,47.6722434525832],[-122.333561806725,47.6723370667486],[-122.333561806725,47.6731148502502],[-122.336174886384,47.6710816968866],[-122.337012926215,47.6707845352278],[-122.337150527092,47.6712386181193],[-122.337962423905,47.670604110526],[-122.337962423905,47.6701947507884],[-122.339898719059,47.6701914200104],[-122.339940102974,47.669637341377],[-122.339969212249,47.6693611668867],[-122.340070416608,47.6695020156802],[-122.340158127708,47.669637341377],[-122.340275911184,47.6697676550108],[-122.340393694661,47.669857872142],[-122.340561598767,47.6699556073674],[-122.340817213971,47.6700508365614],[-122.342248604896,47.670372510526],[-122.34250894172,47.6704592894674],[-122.342769278544,47.6705749947223],[-122.342989118528,47.6707196262911],[-122.343162676411,47.6708526873343],[-122.34343458376,47.6711072388953],[-122.343585000591,47.6713097230917],[-122.343694920584,47.6715527041271],[-122.343752773211,47.6717841146371],[-122.343868478466,47.6721775125041],[-122.343972613196,47.6725188430065],[-122.344088318451,47.6727676093047],[-122.344342870012,47.6731494366463],[-122.344724697353,47.6735544050388],[-122.345170162585,47.673895735541],[-122.345465210985,47.6740577228981],[-122.345714817467,47.6742064353576],[-122.34604373726,47.6744974028671],[-122.346390853025,47.6748965859969],[-122.346587551959,47.6751742786089],[-122.346651189849,47.6753709775425],[-122.346662760375,47.6755966027897],[-122.346860705021,47.6759476143618],[-122.346665408906,47.6763391294179],[-122.34655577761,47.6765348995903],[-122.346481384944,47.6766523616936],[-122.346395246069,47.6767815700072],[-122.346281699369,47.6769225245311],[-122.346046775162,47.6771809411584],[-122.345956720883,47.6772984032618],[-122.3458627512,47.6774354423824],[-122.345788358535,47.677564650696],[-122.345721796676,47.6777095206234],[-122.345674811835,47.6778308981302],[-122.345626675404,47.6779908120008],[-122.345526549954,47.6785999084923],[-122.345342986628,47.6798931955631],[-122.345288615912,47.6801205088117],[-122.345235883593,47.6802466078345],[-122.34520149295,47.6803199745385],[-122.345162516889,47.6804025120806],[-122.345126048151,47.6804689169043],[-122.345000891338,47.6806608240182],[-122.344875734525,47.6807943246189],[-122.344758921499,47.6809278252199],[-122.344642108473,47.6810613258207],[-122.34455032681,47.6812198577843],[-122.344508607872,47.6813283270225],[-122.344483874876,47.6814525730333],[-122.344475232722,47.6815702968615],[-122.344494186208,47.6832782047325],[-122.34451609155,47.6905561123626]]]]}
var greenwood = {"name":"Greenwood","median":"421400","type":"MultiPolygon","coordinates":[[[[-122.344494186208,47.6832782047325],[-122.366040201904,47.6832533821718],[-122.36606953171,47.6906649370599],[-122.365954417189,47.7015201782846],[-122.36537611373,47.7016849494964],[-122.365210695619,47.7026774581649],[-122.365142582279,47.703154251545],[-122.365055007985,47.7033585915649],[-122.364889589873,47.7035629315848],[-122.364714441285,47.7037478106507],[-122.364587945082,47.7039424201934],[-122.364480909834,47.7041564906905],[-122.364383605062,47.7044873269133],[-122.36423845677,47.7048610337812],[-122.364208456473,47.7051587298361],[-122.360599999955,47.7051699991549],[-122.35540073991,47.7051536805515],[-122.344670705628,47.7051200026702],[-122.344670323236,47.7051006146988],[-122.34466999994,47.7050842230703],[-122.34451609155,47.6905561123626],[-122.344494186208,47.6832782047325]]]]}
var hallerLake = {"name":"Haller Lake","median":"368700","type":"MultiPolygon","coordinates":[[[[-122.329976320008,47.7088928102804],[-122.330001618371,47.7086398266524],[-122.332379664476,47.7086398266522],[-122.33402405806,47.7086651250151],[-122.334580622042,47.7085639315638],[-122.334960097484,47.7083109479356],[-122.335288976201,47.7079314724933],[-122.335643153281,47.7074508035996],[-122.336250313989,47.7068183445289],[-122.33672720181,47.7063579011156],[-122.337327075319,47.7058526587636],[-122.337894707572,47.7054269345737],[-122.338476569917,47.7051739509455],[-122.33895723881,47.7050727574942],[-122.344670323236,47.7051006146983],[-122.344670705637,47.7051200031236],[-122.345239999941,47.7339842230969],[-122.324799406523,47.7339842230967],[-122.324562470364,47.7332045369538],[-122.324410680187,47.7324455860692],[-122.324334785099,47.7319649171755],[-122.32425889001,47.731028877751],[-122.324284188373,47.7295615727073],[-122.324309486736,47.7264498740801],[-122.324334785099,47.7210360244357],[-122.324360083461,47.7190121554098],[-122.324360083461,47.7186073816047],[-122.324461276913,47.7180761159853],[-122.324638365452,47.717544850366],[-122.324840752355,47.7169629880211],[-122.325397316337,47.7160016502338],[-122.327952450982,47.7127381614296],[-122.32835521708,47.712268267649],[-122.328445018474,47.7121634993555],[-122.328863192044,47.7116756301911],[-122.329267965849,47.7110937678461],[-122.329470352752,47.7106889940409],[-122.329698038017,47.7101324300588],[-122.32990042492,47.709398777537],[-122.329976320008,47.7088928102804]]]]}
var hawthorneHills = {"name":"Hawthorne Hills","median":"704300","type":"MultiPolygon","coordinates":[[[[-122.275192248541,47.6748765915623],[-122.27487194823,47.6748616242581],[-122.274683360196,47.6748646177189],[-122.274563621762,47.6749095196316],[-122.274476811397,47.6749873496139],[-122.274428916023,47.6750741599785],[-122.274387007571,47.6751938984126],[-122.274324144893,47.6752926826208],[-122.274246314911,47.6753675191421],[-122.274132563399,47.6754124210549],[-122.274006838043,47.6754453491244],[-122.272842381771,47.6756548913841],[-122.272477179547,47.675714760601],[-122.27177331206,47.6757487820182],[-122.263541698901,47.6757327213662],[-122.263601130952,47.6755713338695],[-122.263650545396,47.6754601513703],[-122.263712313452,47.6753427920656],[-122.263786435118,47.6752439631774],[-122.271514566075,47.6697258827034],[-122.273266227982,47.6685530308181],[-122.273555632993,47.6684159442341],[-122.273860269846,47.6683245531781],[-122.274164906699,47.6682636258076],[-122.274652325665,47.6682179302795],[-122.275109280945,47.6682331621221],[-122.275505308854,47.6682788576502],[-122.276098441921,47.6683221528575],[-122.277211275233,47.6684311760767],[-122.277637766827,47.6684311760767],[-122.277972867366,47.6683854805488],[-122.278353663432,47.6683397850207],[-122.278810618712,47.6682331621221],[-122.279160951094,47.6681265392235],[-122.279460495379,47.6679840521173],[-122.279556979003,47.6758033879269],[-122.275973548175,47.6757591480404],[-122.275829855703,47.6757027867578],[-122.275713110729,47.6756099894713],[-122.275638274208,47.6755022248806],[-122.275608339599,47.6753794929855],[-122.275578404991,47.6751100815088],[-122.275542483461,47.6750352449874],[-122.275464653478,47.6749634019271],[-122.275383830035,47.6749125130926],[-122.275326954279,47.6748885654058],[-122.275192248541,47.6748765915623]]]]}
var highPoint = {"name":"High Point","median":"322800","type":"MultiPolygon","coordinates":[[[[-122.360465618925,47.5336942268563],[-122.365819638814,47.533694009407],[-122.367982268425,47.5336992184135],[-122.367982268425,47.535546032145],[-122.365847223649,47.535546032145],[-122.365815197977,47.5367523324436],[-122.366348959171,47.5368804351303],[-122.366833836007,47.5370888645015],[-122.367213652306,47.537350144981],[-122.376539789854,47.5374078203911],[-122.376519763613,47.5413331331564],[-122.376404026004,47.5464734472824],[-122.376295379758,47.5537942045798],[-122.362963267848,47.5537161727473],[-122.362990292641,47.5490949356422],[-122.362990292641,47.5477715368157],[-122.362961861237,47.547222834442],[-122.362867112483,47.5467332992092],[-122.36272498935,47.5464174700267],[-122.362345994332,47.5458489774981],[-122.361872250558,47.5452804849696],[-122.361396812421,47.5446115845155],[-122.361256383652,47.5442382486674],[-122.361240592193,47.5438908365667],[-122.361240592193,47.5428643917236],[-122.361240592193,47.5422958991952],[-122.361177426356,47.541901112717],[-122.360830014255,47.5407325447418],[-122.360798431337,47.5404325070185],[-122.360814222796,47.5401166778362],[-122.361091339653,47.5379531647162],[-122.36128309278,47.5366411696407],[-122.36129318505,47.5363384015464],[-122.36129318505,47.5361870174992],[-122.361242723701,47.5359750798332],[-122.360526172544,47.5339869026807],[-122.360465618925,47.5336942268563]]]]}
var highlandPark = {"name":"Highland Park","median":"287200","type":"MultiPolygon","coordinates":[[[[-122.334621875856,47.5346594427962],[-122.334621875856,47.5329349542858],[-122.334693729544,47.5311386120876],[-122.334589924096,47.5297538495275],[-122.334370387948,47.5289470746056],[-122.333831485289,47.527581854535],[-122.333651851069,47.526504049216],[-122.333508143693,47.5248873412377],[-122.333148875253,47.5237736090746],[-122.332645899438,47.5224083890039],[-122.332071069934,47.5214383642169],[-122.331541335387,47.5207474061124],[-122.331244752523,47.5203605588981],[-122.3308274043,47.5195985512685],[-122.3304902888,47.5186719972318],[-122.330202874048,47.517414557693],[-122.330095093516,47.5172349234732],[-122.332018935278,47.5172387947501],[-122.332334205237,47.5172394291564],[-122.337165564387,47.5172491511253],[-122.343991160096,47.5173174069844],[-122.347403958927,47.5173856628438],[-122.354980173778,47.5173174089375],[-122.354980371044,47.5173054616717],[-122.355125944994,47.5172988446666],[-122.35502832323,47.5336894180098],[-122.354113600824,47.533691454083],[-122.353830849337,47.5337183827961],[-122.35358849092,47.5337857045787],[-122.353198024581,47.5339472768568],[-122.352672914677,47.5341761709176],[-122.35239016319,47.5342704214132],[-122.352201662199,47.5343108144828],[-122.351918910712,47.5343108144828],[-122.351743874077,47.5342838857698],[-122.351569049722,47.5342356972194],[-122.35123222853,47.5341627065611],[-122.350868690904,47.5340819204221],[-122.350222401791,47.5340684560655],[-122.347165992862,47.5340684560655],[-122.3471603444,47.5355576138962],[-122.347078014786,47.5364141275888],[-122.34681023829,47.5378125159525],[-122.346453202964,47.5388241160453],[-122.346215179412,47.5391960278441],[-122.345902773501,47.5394489278673],[-122.345322591095,47.5396869514186],[-122.344117596867,47.5400737396893],[-122.343537414461,47.5402373808807],[-122.34315062619,47.5402968867686],[-122.342491736386,47.5403874564013],[-122.34072943933,47.5403718109864],[-122.337388242841,47.539904762015],[-122.33656192543,47.539689200951],[-122.335591900643,47.5393299325115],[-122.334981144296,47.5391143714477],[-122.334909290608,47.537821005065],[-122.334729656388,47.5359887360228],[-122.334621875856,47.5346594427962]]]]}
var industrialDistrict = {"name":"Industrial District","median":null,"type":"MultiPolygon","coordinates":[[[[-122.372915300748,47.5839518992346],[-122.370157466761,47.5832624402495],[-122.369851040979,47.5836454734531],[-122.369468009729,47.583722080875],[-122.368931763635,47.5851776043139],[-122.367629453087,47.5851776043139],[-122.36801248629,47.5841051121253],[-122.367323027305,47.5847945711103],[-122.366250535116,47.5849477840013],[-122.365637683554,47.5863267019712],[-122.3648716191,47.5850243914231],[-122.361577539019,47.5846413582196],[-122.361194507768,47.582343162905],[-122.361577539019,47.5811940652476],[-122.361194507768,47.5799683621216],[-122.361194507768,47.5765976765716],[-122.360811474565,47.5737632351627],[-122.357364181593,47.5736866296939],[-122.353227431589,47.5707755808629],[-122.350086564399,47.567481502735],[-122.348018189397,47.5628085066368],[-122.34863104096,47.5622569382769],[-122.349320499945,47.5610312351507],[-122.349856746039,47.5578903679604],[-122.347481943303,47.5558219929584],[-122.346945697208,47.555362354286],[-122.343728224549,47.5556687800677],[-122.340663964781,47.5507659636567],[-122.340357538999,47.5501531120938],[-122.342119488219,47.5477017038883],[-122.339821292905,47.5477017038883],[-122.337446492121,47.5441011980256],[-122.335454722588,47.5423392488053],[-122.33542408001,47.5422473210699],[-122.334742698412,47.5413286249814],[-122.334981144296,47.5391143714481],[-122.335591900643,47.5393299325119],[-122.33656192543,47.5396892009514],[-122.337388242841,47.5399047620153],[-122.34072943933,47.5403718109868],[-122.342491736386,47.5403874564017],[-122.342489529235,47.5403879245844],[-122.343658412345,47.5414856037882],[-122.344358335165,47.5437603529543],[-122.345177099962,47.5439991785641],[-122.34589816537,47.5444252796336],[-122.346213130639,47.5448802294669],[-122.346282398408,47.5453184057419],[-122.346157606648,47.5458888823594],[-122.345818886157,47.5467445972855],[-122.345301891722,47.5478320683373],[-122.345266236934,47.5481886162233],[-122.345337546511,47.5485273367149],[-122.345943677917,47.5488304024178],[-122.346407190168,47.5491512955151],[-122.346817220237,47.5496148077667],[-122.347138113334,47.550060492624],[-122.347352042066,47.5504705226928],[-122.347441179038,47.5511657910702],[-122.347403958927,47.554107373816],[-122.351575584725,47.5570760944227],[-122.352352590183,47.557762750409],[-122.353012141328,47.5578802047225],[-122.353409679004,47.5579976590359],[-122.353734937103,47.558142218191],[-122.354015020466,47.5583138821875],[-122.354240894145,47.55853072092],[-122.354412558142,47.5587836994412],[-122.354493872666,47.5590457129101],[-122.351548980416,47.5609579812445],[-122.353890818308,47.5671896531252],[-122.356351732373,47.5708016394568],[-122.359249261672,47.5713970222699],[-122.35940089673,47.5713932716583],[-122.361025219062,47.5713413979496],[-122.370698434988,47.5714562101401],[-122.370733103526,47.5719061695555],[-122.370817749956,47.5731260739939],[-122.37087776774,47.5738077627168],[-122.37105439523,47.5750321247334],[-122.371264105686,47.5760914857724],[-122.371418727318,47.5767793942599],[-122.371589126669,47.5771833038306],[-122.371888903303,47.5777039685114],[-122.372776686786,47.5792652248946],[-122.373757610028,47.58068677676],[-122.373956942025,47.581924733366],[-122.374366097174,47.5829528668185],[-122.374680391439,47.5833813400699],[-122.375741250746,47.584699836638],[-122.37709005758,47.585548524084],[-122.378257002818,47.5859122472753],[-122.378893518403,47.5862911255995],[-122.379636119918,47.5871701233113],[-122.380333256035,47.5879430350927],[-122.380954616487,47.5883219134167],[-122.381682062869,47.5888220328051],[-122.381859699194,47.5902312156465],[-122.38256244035,47.5917953800703],[-122.383049914038,47.5928804011958],[-122.383625822242,47.5942241902596],[-122.383958367072,47.5947507175904],[-122.382491113257,47.5942171707286],[-122.381495230444,47.5939873504158],[-122.381418623022,47.5927616472897],[-122.380729164036,47.5925318269769],[-122.380805771459,47.5918423699452],[-122.380039705051,47.5916891570542],[-122.380805771459,47.5909230906473],[-122.379197035129,47.5893143543178],[-122.37774151169,47.5882418640823],[-122.374983677703,47.5858670613458],[-122.372915300748,47.5839518992346]]],[[[-122.321000352138,47.5926516346109],[-122.32108313107,47.5920100978864],[-122.321124520536,47.5916375926915],[-122.321145215269,47.5911823085645],[-122.32108313107,47.5907684139036],[-122.320979657405,47.5903338245094],[-122.32081409954,47.5897750667172],[-122.32060715221,47.5890507510605],[-122.32040020488,47.5880367091411],[-122.320255341748,47.5868364146243],[-122.32013117335,47.5850152781161],[-122.320088728627,47.5845110418578],[-122.319938647843,47.583404196079],[-122.319713526668,47.5824661911818],[-122.319469645395,47.5814906660886],[-122.319225764122,47.5806277015832],[-122.319113203534,47.5801024188407],[-122.319108409336,47.5795770086639],[-122.319131963632,47.5791456538455],[-122.319188243926,47.5787704518866],[-122.319282044416,47.578263929242],[-122.319432125199,47.5776260859118],[-122.319606828611,47.5769595161817],[-122.319681575876,47.5764960831373],[-122.319741373689,47.5761970940762],[-122.319860969313,47.5749861883792],[-122.319935716579,47.5734314452619],[-122.320016386179,47.5721003968426],[-122.320025413297,47.5719514494102],[-122.320070261656,47.5709647855088],[-122.32015880643,47.5700966750302],[-122.320338131667,47.5687448386288],[-122.320627810895,47.5672550597372],[-122.32097266712,47.5654756016169],[-122.32126234635,47.5641099709663],[-122.321579614076,47.5626477805728],[-122.321731350815,47.5617235658903],[-122.321772733562,47.5610200591915],[-122.321745145064,47.5603441409907],[-122.321634791072,47.5595164860511],[-122.321427877337,47.5589371275931],[-122.320980740741,47.5580090232496],[-122.320393308663,47.5571162867259],[-122.318737998783,47.5546747046537],[-122.318075874832,47.553571164734],[-122.317565487619,47.5527021270474],[-122.323894802656,47.5534342644402],[-122.324737474531,47.5541237234253],[-122.334006859305,47.5542003288941],[-122.337147726496,47.5542003288941],[-122.338220218684,47.556268703896],[-122.339828955014,47.5561920984272],[-122.340211986264,47.5567283445215],[-122.342586789001,47.5568049499903],[-122.346646933536,47.5656913035144],[-122.345574441347,47.5699046609402],[-122.344655164003,47.5715900046919],[-122.343352853455,47.5738115925845],[-122.340595019468,47.5738115925845],[-122.342127148375,47.5750372976639],[-122.343046427673,47.5761327703212],[-122.343046427673,47.5791970300897],[-122.342280363219,47.5792736355584],[-122.340671624936,47.5781245398541],[-122.340518412046,47.578277752745],[-122.34105465814,47.5790438171989],[-122.342280363219,47.579656668762],[-122.34243357611,47.5805759461065],[-122.343276246033,47.5817250437637],[-122.342816607361,47.5824145027487],[-122.343352853455,47.5840998465004],[-122.343199640564,47.5846360906416],[-122.342510181579,47.5844828777506],[-122.342510181579,47.5850957312668],[-122.342893214783,47.5851723367357],[-122.343199640564,47.5855553699392],[-122.343199640564,47.5860150086116],[-122.342586789001,47.5860150086116],[-122.342586789001,47.5866278601745],[-122.343123033142,47.5871641062688],[-122.343429458923,47.5877769578319],[-122.342969820251,47.5882365965043],[-122.342893214783,47.5886962351765],[-122.343123033142,47.589768727365],[-122.342893214783,47.5899985457246],[-122.338833070248,47.5899985457246],[-122.338986283138,47.5903815789281],[-122.343429458923,47.5904581863501],[-122.343276246033,47.5913008562727],[-122.342586789001,47.5924499539303],[-122.335894518853,47.5924237504576],[-122.334509133785,47.5924183260054],[-122.334446177266,47.5924180795002],[-122.32906918225,47.5923970259651],[-122.328954761833,47.5923259557187],[-122.328696495821,47.5922452475902],[-122.328349450869,47.5921726102745],[-122.328034689167,47.5921483978358],[-122.327752210717,47.5921564686487],[-122.327413236577,47.5921645394615],[-122.327033908373,47.5921968227129],[-122.326606155291,47.5922452475902],[-122.326049269205,47.592366309783],[-122.325193763042,47.5925277260401],[-122.324330186067,47.592745637987],[-122.320792070295,47.5936763982842],[-122.320896878473,47.5932103924031],[-122.321000352138,47.5926516346109]]],[[[-122.346004396426,47.5891343289269],[-122.345573484316,47.5842219382973],[-122.345745849551,47.5778013562601],[-122.346004396426,47.5770257136813],[-122.345875122989,47.5741386062567],[-122.345875122989,47.5735353308655],[-122.345056390566,47.573362965631],[-122.345875122989,47.5711653171915],[-122.346349124942,47.5691400320332],[-122.35014114643,47.5691831238302],[-122.352726615182,47.5710791355508],[-122.35832846675,47.5773704441503],[-122.357811372999,47.5771980789157],[-122.357682099562,47.5777151726663],[-122.358069919875,47.5789217254018],[-122.357768281202,47.5790079070424],[-122.357854462843,47.5811193738413],[-122.358008603521,47.5815432607059],[-122.358102766823,47.5818022097862],[-122.358371556594,47.5825413816552],[-122.35789755464,47.583273932437],[-122.358242283156,47.583704844547],[-122.356863367139,47.5841357547035],[-122.357983736281,47.5841788465005],[-122.357165005811,47.5847390320479],[-122.35832846675,47.5847390320479],[-122.35832846675,47.5882294148636],[-122.357811372999,47.5867643152529],[-122.356992640577,47.5867643152529],[-122.356734093702,47.5885741453326],[-122.356044634717,47.5885310535359],[-122.355958453076,47.5869797722843],[-122.354622626903,47.5868935886905],[-122.354148624949,47.5887034187703],[-122.353760804636,47.5872814090033],[-122.353200619089,47.5878415945506],[-122.352424978463,47.5872814090033],[-122.349925691352,47.5878415945506],[-122.349968781196,47.5890050554893],[-122.349753326117,47.5891774207239],[-122.349494779242,47.5888326922079],[-122.345832031191,47.5902977898655],[-122.345832031191,47.5897806961149],[-122.346004396426,47.5891343289269]]]]}
var interbay = {"name":"Interbay","median":null,"type":"MultiPolygon","coordinates":[[[[-122.400273046732,47.6655479909905],[-122.398910424133,47.6650524918638],[-122.398500208414,47.6650859086997],[-122.397258760378,47.6646602217219],[-122.397196822987,47.6643918263616],[-122.394822556339,47.6633182449204],[-122.392241831721,47.663462765499],[-122.390074023041,47.6632975991236],[-122.387741047987,47.6626162878244],[-122.384521228023,47.6610163735294],[-122.382249266,47.659457480892],[-122.382352494984,47.6568148188831],[-122.382307533072,47.6557526988703],[-122.381274475429,47.655555925986],[-122.380192224565,47.6559002785337],[-122.377093051635,47.655998664976],[-122.377043858413,47.6575728480516],[-122.376168219076,47.6576072833033],[-122.37619640376,47.6540361404143],[-122.376275085633,47.6512350657553],[-122.376353767505,47.6500548376688],[-122.376385240254,47.6494253826893],[-122.37624988108,47.64286117366],[-122.376209346776,47.6408954728342],[-122.376215855112,47.6335319198724],[-122.376201417118,47.6332009717029],[-122.376160056912,47.633014850778],[-122.376070443134,47.6328149431181],[-122.375973935987,47.6326426089286],[-122.375829175268,47.6324633813713],[-122.375408679845,47.6320911395217],[-122.368813287248,47.6269749192828],[-122.365831979133,47.6246622398347],[-122.365106587676,47.6240995345216],[-122.361852369956,47.6214561767828],[-122.360808354714,47.6206787186243],[-122.359819872198,47.6200345390073],[-122.357332006091,47.618590688142],[-122.3594788542,47.618590688142],[-122.360741715443,47.618590688142],[-122.362369032889,47.6197422544323],[-122.363655829768,47.6206528523687],[-122.364064376692,47.6207187470339],[-122.364551997215,47.6209823256949],[-122.368769255791,47.6241716274931],[-122.372675500379,47.6256562861942],[-122.374040829011,47.6261484674507],[-122.375595943111,47.6263461514464],[-122.37688747855,47.6266888037057],[-122.377348741207,47.6266888037057],[-122.377585943629,47.6266493651493],[-122.377796824931,47.6266888037057],[-122.377954972127,47.6267415194379],[-122.378060403592,47.6268601298353],[-122.378099940391,47.6303920838927],[-122.378234334364,47.6321005981599],[-122.37892303946,47.6326417235921],[-122.379190857525,47.632236542763],[-122.379169005566,47.6260498319631],[-122.381087541189,47.6260498319631],[-122.381176088987,47.6329368829188],[-122.38176640764,47.6329368829188],[-122.381864794082,47.6261482184054],[-122.38398010259,47.6262466048476],[-122.38398010259,47.6330844625821],[-122.385603478887,47.6328384964766],[-122.385849444992,47.6314610862855],[-122.38829373101,47.6314182040746],[-122.388288630463,47.631453341176],[-122.388511217008,47.6314143885308],[-122.388855573932,47.631354126069],[-122.389081020854,47.6313333612208],[-122.389214638129,47.6313210543666],[-122.389479211748,47.631302156251],[-122.389711277091,47.6313027546248],[-122.389984736341,47.6312738090775],[-122.390178442026,47.6312360128463],[-122.390348525066,47.6311887675572],[-122.390529352539,47.6311365099455],[-122.390760901317,47.6311037696584],[-122.391061928931,47.6310612052768],[-122.39106665346,47.6323179299657],[-122.391312328963,47.6323179299657],[-122.391572178053,47.6323368280814],[-122.39167139316,47.6323510016679],[-122.391759591306,47.6323854376002],[-122.391869823374,47.6324691148906],[-122.391872239539,47.6340465191813],[-122.390790215845,47.6349611579938],[-122.390300963232,47.6354376474954],[-122.390102742228,47.6356306975169],[-122.390034906891,47.635720683168],[-122.389516895146,47.6364078416057],[-122.388697904837,47.6374420410472],[-122.388040321377,47.6382909215135],[-122.386175175563,47.6408256068498],[-122.384262205498,47.6434260505322],[-122.382426949842,47.6458232411452],[-122.382080224017,47.6463552859445],[-122.382044355829,47.6464688685421],[-122.382044355829,47.6484535749848],[-122.382041014148,47.6504563290425],[-122.38210027132,47.6506933577298],[-122.385221149037,47.6548808645398],[-122.385892730318,47.6554931886489],[-122.391660428377,47.6600362384899],[-122.392687552689,47.6607275721613],[-122.392332009658,47.6610238580204],[-122.393931953297,47.6618139536451],[-122.394623286969,47.6620904871136],[-122.395472639765,47.6624065253633],[-122.396163973437,47.6626238016602],[-122.399462622669,47.6635916688003],[-122.40013420395,47.6638286974876],[-122.400588508934,47.6641052309561],[-122.401003309137,47.6644015168154],[-122.401398356949,47.664776812237],[-122.40175389998,47.6652508696117],[-122.401922347145,47.6655713659524],[-122.402019620221,47.6659162432217],[-122.40210805029,47.6663230215393],[-122.400562087889,47.6658163863507],[-122.400273046732,47.6655479909905]]]]}
var internationalDistrict = {"name":"International District","median":null,"type":"MultiPolygon","coordinates":[[[[-122.320792070295,47.5936763982833],[-122.320648320216,47.5944222965801],[-122.320772678938,47.5938005029702],[-122.320792070295,47.5936763982833],[-122.324330186067,47.5927456379862],[-122.325193763042,47.5925277260392],[-122.326049269205,47.5923663097821],[-122.326606155292,47.5922452475893],[-122.327033908373,47.592196822712],[-122.327413236577,47.5921645394606],[-122.327752210717,47.5921564686478],[-122.328034689167,47.5921483978349],[-122.328349450869,47.5921726102736],[-122.328696495821,47.5922452475893],[-122.328954761833,47.5923259557179],[-122.32906918225,47.5923970259643],[-122.32906918225,47.5964298016641],[-122.329041029316,47.5985342334858],[-122.328998120123,47.6017416956478],[-122.324813564484,47.6017339723364],[-122.325459440243,47.6022833464522],[-122.32061279849,47.6043446228448],[-122.316749037671,47.6043446453075],[-122.316729441204,47.6016872608981],[-122.316759058983,47.6012874208851],[-122.316793613057,47.6010949053232],[-122.316847912319,47.6009714979116],[-122.316926893062,47.6008382179074],[-122.316146958222,47.600176754182],[-122.31600819531,47.6000726819988],[-122.315988996735,47.6000582830671],[-122.315682946354,47.5998805763946],[-122.315362087085,47.5997374237973],[-122.314917820403,47.5995646534211],[-122.31461670632,47.5994412460097],[-122.314355082607,47.5993425200806],[-122.314078650005,47.59920430378],[-122.313921949556,47.5990830116266],[-122.313742851706,47.5988773807612],[-122.312973394273,47.5977762606429],[-122.311500811947,47.5958061842868],[-122.307301185059,47.5903363476342],[-122.307885281901,47.5903510947833],[-122.308629822801,47.5904072865492],[-122.309163644578,47.590533718023],[-122.309585082823,47.590674197438],[-122.310048664893,47.5908849165607],[-122.310456055197,47.5911096836248],[-122.310751061969,47.5913204027473],[-122.310989876974,47.59153112187],[-122.311284883746,47.5919244642323],[-122.31169227405,47.5924582860096],[-122.312141808178,47.593076395436],[-122.312675629955,47.59376474457],[-122.312928492902,47.5940597513415],[-122.313265643499,47.5943407101718],[-122.313827561159,47.5946357169435],[-122.314529958235,47.5948464360662],[-122.31523235531,47.5949588195982],[-122.316178479338,47.5949694447114],[-122.316923489728,47.59482458158],[-122.320792070295,47.5936763982833]]]]}
var laurelhurst = {"name":"Laurelhurst","median":"1070400","type":"MultiPolygon","coordinates":[[[[-122.275109280945,47.6682331621219],[-122.274652325665,47.6682179302792],[-122.274164906699,47.6682636258073],[-122.26952692481,47.6650090099859],[-122.269122730075,47.6648347770317],[-122.266646053962,47.6645463874919],[-122.268922482319,47.6575312715337],[-122.271965463082,47.655440674063],[-122.273394648028,47.6544115713126],[-122.275380105618,47.6525138376039],[-122.27557175308,47.647720955785],[-122.277447474228,47.6478216077248],[-122.281558982587,47.6513523945645],[-122.282000330942,47.6530248725413],[-122.283751844282,47.6545868382929],[-122.284764657274,47.6545122753731],[-122.285485432164,47.6546303333292],[-122.286330478587,47.6548478085115],[-122.286492031579,47.654754604862],[-122.286585235229,47.6547918863219],[-122.286628730265,47.6548229542049],[-122.286628730265,47.6549037307013],[-122.286572808076,47.6549347985846],[-122.286529313039,47.6549534393144],[-122.286516885886,47.6550404293873],[-122.286554167346,47.6551460601901],[-122.28664213132,47.6552124162727],[-122.286697079608,47.6552392638397],[-122.286703293185,47.6552827588761],[-122.286666011725,47.6554008168322],[-122.286721933915,47.6555064476352],[-122.286858632601,47.6556555734743],[-122.286958049827,47.6557177092407],[-122.287231642345,47.6560189370084],[-122.287473776688,47.6561775139118],[-122.287517271724,47.6562955718679],[-122.287660183987,47.6566994543493],[-122.287660183987,47.6584268286545],[-122.290205486314,47.6584313484008],[-122.290191302205,47.6611452411902],[-122.288626136044,47.6611230159187],[-122.288230307033,47.6611318121189],[-122.287904847623,47.6611845893205],[-122.287482630011,47.6612813475232],[-122.287060412399,47.6614132905271],[-122.286726156789,47.6615452335308],[-122.28640949358,47.6616947689351],[-122.285943294967,47.6619938397438],[-122.285609039357,47.6622841143522],[-122.284966916738,47.6628382749683],[-122.284245628318,47.6635331747885],[-122.283559524698,47.664175297407],[-122.281810094273,47.6659073205637],[-122.281791488446,47.6659257412577],[-122.281661956142,47.6660502268488],[-122.280436873607,47.6672275788954],[-122.279961878793,47.6676234079067],[-122.279768362388,47.6677993319119],[-122.279460495379,47.6679840521172],[-122.279160951094,47.6681265392232],[-122.278810618712,47.6682331621219],[-122.278353663432,47.6683397850205],[-122.277972867366,47.6683854805485],[-122.277637766827,47.6684311760764],[-122.277211275233,47.6684311760764],[-122.276098441921,47.6683221528572],[-122.275505308854,47.6682788576499],[-122.275109280945,47.6682331621219]]]]}
var leschi = {"name":"Leschi","median":"624600","type":"MultiPolygon","coordinates":[[[[-122.284577363434,47.6079375516329],[-122.284496699535,47.6078284181215],[-122.284378076153,47.6076718352577],[-122.284230983159,47.607501017588],[-122.283894092755,47.6071925967955],[-122.28361888651,47.6069173905499],[-122.283509752999,47.6068035121035],[-122.283509752999,47.606547285599],[-122.282778877955,47.6064353637196],[-122.282942912077,47.6057004911356],[-122.283543769499,47.6036065946494],[-122.283784187936,47.6014412850586],[-122.284926211107,47.6000071164253],[-122.286775654268,47.5955496395637],[-122.286396970825,47.5945374955137],[-122.286732201237,47.59293454037],[-122.285905308595,47.5910867309401],[-122.285491556031,47.5903347474939],[-122.288467250336,47.5903347474939],[-122.291464861624,47.5903347474939],[-122.291617546045,47.5903347474939],[-122.297471216703,47.5903347474939],[-122.297440900319,47.5906985441146],[-122.297440900319,47.5911381316982],[-122.297503006542,47.591478839436],[-122.297590141763,47.5919232290644],[-122.297738271639,47.5925506026571],[-122.297834120382,47.5930037058076],[-122.297895115037,47.5934393819137],[-122.297886401515,47.5939273391527],[-122.297851547427,47.5945721397898],[-122.29778183925,47.5949032536305],[-122.297712131072,47.5951036646393],[-122.297616282329,47.5952866486039],[-122.297555287674,47.5954957731349],[-122.297511720064,47.5958268869756],[-122.297389730754,47.5992774417364],[-122.297354876665,47.5995388474001],[-122.297311309055,47.5998263936302],[-122.297259027922,47.600026804639],[-122.297163179179,47.6002882103027],[-122.297023762825,47.6005583294886],[-122.296919200559,47.6008807298071],[-122.296865854934,47.60103721031],[-122.296788497727,47.6012641247805],[-122.296736216595,47.601638806232],[-122.296718789551,47.6063092540898],[-122.296683935462,47.606535805665],[-122.296649081374,47.6067187896295],[-122.296500951497,47.6071021846031],[-122.296405102754,47.6073113091339],[-122.296326681055,47.6075640012756],[-122.296291826967,47.607729558196],[-122.296279076229,47.6079812953496],[-122.286133702203,47.6079138269564],[-122.286100487656,47.6091617449321],[-122.284719711492,47.6091617449321],[-122.284719711492,47.6084879641239],[-122.284700731751,47.6082222477489],[-122.284677007075,47.6081178591729],[-122.284648537464,47.6080371952734],[-122.284577363434,47.6079375516329]]]]}
var lowerQueenAnne = {"name":"Lower Queen Anne","median":"449200","type":"MultiPolygon","coordinates":[[[[-122.343588335525,47.62800835043],[-122.343717798665,47.6245701922008],[-122.343737305971,47.623741135238],[-122.350405754552,47.6185682653187],[-122.357332006091,47.618590688142],[-122.359819872198,47.6200345390075],[-122.360808354714,47.6206787186246],[-122.361852369956,47.6214561767831],[-122.365106587676,47.6240995345217],[-122.365831979133,47.6246622398351],[-122.368813287248,47.6269749192828],[-122.367858644803,47.6266229851682],[-122.366859999684,47.6261008509181],[-122.366297311318,47.6259031496002],[-122.365841077507,47.6257612101924],[-122.365232765759,47.625533093287],[-122.364761324155,47.6253607382918],[-122.364517999456,47.6252035910904],[-122.364497994021,47.6259725771304],[-122.364391267842,47.6267345089886],[-122.36428988255,47.6270082492751],[-122.364107389026,47.6269068639838],[-122.363904618443,47.6268358942799],[-122.363595393305,47.6267801323696],[-122.363222497562,47.626769753211],[-122.363222497562,47.6283935060271],[-122.363132999375,47.6296848370067],[-122.36312021392,47.632318640787],[-122.35863251913,47.632318640787],[-122.35656127538,47.6323186407872],[-122.356625202656,47.6280866551012],[-122.343588335525,47.62800835043]]]]}
var loyalHeights = {"name":"Loyal Heights","median":"522500","type":"MultiPolygon","coordinates":[[[[-122.376809524487,47.6905388491855],[-122.37666945305,47.6759896300662],[-122.393000803496,47.6759322346303],[-122.393015550603,47.6759321828024],[-122.393034596104,47.690517966977],[-122.387551975116,47.6905158630688],[-122.376809524487,47.6905388491855]]]]}
var madisonPark = {"name":"Madison Park","median":"988600","type":"MultiPolygon","coordinates":[[[[-122.276577253783,47.6308533053477],[-122.278891727509,47.6285388335257],[-122.282771703946,47.6285530281926],[-122.282770908433,47.6275081225704],[-122.282776106886,47.6274170695394],[-122.282781647852,47.6273819344055],[-122.282793718648,47.6273510254317],[-122.282807601446,47.6273237625567],[-122.282819235815,47.6273112332353],[-122.282834449992,47.6272942291565],[-122.282862193489,47.6272709604168],[-122.282901571356,47.6272485866286],[-122.283071103901,47.6271793107515],[-122.283295653867,47.6270956548817],[-122.283788783205,47.6269283431421],[-122.283868036134,47.6268975225586],[-122.283956094945,47.6268490902128],[-122.284026541993,47.6268006578672],[-122.284074974339,47.6267390167],[-122.284185047852,47.6265628990792],[-122.284286315483,47.6264043932206],[-122.284405194877,47.6262194697189],[-122.284590118379,47.6260169344552],[-122.285237350635,47.6252772404485],[-122.285489960859,47.6250003759557],[-122.285582010351,47.6248990885811],[-122.285600119095,47.6248538167209],[-122.285616003519,47.6247841111106],[-122.285629212341,47.6244318758692],[-122.285633615282,47.6242821758917],[-122.285633318459,47.6239845970064],[-122.285624264087,47.6238668901701],[-122.285615209715,47.6237884189459],[-122.285600119095,47.6237250383417],[-122.285572955979,47.6236646758616],[-122.285522000299,47.6235766784772],[-122.285462232065,47.6235141086071],[-122.285104664187,47.6232082121185],[-122.284968367983,47.6231017237844],[-122.284798758096,47.6229637078962],[-122.284700191892,47.6228556231644],[-122.284642953665,47.6227851761162],[-122.284612133082,47.6227279378896],[-122.28459892426,47.6226618937818],[-122.284616536022,47.6225826408524],[-122.284634147784,47.6225165967446],[-122.285268171219,47.6225121938042],[-122.285439885899,47.6225386114472],[-122.285571974114,47.6225826408524],[-122.285752494675,47.6226706996628],[-122.285955029939,47.6227895790568],[-122.286373309288,47.6230141290231],[-122.286765170994,47.6232474848704],[-122.287143823879,47.6234896465988],[-122.287628147335,47.6237538230297],[-122.287799862016,47.6238462847805],[-122.287914338469,47.6238903141858],[-122.288055232566,47.6239387465315],[-122.288235753127,47.6239827759367],[-122.288491123677,47.6240312082823],[-122.289428950007,47.6242249376651],[-122.289666708794,47.6242557582487],[-122.290203867538,47.6242601611893],[-122.29030953811,47.6242469523677],[-122.290384388099,47.6242513553081],[-122.290498864552,47.6242733700107],[-122.290573714541,47.6243085935349],[-122.290639758649,47.624361428821],[-122.290679385113,47.6244186670478],[-122.290714608637,47.6244847111554],[-122.290767443924,47.6246652317168],[-122.290785055686,47.6247224699434],[-122.290815876269,47.6247797081701],[-122.290859905674,47.6248325434564],[-122.290925949782,47.6248721699209],[-122.291005070459,47.6249077960276],[-122.291097664462,47.6249382140289],[-122.291339826191,47.6249778404935],[-122.291665643789,47.6250482875417],[-122.291898999636,47.6251363463521],[-122.2921015349,47.6252376139839],[-122.292238026056,47.625356493378],[-122.292326084866,47.6254753727718],[-122.292405337796,47.625611863928],[-122.292453770141,47.6257263403813],[-122.292506851247,47.6259564754914],[-122.28533678327,47.6308313535182],[-122.285348155503,47.6367221700575],[-122.285348155503,47.6412824353708],[-122.285137150452,47.6435104362294],[-122.284445681894,47.6434726805075],[-122.283541740118,47.6432346139529],[-122.283359661993,47.6427338991087],[-122.27680485144,47.6420511061392],[-122.276122060424,47.6412772741073],[-122.276122060424,47.6402758463719],[-122.276031021361,47.638546104183],[-122.275439267454,47.6381364284013],[-122.275939982298,47.6370439596503],[-122.276122060424,47.6361790885558],[-122.276349656127,47.6348590241014],[-122.276395175658,47.6337665553503],[-122.276304136595,47.6319457740987],[-122.276577253783,47.6308533053477]]]]}
var madisonValley = {"name":"Madison Valley","median":"571800","type":"MultiPolygon","coordinates":[[[[-122.291176635969,47.622443015407],[-122.291266098071,47.6188626137865],[-122.296075246789,47.6189072486359],[-122.29609926431,47.618907471548],[-122.302539519469,47.6189322954984],[-122.302942726602,47.6189338496595],[-122.302548637715,47.6191989879251],[-122.296028130292,47.6235627988355],[-122.292506851247,47.6259564754914],[-122.292453770141,47.6257263403813],[-122.292405337796,47.625611863928],[-122.292326084866,47.6254753727718],[-122.292238026056,47.625356493378],[-122.2921015349,47.6252376139839],[-122.291898999636,47.6251363463521],[-122.291665643789,47.6250482875417],[-122.291339826191,47.6249778404935],[-122.291097664462,47.6249382140289],[-122.291176635969,47.622443015407]]]]}
var madrona = {"name":"Madrona","median":"695800","type":"MultiPolygon","coordinates":[[[[-122.290993868773,47.6183536633603],[-122.290867617505,47.6183378819516],[-122.289936514399,47.6183378819516],[-122.287322499805,47.6183564538851],[-122.286159406606,47.6183593433302],[-122.285849338333,47.6183534929855],[-122.285568521784,47.6183359419512],[-122.285433963855,47.6183183909168],[-122.285322807304,47.6182949895378],[-122.285211650754,47.6182540371243],[-122.285071242479,47.618189683332],[-122.284965936273,47.6181311798842],[-122.284860630067,47.6180492750574],[-122.284784575585,47.6179790709202],[-122.284720221793,47.617908866783],[-122.284685119724,47.6178620640248],[-122.284655868001,47.6178211116115],[-122.284638316966,47.6177684585086],[-122.284620765932,47.6177099550608],[-122.284603214898,47.6176221998894],[-122.284604607903,47.6164522318883],[-122.282546401944,47.6164522318883],[-122.282384577396,47.6164471748713],[-122.282242980918,47.6164168327686],[-122.282182198364,47.6163931149142],[-122.282121196905,47.6163612880664],[-122.282070804396,47.6163294612186],[-122.282025716362,47.6162896776586],[-122.281975323853,47.6162419373868],[-122.281929445858,47.6161892669991],[-122.281600739746,47.6161892669991],[-122.281545112558,47.6161336398109],[-122.281471398761,47.6160748464353],[-122.281399788353,47.6160085405023],[-122.281349395844,47.6159448868064],[-122.281309612284,47.615883885348],[-122.281285742148,47.6157990137536],[-122.281275133199,47.61570353321],[-122.281280437674,47.6155682691064],[-122.281304307809,47.615353437883],[-122.281337774857,47.6151576355108],[-122.280928156472,47.6151576355108],[-122.280666935512,47.6131201727828],[-122.280712455044,47.6118911454379],[-122.281804923795,47.6107986766871],[-122.282778877955,47.6064353637196],[-122.283509752999,47.606547285599],[-122.283509752999,47.6068035121035],[-122.28361888651,47.6069173905499],[-122.283894092756,47.6071925967955],[-122.28423098316,47.607501017588],[-122.284378076153,47.6076718352577],[-122.284496699535,47.6078284181215],[-122.284577363434,47.6079375516329],[-122.284648537464,47.6080371952734],[-122.284677007075,47.6081178591729],[-122.284700731751,47.6082222477489],[-122.284719711492,47.6084879641239],[-122.284719711492,47.6091617449321],[-122.286100487656,47.6091617449321],[-122.286133702203,47.6079138269564],[-122.296279076229,47.6079812953496],[-122.296214636759,47.6129173586965],[-122.296200662948,47.6139877526523],[-122.296075246789,47.6189072486359],[-122.291266098071,47.6188626137865],[-122.291266098071,47.6186022205451],[-122.291242425958,47.618511477446],[-122.291199027084,47.6184483518117],[-122.291151682859,47.6184088982902],[-122.291088557224,47.6183773354731],[-122.290993868773,47.6183536633603]]]]}
var magnolia = {"name":"Magnolia","median":"662000","type":"MultiPolygon","coordinates":[[[[-122.408749148474,47.6715846106463],[-122.408623347812,47.6714396951493],[-122.408324684143,47.6708417980665],[-122.408165510018,47.6702316305903],[-122.408077079949,47.6700547704522],[-122.407870829465,47.6698485115136],[-122.40773220268,47.6695595620657],[-122.407696830652,47.6693208008791],[-122.407758731701,47.6689317085755],[-122.408024021908,47.6682242680233],[-122.407741045687,47.6671454211812],[-122.407316581356,47.6668270729326],[-122.406839058983,47.6666325267808],[-122.40444250565,47.6664748664152],[-122.40210805029,47.6663230215393],[-122.402019620221,47.6659162432218],[-122.401922347145,47.6655713659525],[-122.40175389998,47.6652508696117],[-122.401398356949,47.664776812237],[-122.401003309137,47.6644015168154],[-122.400588508934,47.6641052309561],[-122.40013420395,47.6638286974875],[-122.399462622669,47.6635916688003],[-122.396163973437,47.6626238016601],[-122.395472639765,47.6624065253634],[-122.394623286969,47.6620904871136],[-122.393931953297,47.6618139536449],[-122.392332009658,47.6610238580205],[-122.392687552689,47.6607275721613],[-122.391660428377,47.66003623849],[-122.385892730318,47.6554931886489],[-122.385221149037,47.6548808645398],[-122.38210027132,47.6506933577299],[-122.382041014148,47.6504563290425],[-122.382044355829,47.6484535749848],[-122.382044355829,47.6464688685419],[-122.382080224017,47.6463552859445],[-122.382426949842,47.6458232411452],[-122.384262205498,47.6434260505321],[-122.386175175563,47.6408256068498],[-122.388040321377,47.6382909215135],[-122.388697904837,47.6374420410472],[-122.389516895146,47.6364078416057],[-122.390034906891,47.635720683168],[-122.390102742228,47.6356306975169],[-122.390300963232,47.6354376474952],[-122.390790215845,47.6349611579939],[-122.391872239539,47.6340465191814],[-122.391869823374,47.6324691148906],[-122.391759591306,47.6323854376003],[-122.39167139316,47.6323510016678],[-122.391572178053,47.6323368280814],[-122.391312328963,47.6323179299658],[-122.39106665346,47.6323179299658],[-122.391061928931,47.6310612052769],[-122.390760901317,47.6311037696582],[-122.390529352539,47.6311365099455],[-122.390348525066,47.6311887675572],[-122.390178442026,47.6312360128463],[-122.389984736341,47.6312738090775],[-122.389711277091,47.6313027546248],[-122.389479211748,47.631302156251],[-122.389214638129,47.6313210543665],[-122.389081020854,47.6313333612209],[-122.388855573932,47.631354126069],[-122.388511217008,47.6314143885307],[-122.388288630463,47.6314533411759],[-122.38829373101,47.6314182040746],[-122.388331151223,47.6311604203839],[-122.388548479553,47.6309336429963],[-122.388945339981,47.6306785184353],[-122.389261883418,47.6305604052127],[-122.389521732508,47.6305084353947],[-122.389805204242,47.6304659146344],[-122.38994221558,47.6304422919902],[-122.390107574092,47.6303903221719],[-122.390433566587,47.6302533108338],[-122.390598925098,47.6301351976111],[-122.390839876072,47.6300501560908],[-122.391198940269,47.629979288157],[-122.391685566747,47.6299745636284],[-122.391992661125,47.6299934617438],[-122.392384797025,47.6300643296777],[-122.392843076329,47.6301824429002],[-122.39292339332,47.6301777183713],[-122.393480887731,47.6303052806519],[-122.393674135779,47.6303505494557],[-122.393736012292,47.6303289032963],[-122.393816329283,47.6303383523541],[-122.393981687795,47.6303666995276],[-122.394236812356,47.6303761485855],[-122.394855725643,47.6304092202874],[-122.395214789839,47.6305509561549],[-122.395361250236,47.6306596203195],[-122.395569129507,47.6309761637564],[-122.395630548383,47.6312738090775],[-122.395637718107,47.6314380348831],[-122.396155616597,47.6314932244214],[-122.396757070857,47.6315816735773],[-122.397455819189,47.631847021045],[-122.397721166656,47.6319177803696],[-122.398039583617,47.6319266252852],[-122.398747176864,47.6320681439345],[-122.400126983696,47.6325988388699],[-122.404434457588,47.6341909236759],[-122.406754665925,47.6351654881987],[-122.410900090883,47.6375431466839],[-122.414349607962,47.6398870493148],[-122.415441747325,47.6404937300887],[-122.416401628379,47.6416118078546],[-122.417427638587,47.6431242884201],[-122.417790280126,47.6442210579528],[-122.417878729282,47.6448313571287],[-122.417604536899,47.6481393555587],[-122.417595691983,47.6485019970979],[-122.417604536899,47.6486965852408],[-122.417719520801,47.6489884674551],[-122.417869884367,47.6492184352606],[-122.418259060652,47.6497402852803],[-122.418497873373,47.6500675471571],[-122.418740113846,47.6502730667229],[-122.418807445419,47.6504478785274],[-122.418851669997,47.6506424666703],[-122.418939799924,47.6507752642038],[-122.418984343731,47.6508901243068],[-122.418975498815,47.6511289370277],[-122.419161242042,47.6514915785665],[-122.419302760692,47.6515800277226],[-122.41942658951,47.6516861667098],[-122.419494313452,47.6517632212125],[-122.419576953075,47.6519515141774],[-122.419659467822,47.6520698999706],[-122.419983819192,47.6522345514762],[-122.420128342846,47.6523984848059],[-122.42149102627,47.6538389837031],[-122.423805724015,47.655530493594],[-122.425230153397,47.6570439498123],[-122.426906825482,47.6582903255214],[-122.429829873276,47.6595367012306],[-122.435484867579,47.6615659587151],[-122.436017238403,47.6618365611699],[-122.436150778658,47.6619552636184],[-122.436135940852,47.6620739660668],[-122.434088323616,47.6626229648912],[-122.433094190609,47.6627416673396],[-122.431936841737,47.6629197210124],[-122.431476869749,47.6630235856548],[-122.430809168476,47.6631868015216],[-122.430037602561,47.663320341776],[-122.428598335373,47.6639138540185],[-122.428390606088,47.6642106101397],[-122.427589364561,47.6643589882003],[-122.426743609615,47.6646409065155],[-122.425361440189,47.6651486041029],[-122.422668041339,47.6675787285193],[-122.422022501835,47.6678174897058],[-122.421430020373,47.6680739369058],[-122.420828695903,47.6683657561338],[-122.419926709199,47.668701790396],[-122.419139681585,47.6689582375962],[-122.418336293628,47.6693407084585],[-122.41795471866,47.6695684050726],[-122.417671742439,47.6698336952796],[-122.416690168673,47.6702935316385],[-122.415337188616,47.6707710540114],[-122.414276027788,47.6710275012116],[-122.412454368366,47.6713812214876],[-122.411490480614,47.6715669246325],[-122.411163646359,47.6715729515918],[-122.410906842158,47.6715403956118],[-122.410349732723,47.6716465116945],[-122.409960416885,47.6717072316881],[-122.409394687978,47.6716907267293],[-122.408943694626,47.6716465116945],[-122.408749148474,47.6715846106463]]]]}
var mapleLeaf = {"name":"Maple Leaf","median":"468500","type":"MultiPolygon","coordinates":[[[[-122.312210244251,47.7085174965368],[-122.312037617098,47.7003201063732],[-122.303348604901,47.7002591379896],[-122.304762800964,47.6985959306589],[-122.305232633544,47.6980039416092],[-122.305533326394,47.6975482040072],[-122.305641387887,47.6971065613827],[-122.305711862774,47.6966508237807],[-122.305721259426,47.6960494380793],[-122.305683672819,47.6953681808394],[-122.305500438113,47.6932539342328],[-122.305514533091,47.692953241382],[-122.305650784539,47.6924928054544],[-122.305763544358,47.6922719841421],[-122.305899795806,47.6920605594815],[-122.306068935534,47.6918726264498],[-122.306360231734,47.6916095202054],[-122.306698725393,47.6913387252781],[-122.307017997344,47.6910833077167],[-122.307759334425,47.6905878273949],[-122.308608175525,47.6900210952478],[-122.314098955722,47.6862186565554],[-122.314524711405,47.6858809882546],[-122.314803654785,47.6856607697974],[-122.31496514832,47.6854699138013],[-122.31619837168,47.6834439039959],[-122.316742816066,47.6831186515057],[-122.317328826426,47.6827685673941],[-122.318283106407,47.6824162178629],[-122.319369517462,47.6820198246401],[-122.32092023234,47.6815341417109],[-122.32116062758,47.6822400430973],[-122.32148361465,47.6827245237028],[-122.321835964181,47.683194323078],[-122.32211490756,47.6835466726093],[-122.322452575861,47.6838402972189],[-122.323526902312,47.6847635470375],[-122.324346454592,47.6853818264183],[-122.325183284729,47.6860278005591],[-122.326313739476,47.686893993157],[-122.327091844691,47.6875252860673],[-122.327620368988,47.6879950854424],[-122.327928674827,47.6883327537433],[-122.328134212054,47.6886116971223],[-122.328471880355,47.6890814964974],[-122.328794867425,47.6896247020248],[-122.328940880123,47.6899951896677],[-122.329061201053,47.6903004892246],[-122.329122116331,47.6904550538791],[-122.329177064827,47.6909312741774],[-122.329213697157,47.691608972294],[-122.329195380992,47.6921035087575],[-122.329158748662,47.6940267061157],[-122.329158748662,47.6953088376876],[-122.329268645653,47.6962979106146],[-122.329525071968,47.6983310049646],[-122.329689917456,47.699631452702],[-122.32990971144,47.7011516944231],[-122.329873079109,47.7021957158462],[-122.329796546722,47.7031766488403],[-122.323155249059,47.7031567050033],[-122.317819059062,47.70710906298],[-122.317800991998,47.7085363610537],[-122.312210244251,47.7085174965368]]]]}
var matthewsBeach = {"name":"Matthews Beach","median":"556700","type":"MultiPolygon","coordinates":[[[[-122.280035162328,47.7173162208911],[-122.279907195592,47.7172175036945],[-122.279724385969,47.7171297550753],[-122.279483077266,47.7169835073769],[-122.279351454338,47.716873821603],[-122.279281986681,47.7167897291763],[-122.279256393334,47.7167531672518],[-122.279241768564,47.7167166053271],[-122.279249080949,47.7158939620232],[-122.279230799987,47.7158244943664],[-122.279197894255,47.715758682902],[-122.27913208279,47.7156819028603],[-122.279077239903,47.7156489971281],[-122.278996803669,47.7156270599734],[-122.27889443028,47.7156270599734],[-122.278762807351,47.7156636218979],[-122.278634840615,47.7157294333623],[-122.278452030992,47.7158025572115],[-122.278376164214,47.7158129075319],[-122.278283846139,47.715813525789],[-122.278148567018,47.7157915886341],[-122.278038881244,47.7157915886341],[-122.27746812676,47.7158691669136],[-122.277400779328,47.7158652389655],[-122.271699331904,47.6946052841023],[-122.270785519403,47.6936914716014],[-122.267602929556,47.6919583778499],[-122.266500957327,47.6900786339109],[-122.2672170092,47.6900292510232],[-122.267550343694,47.690374931238],[-122.267902196769,47.6907206114529],[-122.268241704123,47.691029254502],[-122.268568865755,47.6912761689413],[-122.270315785413,47.6924119753618],[-122.270655292767,47.6925971611911],[-122.270945417233,47.6927267912716],[-122.271062701592,47.6926835812448],[-122.271260233143,47.6927267912716],[-122.271735543439,47.6928811127963],[-122.271821963492,47.6928872856573],[-122.27187134638,47.6928440756304],[-122.271988630739,47.6927144455497],[-122.272142952263,47.6926835812448],[-122.272254063761,47.6926959269668],[-122.272365175259,47.6927267912716],[-122.27256270681,47.6927761741596],[-122.2727540655,47.6928008656035],[-122.27293925133,47.6928008656035],[-122.273112091437,47.6927700012987],[-122.273272585823,47.6927082726887],[-122.27356888315,47.6925292597203],[-122.273840489033,47.6924181482228],[-122.274142959221,47.6923996296399],[-122.274679998127,47.692307036725],[-122.275359012834,47.6921403694786],[-122.275741730215,47.6922453081152],[-122.275951607489,47.6922823452811],[-122.276204694789,47.692307036725],[-122.276439263506,47.6922885181421],[-122.276698523667,47.6922514809762],[-122.276970129551,47.6921650609225],[-122.277371365514,47.691967529371],[-122.277889885837,47.6917082692099],[-122.278204701746,47.6915724662683],[-122.278321986105,47.6915601205463],[-122.278433097603,47.6915662934073],[-122.278550381962,47.6915848119902],[-122.278655320598,47.6916218491561],[-122.278747913513,47.6916897506268],[-122.278865197872,47.6918132078466],[-122.279124458033,47.6921403694786],[-122.279927562833,47.6930131667003],[-122.280013739455,47.6945183850297],[-122.279964906036,47.6959058286423],[-122.280016612009,47.697385193985],[-122.290531396287,47.6973791179685],[-122.290784908086,47.704149686963],[-122.290809287319,47.7063305914306],[-122.290655583723,47.7125106965151],[-122.290657586909,47.712754773996],[-122.290723543609,47.7129988137855],[-122.290763117629,47.7131241315151],[-122.290829074328,47.7132824275947],[-122.291139070818,47.7137177418137],[-122.291429280297,47.7141596517026],[-122.291515024007,47.7143839044822],[-122.291561193697,47.7146477312817],[-122.291541406687,47.7155051683797],[-122.29007716795,47.7155315510596],[-122.283976173214,47.7155579337394],[-122.283811281465,47.7155711250796],[-122.283107943202,47.7159924684703],[-122.283883474071,47.717338344911],[-122.283584390417,47.7173696443631],[-122.283400071421,47.717376599797],[-122.283201841558,47.717376599797],[-122.283125331786,47.7173696443631],[-122.283045344297,47.717338344911],[-122.282888847037,47.7172896568743],[-122.282801904114,47.7172618351391],[-122.28273930521,47.7172479242715],[-122.282666273155,47.7172374911208],[-122.282586285667,47.7172374911208],[-122.282033328679,47.7172722682898],[-122.281723811875,47.717300090025],[-122.281452549957,47.7173592112124],[-122.281216112494,47.7174222504725],[-122.280561654043,47.7175758105557],[-122.280492186386,47.717594091518],[-122.28042271873,47.717601403903],[-122.28036421965,47.7175977477105],[-122.280305720571,47.7175831229407],[-122.280261846261,47.7175684981709],[-122.280203347182,47.717513655284],[-122.280166785257,47.7174734371668],[-122.280108286178,47.7173966571251],[-122.280035162328,47.7173162208911]]]]}
var meadowbrook = {"name":"Meadowbrook","median":"439700","type":"MultiPolygon","coordinates":[[[[-122.290784908086,47.704149686963],[-122.290531396287,47.6973791179685],[-122.305533326394,47.6975482040074],[-122.305232633544,47.6980039416093],[-122.304762800964,47.6985959306591],[-122.303348604901,47.7002591379897],[-122.302034262631,47.701821174363],[-122.301901185972,47.702051034047],[-122.301828598703,47.7022446000968],[-122.3017197178,47.7025349491714],[-122.301671326288,47.7027890046117],[-122.301647130532,47.7030793536863],[-122.301622934775,47.7062006062387],[-122.30152615175,47.7075192749526],[-122.301364783721,47.7084164640437],[-122.301235802676,47.7089468245695],[-122.300945453601,47.7096243057438],[-122.300449440599,47.7105074508457],[-122.299009793104,47.7129875158581],[-122.297460365031,47.7156204895832],[-122.291541406687,47.7155051683797],[-122.291561193697,47.7146477312817],[-122.291515024007,47.7143839044822],[-122.291429280297,47.7141596517026],[-122.291139070818,47.7137177418137],[-122.290829074328,47.7132824275947],[-122.290763117629,47.7131241315151],[-122.290723543609,47.7129988137855],[-122.290657586909,47.712754773996],[-122.290655583723,47.7125106965151],[-122.290809287319,47.7063305914306],[-122.290784908086,47.704149686963]]]]}
var montlake = {"name":"Montlake","median":"829800","type":"MultiPolygon","coordinates":[[[[-122.298461040966,47.6353588402412],[-122.298426881108,47.6352541690083],[-122.298321597412,47.6350244591258],[-122.298211905456,47.6348452337321],[-122.298063173794,47.6345937530956],[-122.297996175078,47.6343544719679],[-122.297977032588,47.6340864771048],[-122.298013288345,47.633788806635],[-122.298534038252,47.6338423724798],[-122.298921201878,47.6338704224787],[-122.299176991748,47.6338929921731],[-122.299413973539,47.6339193234832],[-122.299523060395,47.6339531780247],[-122.299597062125,47.6339918602118],[-122.29986160581,47.6341713517371],[-122.300106110833,47.6343970486809],[-122.300325199161,47.6346354862109],[-122.300492477594,47.6348218821787],[-122.300613928956,47.6349123900359],[-122.300715492581,47.6349688142719],[-122.300815085999,47.6350106678383],[-122.300959997603,47.6350666162808],[-122.301097069643,47.6351038658223],[-122.301358728871,47.635175703137],[-122.301603233893,47.6352735051458],[-122.301599472278,47.6345738446202],[-122.301847738916,47.6346152223932],[-122.302208854026,47.6347243092494],[-122.302498498437,47.6348446809528],[-122.302743003459,47.6349575294247],[-122.302852090316,47.6350139536606],[-122.302923561015,47.6350703778966],[-122.303017601408,47.6351719415213],[-122.303085310491,47.6352659819145],[-122.303179350884,47.635371307155],[-122.303326053897,47.6355142485525],[-122.303484041758,47.6355970040986],[-122.30367588416,47.6356534283347],[-122.304943548661,47.6358452707368],[-122.306210458889,47.6359514910791],[-122.307520834612,47.6364902331475],[-122.308975769439,47.6372829383459],[-122.30990668694,47.6375178623643],[-122.310408552372,47.6378404901417],[-122.311297265534,47.6386485223316],[-122.310994236512,47.6387407374808],[-122.310663787557,47.6389346966501],[-122.310455461042,47.6392866966238],[-122.310512930425,47.6394591047743],[-122.31072125694,47.6395596761953],[-122.310645270368,47.6431630913731],[-122.309025487758,47.6433912095151],[-122.307902652543,47.6436382332624],[-122.30720649471,47.6438628003056],[-122.309099098339,47.6452613737937],[-122.309429708436,47.6454572263112],[-122.309564448661,47.6457267067628],[-122.30960936207,47.6460186439187],[-122.30960936207,47.6463554944834],[-122.309407251732,47.6467821718651],[-122.309123708068,47.6469841007878],[-122.300622679533,47.6470075888267],[-122.2996292474,47.6465388740211],[-122.299372594524,47.6463252990433],[-122.299205914049,47.6460038438427],[-122.298443946166,47.6441584528762],[-122.298205831203,47.6432298045191],[-122.29796771624,47.6419797009612],[-122.297812941513,47.64146775379],[-122.29770578978,47.6412058273301],[-122.297515297809,47.6409319951221],[-122.297086690875,47.6405748226771],[-122.296818911929,47.6404226413688],[-122.296598773292,47.6403939276336],[-122.296685781432,47.6401638618381],[-122.296836206578,47.6397917575306],[-122.296881729977,47.6395265342479],[-122.296962880385,47.6388179526415],[-122.296962880385,47.6386220040966],[-122.296947046159,47.6382439619547],[-122.296952983994,47.6381449980431],[-122.296968818219,47.6380539512446],[-122.296988611002,47.637988635063],[-122.297004445228,47.637937173829],[-122.297028196566,47.6378896711514],[-122.297044030792,47.6378580026997],[-122.297059865018,47.6378342513611],[-122.297085595635,47.6378124793005],[-122.297109346974,47.6377966450746],[-122.29715882893,47.6377689351795],[-122.29721424872,47.6377372667278],[-122.297283523458,47.6377036189978],[-122.297421900371,47.6376469802865],[-122.297902919873,47.6374277237117],[-122.298097402709,47.6373264305678],[-122.298252352996,47.6372414092827],[-122.298283782093,47.6372231115611],[-122.298310118311,47.6372008270694],[-122.298318473406,47.6371898741922],[-122.298324299351,47.6371785425778],[-122.298333333123,47.6371617612143],[-122.298340160561,47.6371440901996],[-122.298343775086,47.6371272224128],[-122.298345177261,47.6371103300602],[-122.298340739902,47.6370727055796],[-122.29832538628,47.6370150859635],[-122.298302454922,47.6369674218835],[-122.298253643973,47.6369111833127],[-122.298216313716,47.6368525669421],[-122.29818759998,47.6367185695105],[-122.29818759998,47.6365558583437],[-122.298225884961,47.6363548621963],[-122.298359882392,47.635809301225],[-122.298455594843,47.6354838788911],[-122.298467706011,47.6354210473298],[-122.298461040966,47.6353588402412]]]]}
var mountBaker = {"name":"Mt. Baker","median":"665200","type":"MultiPolygon","coordinates":[[[[-122.278939723464,47.5703396154045],[-122.278460777728,47.5703185628446],[-122.278302883529,47.5703869836642],[-122.278234462709,47.5704869833235],[-122.277581833354,47.5717501369144],[-122.277313413216,47.5717975051741],[-122.277118677037,47.5717448737744],[-122.27694663237,47.5716293334549],[-122.27673973096,47.5714343485167],[-122.276571310481,47.5712080334984],[-122.276408153142,47.5708606662608],[-122.276287100923,47.5706396143823],[-122.276139733004,47.5705290884432],[-122.275976575665,47.5704764570435],[-122.275881839146,47.5704448782039],[-122.275327876121,47.5702876155817],[-122.274782614821,47.5700370901195],[-122.27436016012,47.5697914769213],[-122.273490689398,47.5691627071337],[-122.273092796017,47.5688090241285],[-122.272866831875,47.5685928845139],[-122.272311746047,47.5682048156606],[-122.27184508097,47.5680181496301],[-122.271382297857,47.567892484197],[-122.271382297857,47.5677180541925],[-122.271382297857,47.5641259754188],[-122.274504972328,47.5641280886472],[-122.279730356173,47.5641211527891],[-122.288213714258,47.5641098924937],[-122.299193712116,47.5641292129997],[-122.299194579494,47.5665700558099],[-122.299194579494,47.5718969470165],[-122.299194579494,47.573705981551],[-122.299190956452,47.5747911195925],[-122.299194579494,47.5750938863743],[-122.296785386216,47.5750938863743],[-122.296785386216,47.5761544551539],[-122.296602183772,47.5763380997471],[-122.296412206884,47.576718053523],[-122.296338326983,47.5768974761393],[-122.296269724218,47.5770768987554],[-122.296222229996,47.5772668756435],[-122.296180426146,47.5775025088841],[-122.296139949757,47.5778781079719],[-122.296129220478,47.5783180083945],[-122.296140928525,47.5788849256353],[-122.29619359615,47.5794874997626],[-122.296290159657,47.5799488587422],[-122.296375993886,47.580227819986],[-122.296515474508,47.580560427623],[-122.296676413687,47.5808286595881],[-122.297513297418,47.5818801288912],[-122.297878092891,47.5824165928214],[-122.297996114955,47.5826419076723],[-122.298056563166,47.582834687782],[-122.298115809598,47.5831506687535],[-122.298135558409,47.5836246402113],[-122.298056563166,47.588305108355],[-122.297957819112,47.5887000845696],[-122.297819577437,47.5890555631627],[-122.297681335762,47.5893912929453],[-122.297543094087,47.5898652644028],[-122.297471216703,47.5903347474941],[-122.291617546045,47.5903347474941],[-122.291464861625,47.5903347474941],[-122.288467250336,47.5903347474941],[-122.285491556031,47.5903347474941],[-122.285182325617,47.5897727300665],[-122.285182325617,47.5876333128473],[-122.28709414526,47.5833089588934],[-122.283907779189,47.580850905067],[-122.280477876118,47.5734260610296],[-122.280497612893,47.5731080270246],[-122.280502876033,47.5728764488664],[-122.280492349753,47.5725975024484],[-122.280450244633,47.5722764509107],[-122.280355508114,47.5719132942533],[-122.280250245315,47.5716343478353],[-122.280123929956,47.5713922433971],[-122.279966035757,47.5711290863989],[-122.279692352479,47.570829087421],[-122.279402879781,47.5705501410031],[-122.279134459643,47.5703975099441],[-122.278939723464,47.5703396154045]]]]}
var northBeach = {"name":"North Beach","median":"635800","type":"MultiPolygon","coordinates":[[[[-122.398047902823,47.6997314782267],[-122.397441548992,47.6999577781491],[-122.395559999988,47.7006599991503],[-122.390439779868,47.7028720047441],[-122.389688113052,47.7016912935241],[-122.389324541761,47.7015629742452],[-122.387584915144,47.7015764678908],[-122.387551975116,47.6905158630688],[-122.393034596104,47.6905179669769],[-122.39832999999,47.6905199990419],[-122.403784832997,47.6904526577794],[-122.404171003356,47.690864526545],[-122.404751227575,47.6915221139933],[-122.40622112893,47.6930113561558],[-122.406279151352,47.6936109211822],[-122.406085743279,47.6939010332918],[-122.404751227575,47.6948487328496],[-122.404383752236,47.6951775265739],[-122.404171003356,47.695757750793],[-122.404016276898,47.6963379750121],[-122.402913850881,47.6974017194138],[-122.401159999993,47.6985699990491],[-122.398047902823,47.6997314782267]]]]}
var northCollegePark = {"name":"North College Park","median":"388200","type":"MultiPolygon","coordinates":[[[[-122.33402405806,47.7086651250152],[-122.332379664476,47.7086398266524],[-122.330001618371,47.7086398266525],[-122.32987632207,47.7070457531844],[-122.329776602885,47.7057693476276],[-122.329736715212,47.7046126050917],[-122.329796546722,47.7031766488403],[-122.329873079109,47.7021957158463],[-122.32990971144,47.7011516944232],[-122.329689917456,47.6996314527021],[-122.329525071968,47.6983310049647],[-122.329268645653,47.6962979106148],[-122.329158748662,47.6953088376877],[-122.329158748662,47.6940267061158],[-122.329195380992,47.6921035087576],[-122.329213697157,47.6916089722941],[-122.329177064827,47.6909312741774],[-122.329122116331,47.6904550538792],[-122.329061200895,47.6903004888255],[-122.329315893371,47.6903900597774],[-122.329750184748,47.690479472708],[-122.330414395088,47.6905177925353],[-122.334195284719,47.6905177925353],[-122.335038320921,47.6905177925353],[-122.34451609155,47.6905561123626],[-122.34466999994,47.7050842230703],[-122.344670323236,47.7051006146988],[-122.33895723881,47.7050727574942],[-122.338476569917,47.7051739509456],[-122.337894707572,47.7054269345737],[-122.337327075319,47.7058526587637],[-122.33672720181,47.7063579011157],[-122.336250313989,47.706818344529],[-122.335643153281,47.7074508035997],[-122.335288976201,47.7079314724934],[-122.334960097484,47.7083109479357],[-122.334580622042,47.7085639315639],[-122.33402405806,47.7086651250152]]]]}
var northDelridge = {"name":"North Delridge","median":"325500","type":"MultiPolygon","coordinates":[[[[-122.370698434988,47.5714562101401],[-122.361025219062,47.5713413979496],[-122.35940089673,47.5713932716583],[-122.359249261672,47.5713970222699],[-122.356351732373,47.5708016394568],[-122.353890818308,47.5671896531252],[-122.351548980416,47.5609579812445],[-122.354493872666,47.5590457129101],[-122.3596213842,47.5590395813167],[-122.360969947025,47.5590354709083],[-122.360969946058,47.556398535058],[-122.360969945768,47.5556077024753],[-122.360969945074,47.5537131500396],[-122.362963267848,47.5537161727473],[-122.376295379758,47.5537942045798],[-122.376160072986,47.5629113907092],[-122.376171447483,47.5640715893531],[-122.375722294763,47.5652607958035],[-122.375281480229,47.5654863288207],[-122.374491534159,47.5659520130956],[-122.374159671654,47.566196807585],[-122.374030072501,47.5663022791733],[-122.373907757363,47.5664357138697],[-122.373796561783,47.566591387682],[-122.373685366203,47.5667915397265],[-122.373557491285,47.567058409119],[-122.373446295705,47.5674753925449],[-122.373318420788,47.5679424139819],[-122.373168740745,47.5684591215452],[-122.37296307584,47.5693752652151],[-122.372812399851,47.5698321743061],[-122.372772868691,47.5699677097089],[-122.372722042916,47.5701314816537],[-122.372648627906,47.5702557224396],[-122.372563918279,47.5703912578424],[-122.372434030185,47.5705606770958],[-122.372315436707,47.5706962124986],[-122.372168606687,47.5708148059758],[-122.372025118811,47.5709266514706],[-122.371894122719,47.5710074788464],[-122.371721319364,47.5711078162784],[-122.371498347293,47.5712165151632],[-122.371384074106,47.5712666838793],[-122.371264226618,47.5713112782935],[-122.371124869074,47.5713586598587],[-122.370943704266,47.5714060414238],[-122.370698434988,47.5714562101401]]]]}
var northgate = {"name":"Northgate","median":"234300","type":"MultiPolygon","coordinates":[[[[-122.312287715024,47.7121962813796],[-122.312210244251,47.7085174965368],[-122.317800991998,47.7085363610537],[-122.317819059062,47.70710906298],[-122.323155249059,47.7031567050033],[-122.329796546722,47.7031766488403],[-122.329736715212,47.7046126050916],[-122.329776602885,47.7057693476275],[-122.32987632207,47.7070457531844],[-122.330001618371,47.7086398266524],[-122.329976320008,47.7088928102804],[-122.32990042492,47.709398777537],[-122.329698038017,47.7101324300588],[-122.329470352752,47.7106889940409],[-122.329267965849,47.7110937678461],[-122.328863192044,47.7116756301911],[-122.328445018474,47.7121634993555],[-122.32835521708,47.712268267649],[-122.312287715024,47.7121962813796]]]]}
var olympicHills = {"name":"Olympic Hills","median":"365200","type":"MultiPolygon","coordinates":[[[[-122.29472895723,47.7200900659856],[-122.295235921862,47.7192604874966],[-122.312655152479,47.7194278914336],[-122.312673771673,47.7212842230854],[-122.312620992552,47.7238702627085],[-122.312617399281,47.7266083474527],[-122.312623771673,47.7338842230971],[-122.31257999991,47.7338842230971],[-122.292432523155,47.7337511028635],[-122.292423971569,47.7337506085078],[-122.29223506315,47.7266972658848],[-122.292289043541,47.7261142776584],[-122.292375412167,47.7255096972755],[-122.292515761185,47.7249159129707],[-122.292753274907,47.7240522267094],[-122.293174321959,47.7229186384914],[-122.293681737638,47.7218930110561],[-122.29472895723,47.7200900659856]]]]}
var olympicManor = {"name":"Olympic Manor","median":"667800","type":"MultiPolygon","coordinates":[[[[-122.376809524487,47.6905388491915],[-122.387551975116,47.6905158630593],[-122.387584915144,47.7015764678909],[-122.385322325224,47.7015940179707],[-122.380761321627,47.7015868239587],[-122.37677541641,47.7015688834537],[-122.376809524487,47.6905388491915]]]]}
var phinneyRidge = {"name":"Phinney Ridge","median":"586600","type":"MultiPolygon","coordinates":[[[[-122.346665408906,47.6763391294178],[-122.346860705021,47.6759476143617],[-122.346662760375,47.6755966027898],[-122.346651189849,47.6753709775426],[-122.346587551959,47.675174278609],[-122.346390853025,47.674896585997],[-122.34604373726,47.6744974028672],[-122.345714817467,47.6742064353577],[-122.345465210985,47.6740577228982],[-122.345170162585,47.6738957355411],[-122.344724697353,47.6735544050389],[-122.344342870012,47.6731494366464],[-122.344088318451,47.6727676093048],[-122.343972613196,47.6725188430066],[-122.343868478466,47.6721775125042],[-122.343752773211,47.6717841146372],[-122.343694920584,47.6715527041272],[-122.343585000591,47.6713097230918],[-122.34343458376,47.6711072388954],[-122.34316267641,47.6708526873344],[-122.342989118528,47.6707196262912],[-122.342769278544,47.6705749947224],[-122.34250894172,47.6704592894675],[-122.342248604896,47.6703725105261],[-122.340817213971,47.6700508365615],[-122.340561598767,47.6699556073675],[-122.340393694661,47.6698578721421],[-122.340275911184,47.6697676550109],[-122.340158127708,47.6696373413771],[-122.340070416608,47.6695020156803],[-122.339969212249,47.6693611668869],[-122.340012777885,47.6692363763498],[-122.340035332168,47.6690383998674],[-122.340047538015,47.668797221369],[-122.340149361512,47.6650062542761],[-122.347233406151,47.6649843802794],[-122.353983957541,47.6650632445465],[-122.353970093439,47.6621309868331],[-122.354575547756,47.6621309868331],[-122.355097491133,47.662137946078],[-122.35541065716,47.6621657830582],[-122.355842130351,47.6622562532435],[-122.355922757158,47.6622912422353],[-122.356101926734,47.6623689950702],[-122.356210970338,47.6624163158792],[-122.356649402774,47.662632052475],[-122.357166561559,47.6629047272788],[-122.357581950377,47.6631850148455],[-122.357978973763,47.663512716688],[-122.359151138047,47.6645336339672],[-122.359459934014,47.6648424299341],[-122.359693106478,47.6650945082746],[-122.359793937815,47.6652205474449],[-122.360184659242,47.6658444413377],[-122.360455643458,47.6663107862675],[-122.360781646764,47.6668890126754],[-122.36075812146,47.6759920119892],[-122.366078869215,47.6759641734891],[-122.366040201904,47.6832533821716],[-122.344494186208,47.6832782047324],[-122.344475232722,47.6815702968614],[-122.344483874876,47.6814525730333],[-122.344508607872,47.6813283270224],[-122.34455032681,47.6812198577842],[-122.344642108473,47.6810613258207],[-122.344758921499,47.6809278252198],[-122.344875734525,47.6807943246189],[-122.345000891338,47.6806608240181],[-122.345126048151,47.6804689169043],[-122.345162516889,47.6804025120805],[-122.34520149295,47.6803199745384],[-122.345235883593,47.6802466078344],[-122.345288615912,47.6801205088116],[-122.345342986628,47.6798931955631],[-122.345526549954,47.6785999084922],[-122.345626675404,47.6779908120008],[-122.345674811835,47.6778308981301],[-122.345721796676,47.6777095206234],[-122.345788358535,47.6775646506959],[-122.3458627512,47.6774354423824],[-122.345956720883,47.6772984032617],[-122.346046775162,47.6771809411583],[-122.346281699369,47.6769225245311],[-122.346395246068,47.6767815700071],[-122.346481384944,47.6766523616935],[-122.34655577761,47.6765348995902],[-122.346665408906,47.6763391294178]]]]}
var pinehurst = {"name":"Pinehurst","median":"365100","type":"MultiPolygon","coordinates":[[[[-122.312331490917,47.7121964775066],[-122.32835521708,47.7122682676493],[-122.327952450982,47.7127381614299],[-122.325397316337,47.716001650234],[-122.324840752355,47.7169629880214],[-122.324638365452,47.7175448503663],[-122.324461276913,47.7180761159856],[-122.324360083461,47.718607381605],[-122.324360083461,47.71901215541],[-122.324334785099,47.721036024436],[-122.324309486736,47.7264498740803],[-122.324284188373,47.7295615727076],[-122.32425889001,47.7310288777513],[-122.324334785099,47.7319649171758],[-122.324410680187,47.7324455860694],[-122.324562470364,47.7332045369541],[-122.324799406523,47.7339842230968],[-122.324639999922,47.7339842230968],[-122.323439999921,47.7339742230969],[-122.31257999991,47.7338842230971],[-122.312623771673,47.7338842230971],[-122.312617399281,47.7266083474527],[-122.312620992552,47.7238702627085],[-122.312673771673,47.7212842230854],[-122.312655152479,47.7194278914336],[-122.312655064037,47.7194190738189],[-122.312613771673,47.7176142230819],[-122.312661271673,47.7154901703456],[-122.312339115423,47.7125585355772],[-122.312331490917,47.7121964775066]]]]};
var pioneerSquare = {"name":"Pioneer Square","median":null,"type":"MultiPolygon","coordinates":[[[[-122.334933332167,47.6032608330712],[-122.334320601264,47.6025929563871],[-122.333213882632,47.6030565735364],[-122.329041029316,47.5985342334857],[-122.32906918225,47.596429801664],[-122.32906918225,47.5923970259641],[-122.335894518853,47.5924237504566],[-122.335676920934,47.5928652315247],[-122.335509186489,47.5932957654603],[-122.335437914579,47.5935610553474],[-122.335391331631,47.5938933530131],[-122.335405611096,47.5948500771759],[-122.335405611096,47.5974061014316],[-122.335473550534,47.5982095676967],[-122.335491287887,47.6005475837572],[-122.33551314604,47.6007159631967],[-122.335548781995,47.6008426688144],[-122.335608175253,47.6009891721848],[-122.335667568511,47.6011435946564],[-122.335754678623,47.6013059362291],[-122.336289217948,47.6019315452165],[-122.336814416038,47.6025316832971],[-122.334933332167,47.6032608330712]]]]};
var portageBay = {"name":"Portage Bay","median":"778300","type":"MultiPolygon","coordinates":[[[[-122.315019072709,47.645652172496],[-122.312928669458,47.6431630913729],[-122.311560193976,47.6431630913729],[-122.310645270368,47.6431630913729],[-122.31072125694,47.6395596761951],[-122.310512930425,47.6394591047741],[-122.310455461042,47.6392866966236],[-122.310663787557,47.6389346966499],[-122.310994236512,47.6387407374806],[-122.311297265534,47.6386485223313],[-122.31235559366,47.6387168016286],[-122.313652900302,47.6393313153009],[-122.314241256678,47.6396458802703],[-122.314571705633,47.6398470231124],[-122.314772848475,47.6400337986088],[-122.314916521933,47.6402133904323],[-122.315081746411,47.6404073496013],[-122.315211052524,47.6406084924436],[-122.315361909655,47.6409245740526],[-122.315448113731,47.641204737297],[-122.315484032095,47.641413063812],[-122.315577419844,47.6415495535979],[-122.315693589926,47.6416482344841],[-122.315828848396,47.6417363290941],[-122.316029991238,47.6418225331694],[-122.316461011614,47.6419087372444],[-122.316805827915,47.6419805739739],[-122.317121909524,47.6420739617221],[-122.317310110753,47.6421720114514],[-122.317576796469,47.6423227921189],[-122.318232667158,47.6427719728094],[-122.322769932911,47.6423288006811],[-122.322741554608,47.642966944031],[-122.322650711287,47.6470809754816],[-122.322573216944,47.6487083566716],[-122.322521554049,47.6500774233871],[-122.322521554049,47.6525830737905],[-122.320661689832,47.6524022536583],[-122.315150491896,47.6469841007877],[-122.315019072709,47.645652172496]]]]};
var queenAnne = {"name":"Queen Anne","median":null, "type":"MultiPolygon","coordinates":[[[[-122.369477941005,47.6557871341226],[-122.36701827995,47.654262144268],[-122.366329574855,47.6544097239315],[-122.366329574855,47.6540161781626],[-122.365739256201,47.6543605307103],[-122.363673140915,47.6528847340773],[-122.362886049377,47.6535734391725],[-122.362049764618,47.6528355408561],[-122.360686496396,47.6523042978237],[-122.358899314339,47.6514348579042],[-122.355807972402,47.6499133380446],[-122.350277368468,47.6474982271562],[-122.349744212768,47.6473941024769],[-122.349092900679,47.6469762796278],[-122.348403565083,47.6466224370301],[-122.347315141085,47.6461720546859],[-122.347316967338,47.6449722020346],[-122.347316967338,47.6440471597909],[-122.34727427308,47.6435775229597],[-122.347188884565,47.64307942329],[-122.347075033212,47.6426667121351],[-122.346719247734,47.6415139671855],[-122.346363462256,47.6405604621037],[-122.345737279814,47.6393507914774],[-122.344285675063,47.6373726242186],[-122.344015278099,47.6369883759021],[-122.343773343974,47.6366183590046],[-122.343559872687,47.6362341106881],[-122.343460252753,47.6359494823055],[-122.343431789915,47.6324058589417],[-122.343588335525,47.62800835043],[-122.356625202656,47.6280866551012],[-122.35656127538,47.6323186407872],[-122.35863251913,47.6323186407869],[-122.36312021392,47.6323186407869],[-122.363132999376,47.6296848370067],[-122.363222497562,47.6283935060271],[-122.363222497562,47.626769753211],[-122.363595393305,47.6267801323694],[-122.363904618444,47.6268358942797],[-122.364107389026,47.6269068639838],[-122.36428988255,47.6270082492751],[-122.364391267842,47.6267345089885],[-122.364497994021,47.6259725771304],[-122.364517999456,47.6252035910904],[-122.364761324155,47.6253607382918],[-122.365232765759,47.625533093287],[-122.365841077507,47.6257612101924],[-122.366297311318,47.6259031496002],[-122.366859999684,47.6261008509181],[-122.367858644803,47.6266229851681],[-122.368813287248,47.6269749192828],[-122.375408679845,47.6320911395218],[-122.375829175268,47.6324633813712],[-122.375973935987,47.6326426089286],[-122.376070443134,47.6328149431182],[-122.376160056912,47.6330148507778],[-122.376201417118,47.6332009717029],[-122.376215855112,47.6335319198724],[-122.376209346776,47.6408954728343],[-122.37624988108,47.6428611736602],[-122.376385240254,47.6494253826897],[-122.376353767505,47.6500548376692],[-122.376275085632,47.6512350657557],[-122.37619640376,47.6540361404147],[-122.376168219076,47.6576072833034],[-122.37594999721,47.6576175417782],[-122.375901694992,47.6583420750447],[-122.375201312835,47.6589941549846],[-122.374428477351,47.6589458527665],[-122.3740179085,47.6587043416779],[-122.369317978537,47.6570059041396],[-122.367859375735,47.6561443241363],[-122.368690849468,47.6559839070068],[-122.369477941005,47.6557871341226]]]]};
var rainierBeach = {"name":"Rainier Beach","median":"296000","type":"MultiPolygon","coordinates":[[[[-122.270008647641,47.5316762458285],[-122.266410151921,47.531664356426],[-122.262854828514,47.5316658995879],[-122.262809659075,47.5312922967139],[-122.262820668459,47.5309289870606],[-122.262908743526,47.5306170545301],[-122.263022507155,47.5303601689169],[-122.263077554072,47.5300775947422],[-122.263066544689,47.5298720862514],[-122.262905073732,47.5296408891995],[-122.262714292187,47.5294955363402],[-122.262266496131,47.529333493869],[-122.261773720577,47.5292995093482],[-122.26151883667,47.5292400364365],[-122.26118748759,47.529044625441],[-122.260618246864,47.5286622995799],[-122.260176448091,47.5281780201562],[-122.259998029356,47.5276937407323],[-122.260034921372,47.5271762898172],[-122.259862091272,47.5264278173266],[-122.259743145449,47.5258925611214],[-122.259675176407,47.5252978320046],[-122.259794122231,47.524473707371],[-122.260074494529,47.5238789782542],[-122.260337874566,47.5235731175656],[-122.260677719776,47.5233607143094],[-122.261094030157,47.5234031949607],[-122.261408386976,47.5235391330446],[-122.26187567414,47.5238789782542],[-122.262054092875,47.523904466645],[-122.26223251161,47.523870482124],[-122.262524415959,47.5236724911514],[-122.26281710987,47.5234794377209],[-122.26296657059,47.5233237494704],[-122.263066211071,47.5231120134496],[-122.26308590901,47.5229922419472],[-122.263047528481,47.5225764458677],[-122.261260227365,47.5224518952675],[-122.259323465529,47.5210071083026],[-122.260331994002,47.5203955222212],[-122.255045962748,47.5180408366719],[-122.25163407212,47.514580889403],[-122.248758426887,47.5128442509477],[-122.248115513718,47.5129686857547],[-122.245957544215,47.5120630452867],[-122.244570188682,47.5118218092745],[-122.242589136333,47.5118218092745],[-122.239668499157,47.5114029582065],[-122.237981774586,47.5107803417543],[-122.236600698092,47.5100898035071],[-122.237166713048,47.5096030306444],[-122.243245713683,47.5096030306444],[-122.244479626289,47.5097501945331],[-122.244796594664,47.5099652802165],[-122.245158844237,47.5103048891905],[-122.245532414108,47.5105199748742],[-122.24603050727,47.5107350605577],[-122.246449358338,47.5108822244464],[-122.246732816285,47.5101787034508],[-122.247856355549,47.5097601025317],[-122.248364383332,47.5095259894292],[-122.24927439387,47.5086965737911],[-122.248737687752,47.5078046412663],[-122.247928861507,47.5063736409865],[-122.247619398054,47.5025547941015],[-122.245132535003,47.5025584658803],[-122.245132535003,47.4996953002827],[-122.248886463232,47.4996953002827],[-122.2499256863,47.5007981492536],[-122.250540736688,47.5023039622719],[-122.259533197529,47.5023039622719],[-122.259660449333,47.4945628108407],[-122.267550605847,47.4945918910149],[-122.270289492709,47.4967265749464],[-122.27030718363,47.5009890269599],[-122.27010640202,47.5060912129785],[-122.27010640202,47.5087861368782],[-122.273868495996,47.5087852011861],[-122.273884036367,47.5071627749707],[-122.274244328412,47.5070727019594],[-122.274672175216,47.5069601106955],[-122.275054985514,47.5069375924426],[-122.27550535057,47.5069601106955],[-122.275955715627,47.5071177384652],[-122.276406080683,47.5073654392461],[-122.276878963992,47.5076356582799],[-122.277126664773,47.5078158043025],[-122.277419402059,47.5079283955666],[-122.277712139346,47.507995950325],[-122.278365168678,47.5080635050834],[-122.27842435192,47.5098727501156],[-122.279015215836,47.5155182604641],[-122.279109070695,47.5160679817825],[-122.279202925554,47.5164568090564],[-122.279873317406,47.5192322313221],[-122.279967172265,47.51964787427],[-122.28003421145,47.5200098858699],[-122.280040185506,47.5203218073044],[-122.279933132839,47.5207341266961],[-122.278947050946,47.5238716599919],[-122.278846201661,47.5243422899863],[-122.278823790709,47.5247344816482],[-122.278834996185,47.525093056882],[-122.278913434518,47.5254180156875],[-122.279148749515,47.526090344251],[-122.279484913797,47.5267514673383],[-122.279854694506,47.5275022342339],[-122.280470995689,47.5287460420762],[-122.280571844974,47.5290037680254],[-122.280616666878,47.5292614939748],[-122.280661488782,47.5296648911127],[-122.280683899735,47.530124315631],[-122.280713330582,47.5315281560275],[-122.270008647641,47.531566732586],[-122.270008647641,47.5316762458285]]]]};
var ravenna = {"name":"Ravenna","median":"573300","type":"MultiPolygon","coordinates":[[[[-122.290292079968,47.6829519151501],[-122.290132781139,47.6627207666933],[-122.292876634378,47.6612429427892],[-122.293100437554,47.6615237140459],[-122.2934255599,47.6619269481415],[-122.293560251351,47.6620689799647],[-122.293808469418,47.6622887139918],[-122.294276421513,47.6626874905594],[-122.295476820364,47.6636640862351],[-122.295573590215,47.6637736784829],[-122.295607033121,47.6638512670729],[-122.295623309716,47.6639326500459],[-122.295647724608,47.6650069052891],[-122.295708761837,47.6651656020865],[-122.295823862483,47.6653483081691],[-122.296407831108,47.6657654286159],[-122.297064795811,47.666151265029],[-122.297440204213,47.6663076851965],[-122.29785732466,47.6663702532635],[-122.29875413362,47.6664119653082],[-122.300172343139,47.6663911092858],[-122.300612785104,47.6663389602319],[-122.300620894566,47.6685609527029],[-122.301175348287,47.6685131549683],[-122.30167581119,47.6684277201315],[-122.302246017542,47.6682837258425],[-122.302867388091,47.6681403326386],[-122.303925544301,47.6679200174134],[-122.303897844334,47.6698590150921],[-122.303914464314,47.6699531949794],[-122.303958784261,47.670008594913],[-122.304008644201,47.6700473748666],[-122.304084436902,47.6700929775765],[-122.30680592142,47.6707978866811],[-122.310682527253,47.6723956104523],[-122.311372829987,47.6723956104523],[-122.311891600379,47.6723943310159],[-122.312017168291,47.6800816207452],[-122.312010425352,47.6802367083388],[-122.312003682413,47.6803108806662],[-122.311727221921,47.680823344019],[-122.311693507226,47.680917745163],[-122.31167327841,47.6809986604291],[-122.311666535471,47.6811132903895],[-122.311686764288,47.6821112453397],[-122.311706993104,47.6822730758721],[-122.311760936615,47.6824011917103],[-122.311814880126,47.6824955928542],[-122.31190928127,47.6826304516312],[-122.311990196536,47.6827585674695],[-122.312050882985,47.6829001691852],[-122.312097399112,47.6830729433683],[-122.312098488461,47.683085754752],[-122.300699704977,47.6830050147592],[-122.290292079968,47.6829519151501]]]]};
var riverview = {"name":"Riverview","median":"325300","type":"MultiPolygon","coordinates":[[[[-122.347403958927,47.5541073738158],[-122.347441179038,47.55116579107],[-122.347352042066,47.5504705226926],[-122.347138113334,47.5500604926239],[-122.346817220237,47.5496148077665],[-122.346407190169,47.5491512955149],[-122.345943677917,47.5488304024176],[-122.345337546511,47.5485273367146],[-122.345266236934,47.5481886162231],[-122.345301891722,47.5478320683371],[-122.345818886157,47.5467445972853],[-122.346157606648,47.5458888823591],[-122.346282398408,47.5453184057417],[-122.346213130639,47.5448802294667],[-122.34589816537,47.5444252796334],[-122.345177099962,47.5439991785639],[-122.344358335165,47.5437603529542],[-122.343658412345,47.541485603788],[-122.342489529235,47.5403879245841],[-122.342491736386,47.5403874564015],[-122.34315062619,47.5402968867688],[-122.343537414461,47.540237380881],[-122.344117596867,47.5400737396895],[-122.345322591095,47.5396869514188],[-122.345902773501,47.5394489278675],[-122.346215179412,47.5391960278443],[-122.346453202964,47.5388241160455],[-122.34681023829,47.5378125159527],[-122.347078014786,47.5364141275891],[-122.3471603444,47.5355576138964],[-122.347165992862,47.5340684560657],[-122.350222401791,47.5340684560657],[-122.350868690904,47.5340819204223],[-122.35123222853,47.5341627065613],[-122.351569049722,47.5342356972196],[-122.351743874077,47.53428388577],[-122.351918910712,47.534310814483],[-122.352201662199,47.534310814483],[-122.35239016319,47.5342704214136],[-122.352672914677,47.5341761709179],[-122.353198024581,47.533947276857],[-122.35358849092,47.533785704579],[-122.353830849337,47.5337183827963],[-122.354113600824,47.5336914540832],[-122.35502832323,47.5336894180101],[-122.355025885498,47.5345419775205],[-122.356115850637,47.5345419775205],[-122.356438803271,47.53457225433],[-122.356691110017,47.5346126234091],[-122.357094800809,47.5347539151865],[-122.357417753443,47.5349860373922],[-122.35758932203,47.535208067328],[-122.357629691109,47.5353897281844],[-122.357639783379,47.5359649875636],[-122.357710429267,47.5367723691483],[-122.357841628775,47.5371054140522],[-122.35808384325,47.5373980898765],[-122.358366426805,47.5375999352727],[-122.358679287169,47.5377513193199],[-122.359284823358,47.5378421497481],[-122.360132574022,47.5379329801764],[-122.361091339653,47.5379531647163],[-122.360814222796,47.5401166778362],[-122.360798431337,47.5404325070186],[-122.360830014255,47.540732544742],[-122.361177426356,47.5419011127172],[-122.361240592193,47.5422958991954],[-122.361240592193,47.5428643917238],[-122.361240592193,47.5438908365668],[-122.361256383652,47.5442382486676],[-122.361396812421,47.5446115845157],[-122.361872250558,47.5452804849698],[-122.362345994332,47.5458489774982],[-122.36272498935,47.5464174700268],[-122.362867112482,47.5467332992094],[-122.362961861237,47.5472228344423],[-122.362990292641,47.5477715368158],[-122.362990292641,47.5490949356425],[-122.362963267848,47.5537161727473],[-122.360969945074,47.5537131500396],[-122.360969945768,47.5556077024753],[-122.360969946058,47.556398535058],[-122.360969947025,47.5590354709083],[-122.3596213842,47.5590395813167],[-122.354493872666,47.5590457129101],[-122.354412558142,47.558783699441],[-122.354240894145,47.5585307209199],[-122.354015020466,47.5583138821873],[-122.353734937103,47.5581422181908],[-122.353409679004,47.5579976590358],[-122.353012141328,47.5578802047223],[-122.352352590183,47.5577627504088],[-122.351575584725,47.5570760944225],[-122.347403958927,47.5541073738158]]]]};
var roosevelt = {"name":"Roosevelt","median":"532800","type":"MultiPolygon","coordinates":[[[[-122.312943150539,47.6712376258391],[-122.313014177237,47.67097324177],[-122.318709320014,47.6723121660654],[-122.318923045019,47.6723750263608],[-122.319174486201,47.6724944609225],[-122.319363067088,47.6726390396021],[-122.320976826273,47.6744334945473],[-122.320658274714,47.675956569186],[-122.320558727353,47.6771710470024],[-122.32092023234,47.681534141711],[-122.319369517462,47.6820198246401],[-122.318283106407,47.6824162178629],[-122.317328826426,47.6827685673941],[-122.316742816066,47.6831186515057],[-122.312098488461,47.683085754752],[-122.312097399112,47.6830729433682],[-122.312050882985,47.6829001691851],[-122.311990196536,47.6827585674694],[-122.31190928127,47.682630451631],[-122.311814880126,47.6824955928541],[-122.311760936615,47.6824011917101],[-122.311706993104,47.682273075872],[-122.311686764288,47.6821112453396],[-122.311666535471,47.6811132903894],[-122.31167327841,47.680998660429],[-122.311693507226,47.6809177451628],[-122.311727221921,47.6808233440189],[-122.312003682413,47.6803108806661],[-122.312010425352,47.6802367083388],[-122.312017168291,47.6800816207452],[-122.311891600379,47.6723943310158],[-122.311903829988,47.67202390928],[-122.312283541802,47.6717920795601],[-122.312732840507,47.671467054965],[-122.312943150539,47.6712376258391]]]]};
var roxhill = {"name":"Roxhill","median":"324300","type":"MultiPolygon","coordinates":[[[[-122.367148130328,47.5318794844118],[-122.367149627664,47.5282881663653],[-122.365962140421,47.5282881663653],[-122.365966111951,47.5264811205609],[-122.364488703073,47.5264811205609],[-122.364480933528,47.5210557802669],[-122.367284910289,47.5210557802669],[-122.367284910289,47.517370355366],[-122.371112117098,47.5174177371421],[-122.37141689363,47.5174371194739],[-122.376842839633,47.5175075261917],[-122.376646350204,47.5257134522636],[-122.376586353831,47.5282808865665],[-122.376539789854,47.537407820391],[-122.367213652306,47.537350144981],[-122.366833836007,47.5370888645014],[-122.366348959171,47.5368804351302],[-122.365815197977,47.5367523324435],[-122.365847223649,47.535546032145],[-122.367982268425,47.535546032145],[-122.367982268425,47.5336992184135],[-122.365819638814,47.5336940094069],[-122.365819638814,47.5318794844118],[-122.367148130328,47.5318794844118]]]]}
var sandPoint = {"name":"Sand Point","median":null,"type":"MultiPolygon","coordinates":[[[[-122.264500125734,47.690222809629],[-122.263935748633,47.6894765821058],[-122.262500158467,47.688056178423],[-122.25977105921,47.6882194464042],[-122.258602856084,47.6891752491395],[-122.257700152958,47.688431846795],[-122.253027342406,47.6876884444505],[-122.24966703517,47.6864228718215],[-122.246867080995,47.6858562144293],[-122.244567118638,47.682622934014],[-122.244667117002,47.6805896339591],[-122.247867064629,47.6774563519073],[-122.251067012256,47.673223087859],[-122.254695393024,47.6743948988517],[-122.255502455657,47.6735743851745],[-122.258192664435,47.6736147383062],[-122.258227310159,47.6758122292844],[-122.263196452762,47.6757534542845],[-122.263541698901,47.6757327213662],[-122.263692481217,47.6834556889852],[-122.263723661923,47.6837150272439],[-122.263818998717,47.6839374797637],[-122.264052044214,47.6842234901466],[-122.26425331078,47.6844565356438],[-122.26440161246,47.6846154303008],[-122.264507542231,47.6847637319808],[-122.264602879026,47.6849544055693],[-122.264719401774,47.6852827878608],[-122.26499481918,47.6861620049635],[-122.265593664949,47.6878226473779],[-122.265746920557,47.6881746706204],[-122.265895222237,47.6883971231402],[-122.266191825597,47.6888102492489],[-122.266467243003,47.6891598174945],[-122.2672170092,47.6900292510234],[-122.266500957327,47.6900786339109],[-122.26546677658,47.6897894833878],[-122.265500109368,47.6902894752046],[-122.264500125734,47.690222809629]]]]}
var sewardPark = {"name":"Seward Park","median":"590400","type":"MultiPolygon","coordinates":[[[[-122.26657484941,47.5647629377129],[-122.267728165145,47.563673695075],[-122.266638922506,47.561879648377],[-122.265229314387,47.5620077945696],[-122.263883779363,47.5607904057388],[-122.263178975303,47.5593167245225],[-122.262462340055,47.5578591613066],[-122.262357873667,47.5576466872973],[-122.259398662618,47.5516279529596],[-122.257796835209,47.5514357336704],[-122.256835738763,47.5521405377305],[-122.254849472776,47.5541908768139],[-122.255874642318,47.5617515021843],[-122.250748794609,47.5623281600517],[-122.245815166189,47.5539986575247],[-122.247096628117,47.5514357336704],[-122.251735520293,47.5486165174304],[-122.257181733484,47.5483602250452],[-122.258014683736,47.5473991285996],[-122.257438025869,47.5451565702272],[-122.257638238277,47.5443485134817],[-122.258164256017,47.5434785610657],[-122.258912819724,47.5424669884887],[-122.260577607591,47.5412481113492],[-122.261785685842,47.5403426860777],[-122.261664297133,47.5388657901157],[-122.26176545439,47.5380767635058],[-122.261947537454,47.537591208669],[-122.262741270569,47.5362790112297],[-122.263201887449,47.5357299151278],[-122.263667210835,47.5350420457756],[-122.263909988253,47.5346778796479],[-122.264037554794,47.534135997653],[-122.264011145511,47.5337674643288],[-122.26386952535,47.533322372395],[-122.263525590674,47.532937974816],[-122.262854828514,47.5316658995879],[-122.266410151921,47.531664356426],[-122.266929971018,47.5336684861307],[-122.267241447419,47.5349784544775],[-122.267291325149,47.5352998887366],[-122.267306973186,47.5355534969656],[-122.267291300719,47.5369672705026],[-122.267212722644,47.5388865388514],[-122.267188195142,47.5390415410542],[-122.26712885181,47.5392517153545],[-122.2670645632,47.5394272727113],[-122.266990384035,47.539605302707],[-122.266869224733,47.5398303128402],[-122.269931964811,47.5398290134478],[-122.269979423714,47.5427906917134],[-122.26994424697,47.5460437856815],[-122.273223583306,47.5460437856813],[-122.273230838662,47.5479112024149],[-122.273230838662,47.5494520579342],[-122.272722626666,47.5494520579342],[-122.272721691817,47.551161804473],[-122.27271950505,47.5551611829409],[-122.272720535304,47.5570585147497],[-122.273214177578,47.5570585147495],[-122.27382845462,47.5570581055403],[-122.274470094094,47.5570581055403],[-122.274474531719,47.5594100470345],[-122.274476777838,47.5606004901337],[-122.274470094094,47.5617300429566],[-122.274504972328,47.5641280886472],[-122.271382297857,47.5641259754187],[-122.271382297857,47.5677180541925],[-122.269970723517,47.5679025194347],[-122.267856311337,47.5655958879659],[-122.26657484941,47.5647629377129]]]]}
var southDelridge = {"name":"South Delridge","median":"268000","type":"MultiPolygon","coordinates":[[[[-122.356438803271,47.5345722543298],[-122.356115850637,47.5345419775203],[-122.355025885498,47.5345419775203],[-122.35502832323,47.53368941801],[-122.355125944994,47.5172988446668],[-122.358534204706,47.5173297146674],[-122.358476096992,47.5155178104873],[-122.360483454392,47.5155178104873],[-122.360478171873,47.5173561272649],[-122.367284910289,47.517370355366],[-122.367284910289,47.5210557802669],[-122.364480933528,47.5210557802669],[-122.364488703073,47.5264811205609],[-122.365966111951,47.5264811205609],[-122.365962140421,47.5282881663653],[-122.367149627664,47.5282881663653],[-122.367148130328,47.5318794844118],[-122.365819638814,47.5318794844118],[-122.365819638814,47.5336940094069],[-122.360465618925,47.5336942268563],[-122.360526172544,47.5339869026807],[-122.361242723701,47.5359750798332],[-122.36129318505,47.5361870174992],[-122.36129318505,47.5363384015463],[-122.36128309278,47.5366411696407],[-122.361091339653,47.5379531647161],[-122.360132574022,47.5379329801762],[-122.359284823358,47.5378421497479],[-122.358679287169,47.5377513193197],[-122.358366426805,47.5375999352725],[-122.35808384325,47.5373980898763],[-122.357841628775,47.537105414052],[-122.357710429267,47.5367723691481],[-122.357639783379,47.5359649875634],[-122.357629691109,47.5353897281843],[-122.35758932203,47.5352080673277],[-122.357417753443,47.534986037392],[-122.357094800809,47.5347539151863],[-122.356691110017,47.5346126234089],[-122.356438803271,47.5345722543298]]]]}
var southLakeUnion = {"name":"South Lake Union","type":"MultiPolygon","coordinates":[[[[-122.328421387729,47.6259818042281],[-122.328499520398,47.6184619313844],[-122.330200391522,47.6184240884161],[-122.331703950647,47.6185476686184],[-122.33434032829,47.6185476686184],[-122.343608843441,47.6185682653186],[-122.347295831418,47.6185682653187],[-122.350405754552,47.6185682653187],[-122.343737305971,47.623741135238],[-122.342627443699,47.6244863188193],[-122.34178712547,47.6249064779334],[-122.340076477648,47.625356648413],[-122.339146125324,47.62556672797],[-122.337825625251,47.6257467961618],[-122.335904897872,47.6257768075271],[-122.33434032829,47.6257771104364],[-122.334335934014,47.6245619210069],[-122.332060270331,47.6250198007812],[-122.328421387729,47.6259818042281]]]]}
var southPark = {"name":"South Park","median":"253300","type":"MultiPolygon","coordinates":[[[[-122.332885171095,47.5394076754635],[-122.33264323521,47.5391926213434],[-122.331353446349,47.5395220559634],[-122.3290410787,47.5376872425035],[-122.322065287488,47.5338053738727],[-122.320793302461,47.5326081762638],[-122.317819854246,47.5309518076895],[-122.317535683281,47.5299452941841],[-122.315728860743,47.5298251900286],[-122.314109322823,47.5288010129264],[-122.311071940906,47.5264203622345],[-122.308816216234,47.5246621391469],[-122.309233093475,47.523038196424],[-122.308264414917,47.5219217533408],[-122.30884304885,47.5219520771783],[-122.317599716573,47.5220387778873],[-122.317636050696,47.5183690749536],[-122.325373308516,47.5184456823755],[-122.325756339767,47.5208204831589],[-122.330681246021,47.5207302038623],[-122.331541335387,47.5207474061124],[-122.332071069934,47.5214383642169],[-122.332645899438,47.5224083890039],[-122.333148875253,47.5237736090746],[-122.333508143693,47.5248873412377],[-122.333651851069,47.526504049216],[-122.333831485289,47.527581854535],[-122.334370387948,47.5289470746056],[-122.334589924096,47.5297538495275],[-122.334693729544,47.5311386120876],[-122.334621875856,47.5329349542858],[-122.334621875856,47.5346594427962],[-122.334729656388,47.5359887360228],[-122.334909290608,47.537821005065],[-122.334981144296,47.5391143714477],[-122.334742698412,47.5413286249812],[-122.33355721522,47.5397302566434],[-122.332885171095,47.5394076754635]]]]}
var sunsetHill = {"name":"Sunset Hill","median":"612800","type":"MultiPolygon","coordinates":[[[[-122.393034596104,47.690517966977],[-122.393015550603,47.6759321828024],[-122.393000803496,47.6759322346303],[-122.39296705153,47.6732047491624],[-122.392904778401,47.6709016021624],[-122.392847210144,47.6678696739431],[-122.392883050767,47.6664166747016],[-122.393211654283,47.6658809428861],[-122.394131219091,47.6654848226613],[-122.394617259753,47.6650033329034],[-122.394848152194,47.6648721608549],[-122.397348449192,47.665359070328],[-122.399210270813,47.6658220630061],[-122.400924328814,47.6665904338339],[-122.402943764963,47.6675065682824],[-122.404701366277,47.6687410173842],[-122.405771208982,47.6698201571264],[-122.407490138671,47.672646842676],[-122.408601175953,47.6748632992405],[-122.409939976674,47.6756625279228],[-122.410823648134,47.6767503039224],[-122.411162166339,47.6775962359887],[-122.410091049412,47.6786700871881],[-122.409106113468,47.6801803223028],[-122.407683428214,47.6811652582472],[-122.406435842685,47.6836823167718],[-122.405127749078,47.686388299764],[-122.403787459368,47.6874031858952],[-122.403459147386,47.6882786845125],[-122.403415372455,47.6890228583371],[-122.403459147386,47.6894824951112],[-122.403546697248,47.6899640193507],[-122.403809645309,47.6904523514654],[-122.39832999999,47.690519999042],[-122.393034596104,47.690517966977]]]]}
var universityDistrict = {"name":"University District","median":"514200","type":"MultiPolygon","coordinates":[[[[-122.318709320014,47.6723121660655],[-122.313014177237,47.6709732417701],[-122.312943150539,47.6712376258392],[-122.312732840507,47.6714670549651],[-122.312283541802,47.6717920795602],[-122.311903829988,47.6720239092801],[-122.311891600379,47.6723943310159],[-122.311372829987,47.6723956104523],[-122.310682527253,47.6723956104523],[-122.30680592142,47.6707978866811],[-122.304084436902,47.6700929775765],[-122.304008644201,47.6700473748666],[-122.303958784261,47.670008594913],[-122.303914464314,47.6699531949794],[-122.303897844334,47.6698590150921],[-122.303925544301,47.6679200174134],[-122.302867388091,47.6681403326386],[-122.302246017542,47.6682837258425],[-122.30167581119,47.6684277201315],[-122.301175348287,47.6685131549683],[-122.300620894566,47.6685609527029],[-122.300612785104,47.6663389602319],[-122.300172343139,47.6663911092858],[-122.29875413362,47.6664119653082],[-122.29785732466,47.6663702532635],[-122.297440204213,47.6663076851965],[-122.297064795811,47.666151265029],[-122.296407831108,47.6657654286159],[-122.295823862483,47.6653483081691],[-122.295708761837,47.6651656020865],[-122.295647724608,47.6650069052891],[-122.295623309716,47.6639326500459],[-122.295607033121,47.6638512670729],[-122.295573590215,47.6637736784829],[-122.295476820364,47.6636640862351],[-122.294276421513,47.6626874905594],[-122.293808469418,47.6622887139918],[-122.293560251351,47.6620689799647],[-122.2934255599,47.6619269481415],[-122.293100437554,47.6615237140459],[-122.292876634378,47.6612429427892],[-122.290191302205,47.6611452411904],[-122.290205486314,47.6584313484009],[-122.287660183987,47.6584268286546],[-122.287660183987,47.6566994543495],[-122.289013547648,47.6543271127424],[-122.292080079765,47.653729736356],[-122.293292803592,47.6533662750631],[-122.293974946997,47.653093417701],[-122.294884471538,47.6525931792038],[-122.295672726139,47.6520929407066],[-122.296551933195,47.6505619077303],[-122.297011179009,47.6501038310433],[-122.297461457735,47.6492279384044],[-122.29794653749,47.6489853985269],[-122.298537728441,47.6489550810422],[-122.298871220773,47.6490460334963],[-122.299416935497,47.6481516676984],[-122.299447252982,47.6477272229127],[-122.300195612276,47.6473325388371],[-122.304524378747,47.647671514334],[-122.309693664378,47.6479647280781],[-122.310256366699,47.6482821498999],[-122.310948923401,47.6487149978389],[-122.311526053986,47.6491622740424],[-122.311947668747,47.6494287736614],[-122.312276323747,47.6495662654521],[-122.312637030363,47.6493498414827],[-122.31285389762,47.6493809300791],[-122.313399285123,47.6498004260607],[-122.314223705016,47.6502906501576],[-122.315407257172,47.6510235201799],[-122.31471470047,47.6514707963835],[-122.314860032635,47.6515393562723],[-122.316229668256,47.6518459312638],[-122.317565007663,47.652826571181],[-122.31820634051,47.653245472933],[-122.318494905803,47.6534907534319],[-122.318898897213,47.6536638926074],[-122.319312477969,47.6536899112636],[-122.321024956943,47.6536899112636],[-122.32146303296,47.6535306108939],[-122.322431376284,47.6535914521616],[-122.322431376284,47.6564383350814],[-122.322387352321,47.6590210742252],[-122.32221125647,47.6615157654438],[-122.322049835274,47.6635261930728],[-122.321988884888,47.6688844151894],[-122.321663703071,47.6722434525834],[-122.320976826273,47.6744334945474],[-122.319363067088,47.6726390396022],[-122.319174486201,47.6724944609225],[-122.318923045019,47.6723750263609],[-122.318709320014,47.6723121660655]]]]}
var victoryHeights = {"name":"Victory Heights","median":"422200","type":"MultiPolygon","coordinates":[[[[-122.299009793103,47.7129875158582],[-122.300449440599,47.7105074508459],[-122.300945453601,47.7096243057439],[-122.301235802676,47.7089468245696],[-122.301364783721,47.7084164640439],[-122.30152615175,47.7075192749528],[-122.301622934775,47.7062006062389],[-122.301647130532,47.7030793536865],[-122.301671326288,47.7027890046119],[-122.3017197178,47.7025349491715],[-122.301828598703,47.702244600097],[-122.301901185972,47.7020510340473],[-122.302034262631,47.7018211743633],[-122.303348604901,47.7002591379899],[-122.312037617098,47.7003201063737],[-122.312210244251,47.7085174965371],[-122.312287715024,47.7121962813801],[-122.312331486786,47.7121962813801],[-122.312331490917,47.7121964775064],[-122.312339115423,47.7125585355771],[-122.312661271673,47.7154901703454],[-122.312613771673,47.7176142230818],[-122.312655064038,47.7194190738188],[-122.312655152479,47.7194278914335],[-122.295235921862,47.7192604874967],[-122.297460365031,47.7156204895833],[-122.299009793103,47.7129875158582]]]]}
var viewRidge = {"name":"View Ridge","median":"656000","type":"MultiPolygon","coordinates":[[[[-122.278433097603,47.6915662934074],[-122.278321986105,47.6915601205465],[-122.278204701746,47.6915724662684],[-122.277889885837,47.6917082692101],[-122.277371365514,47.6919675293712],[-122.276970129551,47.6921650609227],[-122.276698523667,47.6922514809764],[-122.276439263506,47.6922885181422],[-122.276204694789,47.6923070367251],[-122.275951607489,47.6922823452812],[-122.275741730215,47.6922453081154],[-122.275359012834,47.6921403694788],[-122.274679998127,47.6923070367251],[-122.274142959221,47.69239962964],[-122.273840489033,47.6924181482229],[-122.27356888315,47.6925292597205],[-122.273272585823,47.6927082726889],[-122.273112091437,47.6927700012989],[-122.27293925133,47.6928008656038],[-122.2727540655,47.6928008656038],[-122.27256270681,47.6927761741599],[-122.272365175259,47.6927267912718],[-122.272254063761,47.692695926967],[-122.272142952263,47.692683581245],[-122.271988630739,47.6927144455499],[-122.27187134638,47.6928440756306],[-122.271821963492,47.6928872856574],[-122.271735543439,47.6928811127964],[-122.271260233143,47.6927267912718],[-122.271062701592,47.692683581245],[-122.270945417233,47.6927267912718],[-122.270655292767,47.6925971611913],[-122.270315785413,47.6924119753619],[-122.268568865755,47.6912761689415],[-122.268241704123,47.6910292545022],[-122.267902196769,47.6907206114531],[-122.267550343694,47.6903749312382],[-122.2672170092,47.6900292510234],[-122.266467243003,47.6891598174945],[-122.266191825597,47.6888102492489],[-122.265895222237,47.6883971231402],[-122.265746920557,47.6881746706204],[-122.265593664949,47.6878226473779],[-122.26499481918,47.6861620049635],[-122.264719401774,47.6852827878608],[-122.264602879026,47.6849544055693],[-122.264507542231,47.6847637319808],[-122.26440161246,47.6846154303008],[-122.26425331078,47.6844565356438],[-122.264052044214,47.6842234901466],[-122.263818998717,47.6839374797637],[-122.263723661923,47.6837150272439],[-122.263692481217,47.6834556889852],[-122.263541698901,47.675732721366],[-122.27177331206,47.675748782018],[-122.272477179547,47.6757147606009],[-122.272842381771,47.6756548913839],[-122.274006838043,47.6754453491243],[-122.274132563399,47.6754124210548],[-122.274246314911,47.675367519142],[-122.274324144893,47.6752926826207],[-122.274387007571,47.6751938984125],[-122.274428916023,47.6750741599784],[-122.274476811397,47.6749873496138],[-122.274563621762,47.6749095196315],[-122.274683360196,47.6748646177188],[-122.27487194823,47.674861624258],[-122.275192248541,47.6748765915622],[-122.275326954279,47.6748885654056],[-122.275383830035,47.6749125130925],[-122.275464653478,47.674963401927],[-122.275542483461,47.6750352449873],[-122.275578404991,47.6751100815087],[-122.275608339599,47.6753794929855],[-122.275638274208,47.6755022248805],[-122.275713110729,47.6756099894712],[-122.275829855703,47.6757027867577],[-122.275973548175,47.6757591480402],[-122.279556979003,47.6758033879268],[-122.285025477202,47.6756825069395],[-122.285078576812,47.6829041241342],[-122.279431617993,47.6827237539688],[-122.279927562833,47.6930131667006],[-122.279124458033,47.6921403694788],[-122.278865197872,47.6918132078467],[-122.278747913513,47.691689750627],[-122.278655320598,47.6916218491563],[-122.278550381962,47.6915848119904],[-122.278433097603,47.6915662934074]]]]}
var wallingford = {"name":"Wallingford","median":"608500","type":"MultiPolygon","coordinates":[[[[-122.321663703071,47.6722434525835],[-122.321988884888,47.6688844151895],[-122.322049835274,47.6635261930728],[-122.32221125647,47.6615157654438],[-122.322387352321,47.6590210742253],[-122.322431376283,47.6564383350815],[-122.322431376283,47.6535914521617],[-122.323805934269,47.6533556316354],[-122.324330083129,47.6534954046648],[-122.32653150834,47.6531110288342],[-122.327474976288,47.6522025041437],[-122.329711344757,47.6501408519618],[-122.33292612443,47.6449692498779],[-122.334778117068,47.6442354414742],[-122.338097726514,47.6454584554805],[-122.338237499543,47.6460874341122],[-122.339914775895,47.6467164127441],[-122.339809946122,47.6472755048612],[-122.340648584298,47.6472755048612],[-122.340998016871,47.6470309020601],[-122.341626995503,47.6470309020601],[-122.342775714215,47.6480758596481],[-122.342087200763,47.6613909793607],[-122.347265925616,47.6613828494943],[-122.347233406151,47.6649843802794],[-122.340149361512,47.6650062542762],[-122.340047538015,47.6687972213692],[-122.340035332168,47.6690383998675],[-122.340012777885,47.6692363763498],[-122.339969212249,47.669361166887],[-122.339940102974,47.6696373413772],[-122.339898719059,47.6701914200107],[-122.337962423905,47.6701947507887],[-122.337962423905,47.6706041105262],[-122.337150527092,47.6712386181195],[-122.337012926215,47.6707845352281],[-122.336174886384,47.6710816968869],[-122.333561806725,47.6731148502504],[-122.333561806725,47.6723370667488],[-122.321663703071,47.6722434525835]]]]}
var wedgwood = {"name":"Wedgwood","median":"523700","type":"MultiPolygon","coordinates":[[[[-122.305533326394,47.6975482040074],[-122.290531396287,47.6973791179685],[-122.280016612009,47.697385193985],[-122.279964906036,47.6959058286423],[-122.280013739455,47.6945183850297],[-122.279927562833,47.6930131667003],[-122.279431617993,47.6827237539684],[-122.285078576812,47.6829041241339],[-122.290292079968,47.6829519151496],[-122.300699704977,47.683005014759],[-122.312098488461,47.6830857547518],[-122.316742816066,47.6831186515057],[-122.31619837168,47.6834439039959],[-122.31496514832,47.6854699138013],[-122.314803654785,47.6856607697974],[-122.314524711405,47.6858809882546],[-122.314098955722,47.6862186565554],[-122.308608175525,47.6900210952478],[-122.307759334425,47.6905878273949],[-122.307017997344,47.6910833077167],[-122.306698725393,47.6913387252783],[-122.306360231733,47.6916095202056],[-122.306068935534,47.6918726264499],[-122.305899795806,47.6920605594817],[-122.305763544358,47.6922719841423],[-122.305650784539,47.6924928054546],[-122.305514533091,47.6929532413822],[-122.305500438113,47.6932539342329],[-122.305683672819,47.6953681808395],[-122.305721259426,47.6960494380795],[-122.305711862774,47.6966508237809],[-122.305641387887,47.6971065613828],[-122.305533326394,47.6975482040074]]]]}
var westSeattle = {"name":"West Seattle","median":null,"type":"MultiPolygon","coordinates":[[[[-122.403364759589,47.5772575420371],[-122.403368911116,47.575819729818],[-122.402761145238,47.575819729818],[-122.402768873806,47.5722233298744],[-122.403822591039,47.5722233298744],[-122.403890702039,47.5708090249944],[-122.403457996864,47.5705526071127],[-122.403197572452,47.5704163851128],[-122.403049330865,47.5703843328776],[-122.392810078831,47.5702771146667],[-122.387413427615,47.5702350188576],[-122.38084905912,47.570183814436],[-122.380065257124,47.5691097154053],[-122.379554334342,47.5698238461122],[-122.37634196763,47.5701766601211],[-122.376099133367,47.5702218385886],[-122.375861946412,47.570227485897],[-122.375596522915,47.5701879547379],[-122.375319804801,47.5701088924196],[-122.37452353431,47.5698547635395],[-122.374387998907,47.5698604108481],[-122.37419599042,47.5698491162311],[-122.374003981933,47.5698321743058],[-122.372812399851,47.5698321743061],[-122.37296307584,47.5693752652151],[-122.373168740745,47.5684591215452],[-122.373318420788,47.5679424139819],[-122.373446295705,47.5674753925449],[-122.373557491285,47.567058409119],[-122.373685366203,47.5667915397265],[-122.373796561783,47.566591387682],[-122.373907757363,47.5664357138697],[-122.374030072501,47.5663022791733],[-122.374159671654,47.566196807585],[-122.374491534159,47.5659520130956],[-122.375281480229,47.5654863288207],[-122.375722294763,47.5652607958035],[-122.376171447483,47.5640715893531],[-122.376160072986,47.5629113907092],[-122.376295379758,47.5537942045798],[-122.376404026004,47.5464734472824],[-122.376519763613,47.5413331331562],[-122.376539789854,47.5374078203911],[-122.376586353831,47.5282808865665],[-122.379594081951,47.5283507554385],[-122.380614975529,47.528374470575],[-122.387401398546,47.5285321177101],[-122.387354492511,47.5329256496879],[-122.388777308916,47.5329256496879],[-122.388558414085,47.5339263117754],[-122.388527143394,47.5342390186777],[-122.388523432165,47.5347234463777],[-122.388619072161,47.5358339219683],[-122.388640612449,47.5365375713518],[-122.388683693023,47.5369755571925],[-122.388561631395,47.5372699411183],[-122.388561631395,47.5375930454271],[-122.388425209576,47.5378012682035],[-122.388260067374,47.5380023108845],[-122.388087745076,47.5381961734701],[-122.387764640767,47.538361315672],[-122.387542057799,47.538390036055],[-122.387312294735,47.5383972161507],[-122.387312294735,47.5385479981614],[-122.389243740492,47.5380238511719],[-122.389889949109,47.5380023108848],[-122.389918669492,47.5370186377672],[-122.391957816685,47.5370186377672],[-122.396353357845,47.5367869239357],[-122.396452556624,47.5367816946069],[-122.396531537677,47.5369755571921],[-122.396739760454,47.537291481405],[-122.397177746294,47.5379161497352],[-122.397207199187,47.5380914949644],[-122.39717211343,47.5381751610006],[-122.397077224954,47.5382177137566],[-122.397004781358,47.5382318379928],[-122.396918416417,47.5382291390884],[-122.396869836138,47.5382453325147],[-122.39684014819,47.5382804182719],[-122.396829352572,47.5384153634915],[-122.396848244903,47.538542211998],[-122.396902222991,47.5387014473573],[-122.396985889027,47.5388552849078],[-122.397161317813,47.5390091224584],[-122.39741771373,47.5391359709648],[-122.397687533092,47.5392085669701],[-122.397881395678,47.539237287353],[-122.398010637401,47.5393449887892],[-122.398089618454,47.5395388513744],[-122.398132699029,47.5397757945343],[-122.398082438359,47.5399911974067],[-122.397974736922,47.5401994201835],[-122.397867035486,47.5403573822898],[-122.397858066489,47.5403628416795],[-122.397869138662,47.5405289245841],[-122.397732626943,47.5405516765373],[-122.397732626943,47.5420305554449],[-122.399575537101,47.5456481218545],[-122.398415185538,47.5502212722494],[-122.401964496088,47.5565008210834],[-122.404505380856,47.5603790144463],[-122.404558222652,47.5603376589775],[-122.405479679684,47.5615662664006],[-122.406093982419,47.5620269949166],[-122.406938650389,47.5633323914022],[-122.407629742187,47.564369028122],[-122.407975287108,47.5649833308569],[-122.407975287108,47.5652520906228],[-122.40981819922,47.5664423035144],[-122.409856593751,47.568822729298],[-122.413657597661,47.5723549773481],[-122.414791798337,47.5729050644337],[-122.414729621415,47.5732760896901],[-122.414659,47.5736998181819],[-122.41474,47.5739878181819],[-122.41474,47.5743208181819],[-122.41474,47.5761028181819],[-122.41339,47.5760938181819],[-122.412103,47.5760758181818],[-122.410861,47.5760578181819],[-122.40952,47.5760398181819],[-122.408215,47.5760218181818],[-122.406811,47.5767148181819],[-122.405389,47.5771198181819],[-122.403733,47.5772188181819],[-122.40369751911,47.5772379893077],[-122.403364759589,47.5772575420371]]]]}
var westlake = {"name":"Westlake","median":"406900","type":"MultiPolygon","coordinates":[[[[-122.338620460052,47.6280391736402],[-122.33823329095,47.6267170377658],[-122.33823329095,47.6281982018298],[-122.337295220637,47.6283956901112],[-122.335912800714,47.6282969459705],[-122.335912800714,47.6268651549535],[-122.335904897872,47.625776807527],[-122.337825625251,47.6257467961617],[-122.339146125324,47.6255667279698],[-122.340076477648,47.6253566484129],[-122.34178712547,47.6249064779333],[-122.342627443699,47.6244863188192],[-122.343737305974,47.623741135239],[-122.34371779866,47.6245701922007],[-122.343588335525,47.6280083504299],[-122.343431789915,47.6324058589418],[-122.343460252753,47.6359494823056],[-122.343559872687,47.6362341106881],[-122.343773343974,47.6366183590047],[-122.344015278099,47.6369883759021],[-122.344285675063,47.6373726242187],[-122.345737279814,47.6393507914775],[-122.346363462256,47.6405604621037],[-122.346719247734,47.6415139671856],[-122.347075033212,47.6426667121352],[-122.347188884565,47.64307942329],[-122.34727427308,47.6435775229596],[-122.347316967338,47.6440471597909],[-122.347316967338,47.6449722020346],[-122.347315141085,47.646172054686],[-122.346976961671,47.646032118377],[-122.342419179234,47.6439197580381],[-122.341291434934,47.6423807187574],[-122.340415774653,47.6406161306165],[-122.339056853168,47.6379644301757],[-122.339159214085,47.6323290230731],[-122.33935752389,47.628739384286],[-122.338620460052,47.6280391736402]]]]}
var whittierHeights = {"name":"Whittier Heights","median":"524800","type":"MultiPolygon","coordinates":[[[[-122.366040201904,47.6832533821718],[-122.366078869215,47.6759641734893],[-122.376486363943,47.6759891899753],[-122.37666945305,47.6759896300662],[-122.376809524487,47.6905388491836],[-122.366069531709,47.69066493706],[-122.366040201904,47.6832533821718]]]]}
var windermere = {"name":"Windermere","median":"967300","type":"MultiPolygon","coordinates":[[[[-122.258192664435,47.6736147383063],[-122.255502455657,47.6735743851746],[-122.254695393024,47.6743948988519],[-122.251067012256,47.6732230878591],[-122.251626324794,47.6724928150256],[-122.252670454052,47.6712746642237],[-122.259553504452,47.6661411874073],[-122.266646053962,47.664546387492],[-122.269122730075,47.6648347770318],[-122.26952692481,47.6650090099859],[-122.274164906699,47.6682636258076],[-122.273860269846,47.6683245531781],[-122.273555632993,47.6684159442341],[-122.273266227982,47.6685530308181],[-122.271514566075,47.6697258827034],[-122.263786435118,47.6752439631774],[-122.263712313452,47.6753427920656],[-122.263650545396,47.6754601513703],[-122.263601130952,47.6755713338695],[-122.263541698901,47.6757327213662],[-122.263196452762,47.6757534542846],[-122.258227310159,47.6758122292844],[-122.258192664435,47.6736147383063]]]]}

var seattleNeighborhoods = module.exports = [capitolHill, admiral, alki, arborHeights, atlantic, ballard, beaconHill, belltown, bitterLake, blueRidge, brighton, broadmoor, broadview, bryant, capitolHill, cedarPark, centralDistrict, columbiaCity, crownHill, dennyBlaine, downtown, eastlake, fauntleroy, firstHill, fremont, georgetown, greenLake, greenwood, hallerLake, hawthorneHills, highPoint, highlandPark, industrialDistrict, interbay, internationalDistrict, laurelhurst, leschi, lowerQueenAnne, loyalHeights, madisonPark, madisonValley, madrona, magnolia, mapleLeaf, matthewsBeach, meadowbrook, montlake, mountBaker, northBeach, northCollegePark, northDelridge, northgate, olympicHills, olympicManor, phinneyRidge, pinehurst, pioneerSquare, portageBay, queenAnne, rainierBeach, ravenna, riverview, roosevelt, roxhill, sewardPark, southDelridge, southLakeUnion, southPark, sunsetHill, universityDistrict, victoryHeights, viewRidge, wallingford, wedgwood, westSeattle, westlake, whittierHeights, windermere];

},{}],3:[function(require,module,exports){
var map = L.map('map').setView([47.609, -122.332099], 12);
var seattleNeighborhoods = require('../data/geojson_cleanedup.js');
var request = require('superagent');
var parseString = require('xml2js').parseString;
var util = require('util');
var ZID = require('../config.js').ZID;
var myToken = require('../config.js').accessToken;



// load a tile layer
var baseMap = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
    maxZoom: 18,
    id: 'mobot11.1dba3612',
	accessToken: myToken
}).addTo(map);

var baseMaps = {
	"Basemap": baseMap
};


function getColor(m) {
	m = parseInt(m);
	if(m > 1000000) return '#800026';
	else if(m > 6000000)  return '#BD0026';
	else if(m > 500000)  return '#E31A1C';
	else if(m > 400000)  return '#FC4E2A';
	else if(m > 300000)  return '#FD8D3C';
	else if(m > 200000)  return '#FEB24C';
	else if(m > 100000)  return '#FED976';
	else if(m > 0)  return '#FFEDA0';
	else return 'grey';
}

function Style(neighborhood) {
	return {
		fillColor : getColor(neighborhood.median),
		fillOpacity: 0.5,
		clickable: true,
		weight: 2,
		opacity: 1,
		color: 'grey',
		dashArray: '3'
	};
}

var geojson = seattleNeighborhoods.map(function(neighborhood) {
	L.geoJson(neighborhood, {
		style: Style(neighborhood)
	}).addTo(map);
});

function highlightFeature(e) {
	var layer = e.target;
	layer.setStyle({
		weight: 3,
		color: '#fff',
		dashArray: '',
		fillOpacity: 0.7
	});
	if (!L.Browser.ie && !L.Browser.opera) {
		layer.bringToFront();
	}
}

function resetHighlight(e) {
	geojson.resetStyle(e.target);
}

function zoomToFeature(e) {
	map.fitBounds(e.target.getBounds());
  var name = e.target.feature.geometry.name;
  var zillowName = name.replace(/\s+/g, '');
  request
  .get('/name')
  .end(function(err, res) {
    if(err) {
      console.log(err);
    }
    console.log(res);
    parseString(res.text, function (err, myData) {
      if (err) {
        console.log(err);
      }
      var jsonData = JSON.stringify(util.inspect(myData,false,null));
      console.log(jsonData);
    });
  });
}

function onEachFeature(feature, layer) {
	layer.on({
		mouseover: highlightFeature,
		mouseout: resetHighlight,
		click: zoomToFeature // need to add http call here
	});
}

geojson = L.geoJson(seattleNeighborhoods, {
	style: Style,
	onEachFeature: onEachFeature
}).addTo(map);

},{"../config.js":1,"../data/geojson_cleanedup.js":2,"superagent":30,"util":29,"xml2js":35}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

},{"base64-js":6,"ieee754":7,"is-array":8}],6:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],7:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],8:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],9:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],10:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],11:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],12:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],13:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":14}],14:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":16,"./_stream_writable":18,"core-util-is":19,"inherits":10,"process-nextick-args":20}],15:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":17,"core-util-is":19,"inherits":10}],16:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":14,"_process":12,"buffer":5,"core-util-is":19,"events":9,"inherits":10,"isarray":11,"process-nextick-args":20,"string_decoder/":27,"util":4}],17:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":14,"core-util-is":19,"inherits":10}],18:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: require('util-deprecate')(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use ' +
      '_writableState.getBuffer() instead.')
});
}catch(_){}}());


function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":14,"buffer":5,"core-util-is":19,"events":9,"inherits":10,"process-nextick-args":20,"util-deprecate":21}],19:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":5}],20:[function(require,module,exports){
(function (process){
'use strict';
module.exports = nextTick;

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < arguments.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))
},{"_process":12}],21:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  if (!global.localStorage) return false;
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],22:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":15}],23:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":14,"./lib/_stream_passthrough.js":15,"./lib/_stream_readable.js":16,"./lib/_stream_transform.js":17,"./lib/_stream_writable.js":18}],24:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":17}],25:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":18}],26:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":9,"inherits":10,"readable-stream/duplex.js":13,"readable-stream/passthrough.js":22,"readable-stream/readable.js":23,"readable-stream/transform.js":24,"readable-stream/writable.js":25}],27:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":5}],28:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],29:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":28,"_process":12,"inherits":10}],30:[function(require,module,exports){
/**
 * Module dependencies.
 */

var Emitter = require('emitter');
var reduce = require('reduce');

/**
 * Root reference for iframes.
 */

var root = 'undefined' == typeof window
  ? (this || self)
  : window;

/**
 * Noop.
 */

function noop(){};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * TODO: future proof, move to compoent land
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isHost(obj) {
  var str = {}.toString.call(obj);

  switch (str) {
    case '[object File]':
    case '[object Blob]':
    case '[object FormData]':
      return true;
    default:
      return false;
  }
}

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  return false;
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return obj === Object(obj);
}

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    if (null != obj[key]) {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(obj[key]));
    }
  }
  return pairs.join('&');
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var parts;
  var pair;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    parts = pair.split('=');
    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'application/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function type(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function params(str){
  return reduce(str.split(/ *; */), function(obj, str){
    var parts = str.split(/ *= */)
      , key = parts.shift()
      , val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req, options) {
  options = options || {};
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  this.setStatusProperties(this.xhr.status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this.setHeaderProperties(this.header);
  this.body = this.req.method != 'HEAD'
    ? this.parseBody(this.text ? this.text : this.xhr.response)
    : null;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

Response.prototype.get = function(field){
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

Response.prototype.setHeaderProperties = function(header){
  // content-type
  var ct = this.header['content-type'] || '';
  this.type = type(ct);

  // params
  var obj = params(ct);
  for (var key in obj) this[key] = obj[key];
};

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype.parseBody = function(str){
  var parse = request.parse[this.type];
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

Response.prototype.setStatusProperties = function(status){
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
    status = 204;
  }

  var type = status / 100 | 0;

  // status / class
  this.status = status;
  this.statusType = type;

  // basics
  this.info = 1 == type;
  this.ok = 2 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = (4 == type || 5 == type)
    ? this.toError()
    : false;

  // sugar
  this.accepted = 202 == status;
  this.noContent = 204 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.notFound = 404 == status;
  this.forbidden = 403 == status;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  Emitter.call(this);
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {};
  this._header = {};
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      return self.callback(err);
    }

    self.emit('response', res);

    if (err) {
      return self.callback(err, res);
    }

    if (res.status >= 200 && res.status < 300) {
      return self.callback(err, res);
    }

    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
    new_err.original = err;
    new_err.response = res;
    new_err.status = res.status;

    self.callback(new_err, res);
  });
}

/**
 * Mixin `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Allow for extension
 */

Request.prototype.use = function(fn) {
  fn(this);
  return this;
}

/**
 * Set timeout to `ms`.
 *
 * @param {Number} ms
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.timeout = function(ms){
  this._timeout = ms;
  return this;
};

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.clearTimeout = function(){
  this._timeout = 0;
  clearTimeout(this._timer);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */

Request.prototype.abort = function(){
  if (this.aborted) return;
  this.aborted = true;
  this.xhr.abort();
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Set header `field` to `val`, or multiple fields with one object.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Get case-insensitive header `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api private
 */

Request.prototype.getHeader = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} pass
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass){
  var str = btoa(user + ':' + pass);
  this.set('Authorization', 'Basic ' + str);
  return this;
};

/**
* Add query-string `val`.
*
* Examples:
*
*   request.get('/shoes')
*     .query('size=10')
*     .query({ color: 'blue' })
*
* @param {Object|String} val
* @return {Request} for chaining
* @api public
*/

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Write the field `name` and `val` for "multipart/form-data"
 * request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 * ```
 *
 * @param {String} name
 * @param {String|Blob|File} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.field = function(name, val){
  if (!this._formData) this._formData = new root.FormData();
  this._formData.append(name, val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `filename`.
 *
 * ``` js
 * request.post('/upload')
 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String} filename
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, filename){
  if (!this._formData) this._formData = new root.FormData();
  this._formData.append(field, file, filename);
  return this;
};

/**
 * Send `data`, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // querystring
 *       request.get('/search')
 *         .end(callback)
 *
 *       // multiple data "writes"
 *       request.get('/search')
 *         .send({ search: 'query' })
 *         .send({ range: '1..5' })
 *         .send({ order: 'desc' })
 *         .end(callback)
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"})
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
  *      request.post('/user')
  *        .send('name=tobi')
  *        .send('species=ferret')
  *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.send = function(data){
  var obj = isObject(data);
  var type = this.getHeader('Content-Type');

  // merge
  if (obj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    if (!type) this.type('form');
    type = this.getHeader('Content-Type');
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!obj || isHost(data)) return this;
  if (!type) this.type('json');
  return this;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  var fn = this._callback;
  this.clearTimeout();
  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');
  err.crossDomain = true;
  this.callback(err);
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

Request.prototype.timeoutError = function(){
  var timeout = this._timeout;
  var err = new Error('timeout of ' + timeout + 'ms exceeded');
  err.timeout = timeout;
  this.callback(err);
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

Request.prototype.withCredentials = function(){
  this._withCredentials = true;
  return this;
};

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var query = this._query.join('&');
  var timeout = this._timeout;
  var data = this._formData || this._data;

  // store callback
  this._callback = fn || noop;

  // state change
  xhr.onreadystatechange = function(){
    if (4 != xhr.readyState) return;

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (0 == status) {
      if (self.timedout) return self.timeoutError();
      if (self.aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(e){
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    self.emit('progress', e);
  };
  if (this.hasListeners('progress')) {
    xhr.onprogress = handleProgress;
  }
  try {
    if (xhr.upload && this.hasListeners('progress')) {
      xhr.upload.onprogress = handleProgress;
    }
  } catch(e) {
    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
    // Reported here:
    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
  }

  // timeout
  if (timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self.timedout = true;
      self.abort();
    }, timeout);
  }

  // querystring
  if (query) {
    query = request.serializeObject(query);
    this.url += ~this.url.indexOf('?')
      ? '&' + query
      : '?' + query;
  }

  // initiate request
  xhr.open(this.method, this.url, true);

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
    // serialize stuff
    var contentType = this.getHeader('Content-Type');
    var serialize = request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;
    xhr.setRequestHeader(field, this.header[field]);
  }

  // send stuff
  this.emit('request', this);
  xhr.send(data);
  return this;
};

/**
 * Faux promise support
 *
 * @param {Function} fulfill
 * @param {Function} reject
 * @return {Request}
 */

Request.prototype.then = function (fulfill, reject) {
  return this.end(function(err, res) {
    err ? reject(err) : fulfill(res);
  });
}

/**
 * Expose `Request`.
 */

request.Request = Request;

/**
 * Issue a request:
 *
 * Examples:
 *
 *    request('GET', '/users').end(callback)
 *    request('/users').end(callback)
 *    request('/users', callback)
 *
 * @param {String} method
 * @param {String|Function} url or callback
 * @return {Request}
 * @api public
 */

function request(method, url) {
  // callback
  if ('function' == typeof url) {
    return new Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new Request('GET', method);
  }

  return new Request(method, url);
}

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.del = function(url, fn){
  var req = request('DELETE', url);
  if (fn) req.end(fn);
  return req;
};

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * Expose `request`.
 */

module.exports = request;

},{"emitter":31,"reduce":32}],31:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],32:[function(require,module,exports){

/**
 * Reduce `arr` with `fn`.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Mixed} initial
 *
 * TODO: combatible error handling?
 */

module.exports = function(arr, fn, initial){  
  var idx = 0;
  var len = arr.length;
  var curr = arguments.length == 3
    ? initial
    : arr[idx++];

  while (idx < len) {
    curr = fn.call(null, curr, arr[idx], ++idx, arr);
  }
  
  return curr;
};
},{}],33:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var xml2js;

  xml2js = require('../lib/xml2js');

  exports.stripBOM = function(str) {
    if (str[0] === '\uFEFF') {
      return str.substring(1);
    } else {
      return str;
    }
  };

}).call(this);

},{"../lib/xml2js":35}],34:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var prefixMatch;

  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

  exports.normalize = function(str) {
    return str.toLowerCase();
  };

  exports.firstCharLowerCase = function(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
  };

  exports.stripPrefix = function(str) {
    return str.replace(prefixMatch, '');
  };

  exports.parseNumbers = function(str) {
    if (!isNaN(str)) {
      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
    }
    return str;
  };

  exports.parseBooleans = function(str) {
    if (/^(?:true|false)$/i.test(str)) {
      str = str.toLowerCase() === 'true';
    }
    return str;
  };

}).call(this);

},{}],35:[function(require,module,exports){
// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, wrapCDATA,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sax = require('sax');

  events = require('events');

  builder = require('xmlbuilder');

  bom = require('./bom');

  processors = require('./processors');

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
  };

  processName = function(processors, processedName) {
    var i, len, process;
    for (i = 0, len = processors.length; i < len; i++) {
      process = processors[i];
      processedName = process(processedName);
    }
    return processedName;
  };

  requiresCDATA = function(entry) {
    return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
  };

  wrapCDATA = function(entry) {
    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
  };

  escapeCDATA = function(entry) {
    return entry.replace(']]>', ']]]]><![CDATA[>');
  };

  exports.processors = processors;

  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '@@',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      emptyTag: ''
    },
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      preserveChildrenOrder: false,
      childkey: '$$',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      rootName: 'root',
      xmldec: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': true
      },
      doctype: null,
      renderOpts: {
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
      },
      headless: false,
      chunkSize: 10000,
      emptyTag: '',
      cdata: false
    }
  };

  exports.ValidationError = (function(superClass) {
    extend(ValidationError, superClass);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  })(Error);

  exports.Builder = (function() {
    function Builder(opts) {
      var key, ref, value;
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
    }

    Builder.prototype.buildObject = function(rootObj) {
      var attrkey, charkey, render, rootElement, rootName;
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
        rootName = Object.keys(rootObj)[0];
        rootObj = rootObj[rootName];
      } else {
        rootName = this.options.rootName;
      }
      render = (function(_this) {
        return function(element, obj) {
          var attr, child, entry, index, key, value;
          if (typeof obj !== 'object') {
            if (_this.options.cdata && requiresCDATA(obj)) {
              element.raw(wrapCDATA(obj));
            } else {
              element.txt(obj);
            }
          } else {
            for (key in obj) {
              if (!hasProp.call(obj, key)) continue;
              child = obj[key];
              if (key === attrkey) {
                if (typeof child === "object") {
                  for (attr in child) {
                    value = child[attr];
                    element = element.att(attr, value);
                  }
                }
              } else if (key === charkey) {
                if (_this.options.cdata && requiresCDATA(child)) {
                  element = element.raw(wrapCDATA(child));
                } else {
                  element = element.txt(child);
                }
              } else if (Array.isArray(child)) {
                for (index in child) {
                  if (!hasProp.call(child, index)) continue;
                  entry = child[index];
                  if (typeof entry === 'string') {
                    if (_this.options.cdata && requiresCDATA(entry)) {
                      element = element.ele(key).raw(wrapCDATA(entry)).up();
                    } else {
                      element = element.ele(key, entry).up();
                    }
                  } else {
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else if (typeof child === "object") {
                element = render(element.ele(key), child).up();
              } else {
                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                  element = element.ele(key).raw(wrapCDATA(child)).up();
                } else {
                  element = element.ele(key, child.toString()).up();
                }
              }
            }
          }
          return element;
        };
      })(this);
      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
        headless: this.options.headless
      });
      return render(rootElement, rootObj).end(this.options.renderOpts);
    };

    return Builder;

  })();

  exports.Parser = (function(superClass) {
    extend(Parser, superClass);

    function Parser(opts) {
      this.parseString = bind(this.parseString, this);
      this.reset = bind(this.reset, this);
      this.assignOrPush = bind(this.assignOrPush, this);
      this.processAsync = bind(this.processAsync, this);
      var key, ref, value;
      if (!(this instanceof exports.Parser)) {
        return new exports.Parser(opts);
      }
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
      if (this.options.xmlns) {
        this.options.xmlnskey = this.options.attrkey + "ns";
      }
      if (this.options.normalizeTags) {
        if (!this.options.tagNameProcessors) {
          this.options.tagNameProcessors = [];
        }
        this.options.tagNameProcessors.unshift(processors.normalize);
      }
      this.reset();
    }

    Parser.prototype.processAsync = function() {
      var chunk;
      if (this.remaining.length <= this.options.chunkSize) {
        chunk = this.remaining;
        this.remaining = '';
        this.saxParser = this.saxParser.write(chunk);
        return this.saxParser.close();
      } else {
        chunk = this.remaining.substr(0, this.options.chunkSize);
        this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
        this.saxParser = this.saxParser.write(chunk);
        return setImmediate(this.processAsync);
      }
    };

    Parser.prototype.assignOrPush = function(obj, key, newValue) {
      if (!(key in obj)) {
        if (!this.options.explicitArray) {
          return obj[key] = newValue;
        } else {
          return obj[key] = [newValue];
        }
      } else {
        if (!(obj[key] instanceof Array)) {
          obj[key] = [obj[key]];
        }
        return obj[key].push(newValue);
      }
    };

    Parser.prototype.reset = function() {
      var attrkey, charkey, ontext, stack;
      this.removeAllListeners();
      this.saxParser = sax.parser(this.options.strict, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
      });
      this.saxParser.errThrown = false;
      this.saxParser.onerror = (function(_this) {
        return function(error) {
          _this.saxParser.resume();
          if (!_this.saxParser.errThrown) {
            _this.saxParser.errThrown = true;
            return _this.emit("error", error);
          }
        };
      })(this);
      this.saxParser.ended = false;
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = (function(_this) {
        return function(node) {
          var key, newValue, obj, processedKey, ref;
          obj = {};
          obj[charkey] = "";
          if (!_this.options.ignoreAttrs) {
            ref = node.attributes;
            for (key in ref) {
              if (!hasProp.call(ref, key)) continue;
              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                obj[attrkey] = {};
              }
              newValue = node.attributes[key];
              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
              if (_this.options.mergeAttrs) {
                _this.assignOrPush(obj, processedKey, newValue);
              } else {
                obj[attrkey][processedKey] = newValue;
              }
            }
          }
          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
          if (_this.options.xmlns) {
            obj[_this.options.xmlnskey] = {
              uri: node.uri,
              local: node.local
            };
          }
          return stack.push(obj);
        };
      })(this);
      this.saxParser.onclosetag = (function(_this) {
        return function() {
          var cdata, emptyStr, err, key, node, nodeName, obj, objClone, old, s, xpath;
          obj = stack.pop();
          nodeName = obj["#name"];
          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
            delete obj["#name"];
          }
          if (obj.cdata === true) {
            cdata = obj.cdata;
            delete obj.cdata;
          }
          s = stack[stack.length - 1];
          if (obj[charkey].match(/^\s*$/) && !cdata) {
            emptyStr = obj[charkey];
            delete obj[charkey];
          } else {
            if (_this.options.trim) {
              obj[charkey] = obj[charkey].trim();
            }
            if (_this.options.normalize) {
              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
            }
            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
              obj = obj[charkey];
            }
          }
          if (isEmpty(obj)) {
            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
          }
          if (_this.options.validator != null) {
            xpath = "/" + ((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = stack.length; i < len; i++) {
                node = stack[i];
                results.push(node["#name"]);
              }
              return results;
            })()).concat(nodeName).join("/");
            try {
              obj = _this.options.validator(xpath, s && s[nodeName], obj);
            } catch (_error) {
              err = _error;
              _this.emit("error", err);
            }
          }
          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
            if (!_this.options.preserveChildrenOrder) {
              node = {};
              if (_this.options.attrkey in obj) {
                node[_this.options.attrkey] = obj[_this.options.attrkey];
                delete obj[_this.options.attrkey];
              }
              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                node[_this.options.charkey] = obj[_this.options.charkey];
                delete obj[_this.options.charkey];
              }
              if (Object.getOwnPropertyNames(obj).length > 0) {
                node[_this.options.childkey] = obj;
              }
              obj = node;
            } else if (s) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              objClone = {};
              for (key in obj) {
                if (!hasProp.call(obj, key)) continue;
                objClone[key] = obj[key];
              }
              s[_this.options.childkey].push(objClone);
              delete obj["#name"];
              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                obj = obj[charkey];
              }
            }
          }
          if (stack.length > 0) {
            return _this.assignOrPush(s, nodeName, obj);
          } else {
            if (_this.options.explicitRoot) {
              old = obj;
              obj = {};
              obj[nodeName] = old;
            }
            _this.resultObject = obj;
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      ontext = (function(_this) {
        return function(text) {
          var charChild, s;
          s = stack[stack.length - 1];
          if (s) {
            s[charkey] += text;
            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && text.replace(/\\n/g, '').trim() !== '') {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              charChild = {
                '#name': '__text__'
              };
              charChild[charkey] = text;
              s[_this.options.childkey].push(charChild);
            }
            return s;
          }
        };
      })(this);
      this.saxParser.ontext = ontext;
      return this.saxParser.oncdata = (function(_this) {
        return function(text) {
          var s;
          s = ontext(text);
          if (s) {
            return s.cdata = true;
          }
        };
      })(this);
    };

    Parser.prototype.parseString = function(str, cb) {
      var err;
      if ((cb != null) && typeof cb === "function") {
        this.on("end", function(result) {
          this.reset();
          return cb(null, result);
        });
        this.on("error", function(err) {
          this.reset();
          return cb(err);
        });
      }
      str = str.toString();
      if (str.trim() === '') {
        this.emit("end", null);
        return true;
      }
      try {
        str = bom.stripBOM(str);
        if (this.options.async) {
          this.remaining = str;
          setImmediate(this.processAsync);
          this.saxParser;
        }
        return this.saxParser.write(str).close();
      } catch (_error) {
        err = _error;
        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
          this.emit('error', err);
          return this.saxParser.errThrown = true;
        } else if (this.saxParser.ended) {
          throw err;
        }
      }
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseString = function(str, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseString(str, cb);
  };

}).call(this);

},{"./bom":33,"./processors":34,"events":9,"sax":36,"xmlbuilder":53}],36:[function(require,module,exports){
(function (Buffer){
// wrapper for non-node envs
;(function (sax) {

sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
sax.SAXParser = SAXParser
sax.SAXStream = SAXStream
sax.createStream = createStream

// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
// since that's the earliest that a buffer overrun could occur.  This way, checks are
// as rare as required, but as often as necessary to ensure never crossing this bound.
// Furthermore, buffers are only tested at most once per write(), so passing a very
// large string into write() might have undesirable effects, but this is manageable by
// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
// edge case, result in creating at most one complete copy of the string passed in.
// Set to Infinity to have unlimited buffers.
sax.MAX_BUFFER_LENGTH = 64 * 1024

var buffers = [
  "comment", "sgmlDecl", "textNode", "tagName", "doctype",
  "procInstName", "procInstBody", "entity", "attribName",
  "attribValue", "cdata", "script"
]

sax.EVENTS = // for discoverability.
  [ "text"
  , "processinginstruction"
  , "sgmldeclaration"
  , "doctype"
  , "comment"
  , "attribute"
  , "opentag"
  , "closetag"
  , "opencdata"
  , "cdata"
  , "closecdata"
  , "error"
  , "end"
  , "ready"
  , "script"
  , "opennamespace"
  , "closenamespace"
  ]

function SAXParser (strict, opt) {
  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)

  var parser = this
  clearBuffers(parser)
  parser.q = parser.c = ""
  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
  parser.opt = opt || {}
  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
  parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase"
  parser.tags = []
  parser.closed = parser.closedRoot = parser.sawRoot = false
  parser.tag = parser.error = null
  parser.strict = !!strict
  parser.noscript = !!(strict || parser.opt.noscript)
  parser.state = S.BEGIN
  parser.strictEntities = parser.opt.strictEntities
  parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
  parser.attribList = []

  // namespaces form a prototype chain.
  // it always points at the current tag,
  // which protos to its parent tag.
  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)

  // mostly just for error reporting
  parser.trackPosition = parser.opt.position !== false
  if (parser.trackPosition) {
    parser.position = parser.line = parser.column = 0
  }
  emit(parser, "onready")
}

if (!Object.create) Object.create = function (o) {
  function f () { this.__proto__ = o }
  f.prototype = o
  return new f
}

if (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {
  return o.__proto__
}

if (!Object.keys) Object.keys = function (o) {
  var a = []
  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
  return a
}

function checkBufferLength (parser) {
  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    , maxActual = 0
  for (var i = 0, l = buffers.length; i < l; i ++) {
    var len = parser[buffers[i]].length
    if (len > maxAllowed) {
      // Text/cdata nodes can get big, and since they're buffered,
      // we can get here under normal conditions.
      // Avoid issues by emitting the text node now,
      // so at least it won't get any bigger.
      switch (buffers[i]) {
        case "textNode":
          closeText(parser)
        break

        case "cdata":
          emitNode(parser, "oncdata", parser.cdata)
          parser.cdata = ""
        break

        case "script":
          emitNode(parser, "onscript", parser.script)
          parser.script = ""
        break

        default:
          error(parser, "Max buffer length exceeded: "+buffers[i])
      }
    }
    maxActual = Math.max(maxActual, len)
  }
  // schedule the next check for the earliest possible buffer overrun.
  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)
                             + parser.position
}

function clearBuffers (parser) {
  for (var i = 0, l = buffers.length; i < l; i ++) {
    parser[buffers[i]] = ""
  }
}

function flushBuffers (parser) {
  closeText(parser)
  if (parser.cdata !== "") {
    emitNode(parser, "oncdata", parser.cdata)
    parser.cdata = ""
  }
  if (parser.script !== "") {
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }
}

SAXParser.prototype =
  { end: function () { end(this) }
  , write: write
  , resume: function () { this.error = null; return this }
  , close: function () { return this.write(null) }
  , flush: function () { flushBuffers(this) }
  }

try {
  var Stream = require("stream").Stream
} catch (ex) {
  var Stream = function () {}
}


var streamWraps = sax.EVENTS.filter(function (ev) {
  return ev !== "error" && ev !== "end"
})

function createStream (strict, opt) {
  return new SAXStream(strict, opt)
}

function SAXStream (strict, opt) {
  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)

  Stream.apply(this)

  this._parser = new SAXParser(strict, opt)
  this.writable = true
  this.readable = true


  var me = this

  this._parser.onend = function () {
    me.emit("end")
  }

  this._parser.onerror = function (er) {
    me.emit("error", er)

    // if didn't throw, then means error was handled.
    // go ahead and clear error, so we can write again.
    me._parser.error = null
  }

  this._decoder = null;

  streamWraps.forEach(function (ev) {
    Object.defineProperty(me, "on" + ev, {
      get: function () { return me._parser["on" + ev] },
      set: function (h) {
        if (!h) {
          me.removeAllListeners(ev)
          return me._parser["on"+ev] = h
        }
        me.on(ev, h)
      },
      enumerable: true,
      configurable: false
    })
  })
}

SAXStream.prototype = Object.create(Stream.prototype,
  { constructor: { value: SAXStream } })

SAXStream.prototype.write = function (data) {
  if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
    if (!this._decoder) {
      var SD = require('string_decoder').StringDecoder
      this._decoder = new SD('utf8')
    }
    data = this._decoder.write(data);
  }

  this._parser.write(data.toString())
  this.emit("data", data)
  return true
}

SAXStream.prototype.end = function (chunk) {
  if (chunk && chunk.length) this.write(chunk)
  this._parser.end()
  return true
}

SAXStream.prototype.on = function (ev, handler) {
  var me = this
  if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
    me._parser["on"+ev] = function () {
      var args = arguments.length === 1 ? [arguments[0]]
               : Array.apply(null, arguments)
      args.splice(0, 0, ev)
      me.emit.apply(me, args)
    }
  }

  return Stream.prototype.on.call(me, ev, handler)
}



// character classes and tokens
var whitespace = "\r\n\t "
  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  , number = "0124356789"
  , letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  // (Letter | "_" | ":")
  , quote = "'\""
  , entity = number+letter+"#"
  , attribEnd = whitespace + ">"
  , CDATA = "[CDATA["
  , DOCTYPE = "DOCTYPE"
  , XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
  , XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

// turn all the string character sets into character class objects.
whitespace = charClass(whitespace)
number = charClass(number)
letter = charClass(letter)

// http://www.w3.org/TR/REC-xml/#NT-NameStartChar
// This implementation works on strings, a single character at a time
// as such, it cannot ever support astral-plane characters (10000-EFFFF)
// without a significant breaking change to either this  parser, or the
// JavaScript language.  Implementation of an emoji-capable xml parser
// is left as an exercise for the reader.
var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

quote = charClass(quote)
entity = charClass(entity)
attribEnd = charClass(attribEnd)

function charClass (str) {
  return str.split("").reduce(function (s, c) {
    s[c] = true
    return s
  }, {})
}

function isRegExp (c) {
  return Object.prototype.toString.call(c) === '[object RegExp]'
}

function is (charclass, c) {
  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
}

function not (charclass, c) {
  return !is(charclass, c)
}

var S = 0
sax.STATE =
{ BEGIN                     : S++ // leading byte order mark or whitespace
, BEGIN_WHITESPACE          : S++ // leading whitespace
, TEXT                      : S++ // general stuff
, TEXT_ENTITY               : S++ // &amp and such.
, OPEN_WAKA                 : S++ // <
, SGML_DECL                 : S++ // <!BLARG
, SGML_DECL_QUOTED          : S++ // <!BLARG foo "bar
, DOCTYPE                   : S++ // <!DOCTYPE
, DOCTYPE_QUOTED            : S++ // <!DOCTYPE "//blah
, DOCTYPE_DTD               : S++ // <!DOCTYPE "//blah" [ ...
, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE "//blah" [ "foo
, COMMENT_STARTING          : S++ // <!-
, COMMENT                   : S++ // <!--
, COMMENT_ENDING            : S++ // <!-- blah -
, COMMENT_ENDED             : S++ // <!-- blah --
, CDATA                     : S++ // <![CDATA[ something
, CDATA_ENDING              : S++ // ]
, CDATA_ENDING_2            : S++ // ]]
, PROC_INST                 : S++ // <?hi
, PROC_INST_BODY            : S++ // <?hi there
, PROC_INST_ENDING          : S++ // <?hi "there" ?
, OPEN_TAG                  : S++ // <strong
, OPEN_TAG_SLASH            : S++ // <strong /
, ATTRIB                    : S++ // <a
, ATTRIB_NAME               : S++ // <a foo
, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _
, ATTRIB_VALUE              : S++ // <a foo=
, ATTRIB_VALUE_QUOTED       : S++ // <a foo="bar
, ATTRIB_VALUE_CLOSED       : S++ // <a foo="bar"
, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar
, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar="&quot;"
, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;
, CLOSE_TAG                 : S++ // </a
, CLOSE_TAG_SAW_WHITE       : S++ // </a   >
, SCRIPT                    : S++ // <script> ...
, SCRIPT_ENDING             : S++ // <script> ... <
}

sax.XML_ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
}

sax.ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
, "AElig" : 198
, "Aacute" : 193
, "Acirc" : 194
, "Agrave" : 192
, "Aring" : 197
, "Atilde" : 195
, "Auml" : 196
, "Ccedil" : 199
, "ETH" : 208
, "Eacute" : 201
, "Ecirc" : 202
, "Egrave" : 200
, "Euml" : 203
, "Iacute" : 205
, "Icirc" : 206
, "Igrave" : 204
, "Iuml" : 207
, "Ntilde" : 209
, "Oacute" : 211
, "Ocirc" : 212
, "Ograve" : 210
, "Oslash" : 216
, "Otilde" : 213
, "Ouml" : 214
, "THORN" : 222
, "Uacute" : 218
, "Ucirc" : 219
, "Ugrave" : 217
, "Uuml" : 220
, "Yacute" : 221
, "aacute" : 225
, "acirc" : 226
, "aelig" : 230
, "agrave" : 224
, "aring" : 229
, "atilde" : 227
, "auml" : 228
, "ccedil" : 231
, "eacute" : 233
, "ecirc" : 234
, "egrave" : 232
, "eth" : 240
, "euml" : 235
, "iacute" : 237
, "icirc" : 238
, "igrave" : 236
, "iuml" : 239
, "ntilde" : 241
, "oacute" : 243
, "ocirc" : 244
, "ograve" : 242
, "oslash" : 248
, "otilde" : 245
, "ouml" : 246
, "szlig" : 223
, "thorn" : 254
, "uacute" : 250
, "ucirc" : 251
, "ugrave" : 249
, "uuml" : 252
, "yacute" : 253
, "yuml" : 255
, "copy" : 169
, "reg" : 174
, "nbsp" : 160
, "iexcl" : 161
, "cent" : 162
, "pound" : 163
, "curren" : 164
, "yen" : 165
, "brvbar" : 166
, "sect" : 167
, "uml" : 168
, "ordf" : 170
, "laquo" : 171
, "not" : 172
, "shy" : 173
, "macr" : 175
, "deg" : 176
, "plusmn" : 177
, "sup1" : 185
, "sup2" : 178
, "sup3" : 179
, "acute" : 180
, "micro" : 181
, "para" : 182
, "middot" : 183
, "cedil" : 184
, "ordm" : 186
, "raquo" : 187
, "frac14" : 188
, "frac12" : 189
, "frac34" : 190
, "iquest" : 191
, "times" : 215
, "divide" : 247
, "OElig" : 338
, "oelig" : 339
, "Scaron" : 352
, "scaron" : 353
, "Yuml" : 376
, "fnof" : 402
, "circ" : 710
, "tilde" : 732
, "Alpha" : 913
, "Beta" : 914
, "Gamma" : 915
, "Delta" : 916
, "Epsilon" : 917
, "Zeta" : 918
, "Eta" : 919
, "Theta" : 920
, "Iota" : 921
, "Kappa" : 922
, "Lambda" : 923
, "Mu" : 924
, "Nu" : 925
, "Xi" : 926
, "Omicron" : 927
, "Pi" : 928
, "Rho" : 929
, "Sigma" : 931
, "Tau" : 932
, "Upsilon" : 933
, "Phi" : 934
, "Chi" : 935
, "Psi" : 936
, "Omega" : 937
, "alpha" : 945
, "beta" : 946
, "gamma" : 947
, "delta" : 948
, "epsilon" : 949
, "zeta" : 950
, "eta" : 951
, "theta" : 952
, "iota" : 953
, "kappa" : 954
, "lambda" : 955
, "mu" : 956
, "nu" : 957
, "xi" : 958
, "omicron" : 959
, "pi" : 960
, "rho" : 961
, "sigmaf" : 962
, "sigma" : 963
, "tau" : 964
, "upsilon" : 965
, "phi" : 966
, "chi" : 967
, "psi" : 968
, "omega" : 969
, "thetasym" : 977
, "upsih" : 978
, "piv" : 982
, "ensp" : 8194
, "emsp" : 8195
, "thinsp" : 8201
, "zwnj" : 8204
, "zwj" : 8205
, "lrm" : 8206
, "rlm" : 8207
, "ndash" : 8211
, "mdash" : 8212
, "lsquo" : 8216
, "rsquo" : 8217
, "sbquo" : 8218
, "ldquo" : 8220
, "rdquo" : 8221
, "bdquo" : 8222
, "dagger" : 8224
, "Dagger" : 8225
, "bull" : 8226
, "hellip" : 8230
, "permil" : 8240
, "prime" : 8242
, "Prime" : 8243
, "lsaquo" : 8249
, "rsaquo" : 8250
, "oline" : 8254
, "frasl" : 8260
, "euro" : 8364
, "image" : 8465
, "weierp" : 8472
, "real" : 8476
, "trade" : 8482
, "alefsym" : 8501
, "larr" : 8592
, "uarr" : 8593
, "rarr" : 8594
, "darr" : 8595
, "harr" : 8596
, "crarr" : 8629
, "lArr" : 8656
, "uArr" : 8657
, "rArr" : 8658
, "dArr" : 8659
, "hArr" : 8660
, "forall" : 8704
, "part" : 8706
, "exist" : 8707
, "empty" : 8709
, "nabla" : 8711
, "isin" : 8712
, "notin" : 8713
, "ni" : 8715
, "prod" : 8719
, "sum" : 8721
, "minus" : 8722
, "lowast" : 8727
, "radic" : 8730
, "prop" : 8733
, "infin" : 8734
, "ang" : 8736
, "and" : 8743
, "or" : 8744
, "cap" : 8745
, "cup" : 8746
, "int" : 8747
, "there4" : 8756
, "sim" : 8764
, "cong" : 8773
, "asymp" : 8776
, "ne" : 8800
, "equiv" : 8801
, "le" : 8804
, "ge" : 8805
, "sub" : 8834
, "sup" : 8835
, "nsub" : 8836
, "sube" : 8838
, "supe" : 8839
, "oplus" : 8853
, "otimes" : 8855
, "perp" : 8869
, "sdot" : 8901
, "lceil" : 8968
, "rceil" : 8969
, "lfloor" : 8970
, "rfloor" : 8971
, "lang" : 9001
, "rang" : 9002
, "loz" : 9674
, "spades" : 9824
, "clubs" : 9827
, "hearts" : 9829
, "diams" : 9830
}

Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
})

for (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S

// shorthand
S = sax.STATE

function emit (parser, event, data) {
  parser[event] && parser[event](data)
}

function emitNode (parser, nodeType, data) {
  if (parser.textNode) closeText(parser)
  emit(parser, nodeType, data)
}

function closeText (parser) {
  parser.textNode = textopts(parser.opt, parser.textNode)
  if (parser.textNode) emit(parser, "ontext", parser.textNode)
  parser.textNode = ""
}

function textopts (opt, text) {
  if (opt.trim) text = text.trim()
  if (opt.normalize) text = text.replace(/\s+/g, " ")
  return text
}

function error (parser, er) {
  closeText(parser)
  if (parser.trackPosition) {
    er += "\nLine: "+parser.line+
          "\nColumn: "+parser.column+
          "\nChar: "+parser.c
  }
  er = new Error(er)
  parser.error = er
  emit(parser, "onerror", er)
  return parser
}

function end (parser) {
  if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag")
  if ((parser.state !== S.BEGIN) &&
      (parser.state !== S.BEGIN_WHITESPACE) &&
      (parser.state !== S.TEXT))
    error(parser, "Unexpected end")
  closeText(parser)
  parser.c = ""
  parser.closed = true
  emit(parser, "onend")
  SAXParser.call(parser, parser.strict, parser.opt)
  return parser
}

function strictFail (parser, message) {
  if (typeof parser !== 'object' || !(parser instanceof SAXParser))
    throw new Error('bad call to strictFail');
  if (parser.strict) error(parser, message)
}

function newTag (parser) {
  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
  var parent = parser.tags[parser.tags.length - 1] || parser
    , tag = parser.tag = { name : parser.tagName, attributes : {} }

  // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
  if (parser.opt.xmlns) tag.ns = parent.ns
  parser.attribList.length = 0
}

function qname (name, attribute) {
  var i = name.indexOf(":")
    , qualName = i < 0 ? [ "", name ] : name.split(":")
    , prefix = qualName[0]
    , local = qualName[1]

  // <x "xmlns"="http://foo">
  if (attribute && name === "xmlns") {
    prefix = "xmlns"
    local = ""
  }

  return { prefix: prefix, local: local }
}

function attrib (parser) {
  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()

  if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
    return parser.attribName = parser.attribValue = ""
  }

  if (parser.opt.xmlns) {
    var qn = qname(parser.attribName, true)
      , prefix = qn.prefix
      , local = qn.local

    if (prefix === "xmlns") {
      // namespace binding attribute; push the binding into scope
      if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
        strictFail( parser
                  , "xml: prefix must be bound to " + XML_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
        strictFail( parser
                  , "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else {
        var tag = parser.tag
          , parent = parser.tags[parser.tags.length - 1] || parser
        if (tag.ns === parent.ns) {
          tag.ns = Object.create(parent.ns)
        }
        tag.ns[local] = parser.attribValue
      }
    }

    // defer onattribute events until all attributes have been seen
    // so any new bindings can take effect; preserve attribute order
    // so deferred events can be emitted in document order
    parser.attribList.push([parser.attribName, parser.attribValue])
  } else {
    // in non-xmlns mode, we can emit the event right away
    parser.tag.attributes[parser.attribName] = parser.attribValue
    emitNode( parser
            , "onattribute"
            , { name: parser.attribName
              , value: parser.attribValue } )
  }

  parser.attribName = parser.attribValue = ""
}

function openTag (parser, selfClosing) {
  if (parser.opt.xmlns) {
    // emit namespace binding events
    var tag = parser.tag

    // add namespace info to tag
    var qn = qname(parser.tagName)
    tag.prefix = qn.prefix
    tag.local = qn.local
    tag.uri = tag.ns[qn.prefix] || ""

    if (tag.prefix && !tag.uri) {
      strictFail(parser, "Unbound namespace prefix: "
                       + JSON.stringify(parser.tagName))
      tag.uri = qn.prefix
    }

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (tag.ns && parent.ns !== tag.ns) {
      Object.keys(tag.ns).forEach(function (p) {
        emitNode( parser
                , "onopennamespace"
                , { prefix: p , uri: tag.ns[p] } )
      })
    }

    // handle deferred onattribute events
    // Note: do not apply default ns to attributes:
    //   http://www.w3.org/TR/REC-xml-names/#defaulting
    for (var i = 0, l = parser.attribList.length; i < l; i ++) {
      var nv = parser.attribList[i]
      var name = nv[0]
        , value = nv[1]
        , qualName = qname(name, true)
        , prefix = qualName.prefix
        , local = qualName.local
        , uri = prefix == "" ? "" : (tag.ns[prefix] || "")
        , a = { name: name
              , value: value
              , prefix: prefix
              , local: local
              , uri: uri
              }

      // if there's any attributes with an undefined namespace,
      // then fail on them now.
      if (prefix && prefix != "xmlns" && !uri) {
        strictFail(parser, "Unbound namespace prefix: "
                         + JSON.stringify(prefix))
        a.uri = prefix
      }
      parser.tag.attributes[name] = a
      emitNode(parser, "onattribute", a)
    }
    parser.attribList.length = 0
  }

  parser.tag.isSelfClosing = !!selfClosing

  // process the tag
  parser.sawRoot = true
  parser.tags.push(parser.tag)
  emitNode(parser, "onopentag", parser.tag)
  if (!selfClosing) {
    // special case for <script> in non-strict mode.
    if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
      parser.state = S.SCRIPT
    } else {
      parser.state = S.TEXT
    }
    parser.tag = null
    parser.tagName = ""
  }
  parser.attribName = parser.attribValue = ""
  parser.attribList.length = 0
}

function closeTag (parser) {
  if (!parser.tagName) {
    strictFail(parser, "Weird empty close tag.")
    parser.textNode += "</>"
    parser.state = S.TEXT
    return
  }

  if (parser.script) {
    if (parser.tagName !== "script") {
      parser.script += "</" + parser.tagName + ">"
      parser.tagName = ""
      parser.state = S.SCRIPT
      return
    }
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }

  // first make sure that the closing tag actually exists.
  // <a><b></c></b></a> will close everything, otherwise.
  var t = parser.tags.length
  var tagName = parser.tagName
  if (!parser.strict) tagName = tagName[parser.looseCase]()
  var closeTo = tagName
  while (t --) {
    var close = parser.tags[t]
    if (close.name !== closeTo) {
      // fail the first time in strict mode
      strictFail(parser, "Unexpected close tag")
    } else break
  }

  // didn't find it.  we already failed for strict, so just abort.
  if (t < 0) {
    strictFail(parser, "Unmatched closing tag: "+parser.tagName)
    parser.textNode += "</" + parser.tagName + ">"
    parser.state = S.TEXT
    return
  }
  parser.tagName = tagName
  var s = parser.tags.length
  while (s --> t) {
    var tag = parser.tag = parser.tags.pop()
    parser.tagName = parser.tag.name
    emitNode(parser, "onclosetag", parser.tagName)

    var x = {}
    for (var i in tag.ns) x[i] = tag.ns[i]

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (parser.opt.xmlns && tag.ns !== parent.ns) {
      // remove namespace bindings introduced by tag
      Object.keys(tag.ns).forEach(function (p) {
        var n = tag.ns[p]
        emitNode(parser, "onclosenamespace", { prefix: p, uri: n })
      })
    }
  }
  if (t === 0) parser.closedRoot = true
  parser.tagName = parser.attribValue = parser.attribName = ""
  parser.attribList.length = 0
  parser.state = S.TEXT
}

function parseEntity (parser) {
  var entity = parser.entity
    , entityLC = entity.toLowerCase()
    , num
    , numStr = ""
  if (parser.ENTITIES[entity])
    return parser.ENTITIES[entity]
  if (parser.ENTITIES[entityLC])
    return parser.ENTITIES[entityLC]
  entity = entityLC
  if (entity.charAt(0) === "#") {
    if (entity.charAt(1) === "x") {
      entity = entity.slice(2)
      num = parseInt(entity, 16)
      numStr = num.toString(16)
    } else {
      entity = entity.slice(1)
      num = parseInt(entity, 10)
      numStr = num.toString(10)
    }
  }
  entity = entity.replace(/^0+/, "")
  if (numStr.toLowerCase() !== entity) {
    strictFail(parser, "Invalid character entity")
    return "&"+parser.entity + ";"
  }

  return String.fromCodePoint(num)
}

function write (chunk) {
  var parser = this
  if (this.error) throw this.error
  if (parser.closed) return error(parser,
    "Cannot write after close. Assign an onready handler.")
  if (chunk === null) return end(parser)
  var i = 0, c = ""
  while (parser.c = c = chunk.charAt(i++)) {
    if (parser.trackPosition) {
      parser.position ++
      if (c === "\n") {
        parser.line ++
        parser.column = 0
      } else parser.column ++
    }
    switch (parser.state) {

      case S.BEGIN:
        parser.state = S.BEGIN_WHITESPACE
        if (c === "\uFEFF") {
          continue;
        }
      // no continue - fall through

      case S.BEGIN_WHITESPACE:
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else if (not(whitespace,c)) {
          // have to process this as a text node.
          // weird, but happens.
          strictFail(parser, "Non-whitespace before first tag.")
          parser.textNode = c
          parser.state = S.TEXT
        }
      continue

      case S.TEXT:
        if (parser.sawRoot && !parser.closedRoot) {
          var starti = i-1
          while (c && c!=="<" && c!=="&") {
            c = chunk.charAt(i++)
            if (c && parser.trackPosition) {
              parser.position ++
              if (c === "\n") {
                parser.line ++
                parser.column = 0
              } else parser.column ++
            }
          }
          parser.textNode += chunk.substring(starti, i-1)
        }
        if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else {
          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))
            strictFail(parser, "Text data outside of root node.")
          if (c === "&") parser.state = S.TEXT_ENTITY
          else parser.textNode += c
        }
      continue

      case S.SCRIPT:
        // only non-strict
        if (c === "<") {
          parser.state = S.SCRIPT_ENDING
        } else parser.script += c
      continue

      case S.SCRIPT_ENDING:
        if (c === "/") {
          parser.state = S.CLOSE_TAG
        } else {
          parser.script += "<" + c
          parser.state = S.SCRIPT
        }
      continue

      case S.OPEN_WAKA:
        // either a /, ?, !, or text is coming next.
        if (c === "!") {
          parser.state = S.SGML_DECL
          parser.sgmlDecl = ""
        } else if (is(whitespace, c)) {
          // wait for it...
        } else if (is(nameStart,c)) {
          parser.state = S.OPEN_TAG
          parser.tagName = c
        } else if (c === "/") {
          parser.state = S.CLOSE_TAG
          parser.tagName = ""
        } else if (c === "?") {
          parser.state = S.PROC_INST
          parser.procInstName = parser.procInstBody = ""
        } else {
          strictFail(parser, "Unencoded <")
          // if there was some whitespace, then add that in.
          if (parser.startTagPosition + 1 < parser.position) {
            var pad = parser.position - parser.startTagPosition
            c = new Array(pad).join(" ") + c
          }
          parser.textNode += "<" + c
          parser.state = S.TEXT
        }
      continue

      case S.SGML_DECL:
        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {
          emitNode(parser, "onopencdata")
          parser.state = S.CDATA
          parser.sgmlDecl = ""
          parser.cdata = ""
        } else if (parser.sgmlDecl+c === "--") {
          parser.state = S.COMMENT
          parser.comment = ""
          parser.sgmlDecl = ""
        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {
          parser.state = S.DOCTYPE
          if (parser.doctype || parser.sawRoot) strictFail(parser,
            "Inappropriately located doctype declaration")
          parser.doctype = ""
          parser.sgmlDecl = ""
        } else if (c === ">") {
          emitNode(parser, "onsgmldeclaration", parser.sgmlDecl)
          parser.sgmlDecl = ""
          parser.state = S.TEXT
        } else if (is(quote, c)) {
          parser.state = S.SGML_DECL_QUOTED
          parser.sgmlDecl += c
        } else parser.sgmlDecl += c
      continue

      case S.SGML_DECL_QUOTED:
        if (c === parser.q) {
          parser.state = S.SGML_DECL
          parser.q = ""
        }
        parser.sgmlDecl += c
      continue

      case S.DOCTYPE:
        if (c === ">") {
          parser.state = S.TEXT
          emitNode(parser, "ondoctype", parser.doctype)
          parser.doctype = true // just remember that we saw it.
        } else {
          parser.doctype += c
          if (c === "[") parser.state = S.DOCTYPE_DTD
          else if (is(quote, c)) {
            parser.state = S.DOCTYPE_QUOTED
            parser.q = c
          }
        }
      continue

      case S.DOCTYPE_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.q = ""
          parser.state = S.DOCTYPE
        }
      continue

      case S.DOCTYPE_DTD:
        parser.doctype += c
        if (c === "]") parser.state = S.DOCTYPE
        else if (is(quote,c)) {
          parser.state = S.DOCTYPE_DTD_QUOTED
          parser.q = c
        }
      continue

      case S.DOCTYPE_DTD_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.state = S.DOCTYPE_DTD
          parser.q = ""
        }
      continue

      case S.COMMENT:
        if (c === "-") parser.state = S.COMMENT_ENDING
        else parser.comment += c
      continue

      case S.COMMENT_ENDING:
        if (c === "-") {
          parser.state = S.COMMENT_ENDED
          parser.comment = textopts(parser.opt, parser.comment)
          if (parser.comment) emitNode(parser, "oncomment", parser.comment)
          parser.comment = ""
        } else {
          parser.comment += "-" + c
          parser.state = S.COMMENT
        }
      continue

      case S.COMMENT_ENDED:
        if (c !== ">") {
          strictFail(parser, "Malformed comment")
          // allow <!-- blah -- bloo --> in non-strict mode,
          // which is a comment of " blah -- bloo "
          parser.comment += "--" + c
          parser.state = S.COMMENT
        } else parser.state = S.TEXT
      continue

      case S.CDATA:
        if (c === "]") parser.state = S.CDATA_ENDING
        else parser.cdata += c
      continue

      case S.CDATA_ENDING:
        if (c === "]") parser.state = S.CDATA_ENDING_2
        else {
          parser.cdata += "]" + c
          parser.state = S.CDATA
        }
      continue

      case S.CDATA_ENDING_2:
        if (c === ">") {
          if (parser.cdata) emitNode(parser, "oncdata", parser.cdata)
          emitNode(parser, "onclosecdata")
          parser.cdata = ""
          parser.state = S.TEXT
        } else if (c === "]") {
          parser.cdata += "]"
        } else {
          parser.cdata += "]]" + c
          parser.state = S.CDATA
        }
      continue

      case S.PROC_INST:
        if (c === "?") parser.state = S.PROC_INST_ENDING
        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY
        else parser.procInstName += c
      continue

      case S.PROC_INST_BODY:
        if (!parser.procInstBody && is(whitespace, c)) continue
        else if (c === "?") parser.state = S.PROC_INST_ENDING
        else parser.procInstBody += c
      continue

      case S.PROC_INST_ENDING:
        if (c === ">") {
          emitNode(parser, "onprocessinginstruction", {
            name : parser.procInstName,
            body : parser.procInstBody
          })
          parser.procInstName = parser.procInstBody = ""
          parser.state = S.TEXT
        } else {
          parser.procInstBody += "?" + c
          parser.state = S.PROC_INST_BODY
        }
      continue

      case S.OPEN_TAG:
        if (is(nameBody, c)) parser.tagName += c
        else {
          newTag(parser)
          if (c === ">") openTag(parser)
          else if (c === "/") parser.state = S.OPEN_TAG_SLASH
          else {
            if (not(whitespace, c)) strictFail(
              parser, "Invalid character in tag name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.OPEN_TAG_SLASH:
        if (c === ">") {
          openTag(parser, true)
          closeTag(parser)
        } else {
          strictFail(parser, "Forward-slash in opening tag not followed by >")
          parser.state = S.ATTRIB
        }
      continue

      case S.ATTRIB:
        // haven't read the attribute name yet.
        if (is(whitespace, c)) continue
        else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (c === ">") {
          strictFail(parser, "Attribute without value")
          parser.attribValue = parser.attribName
          attrib(parser)
          openTag(parser)
        }
        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE
        else if (is(nameBody, c)) parser.attribName += c
        else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME_SAW_WHITE:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (is(whitespace, c)) continue
        else {
          strictFail(parser, "Attribute without value")
          parser.tag.attributes[parser.attribName] = ""
          parser.attribValue = ""
          emitNode(parser, "onattribute",
                   { name : parser.attribName, value : "" })
          parser.attribName = ""
          if (c === ">") openTag(parser)
          else if (is(nameStart, c)) {
            parser.attribName = c
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, "Invalid attribute name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.ATTRIB_VALUE:
        if (is(whitespace, c)) continue
        else if (is(quote, c)) {
          parser.q = c
          parser.state = S.ATTRIB_VALUE_QUOTED
        } else {
          strictFail(parser, "Unquoted attribute value")
          parser.state = S.ATTRIB_VALUE_UNQUOTED
          parser.attribValue = c
        }
      continue

      case S.ATTRIB_VALUE_QUOTED:
        if (c !== parser.q) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        parser.q = ""
        parser.state = S.ATTRIB_VALUE_CLOSED
      continue

      case S.ATTRIB_VALUE_CLOSED:
        if (is(whitespace, c)) {
          parser.state = S.ATTRIB
        } else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          strictFail(parser, "No whitespace between attributes")
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_VALUE_UNQUOTED:
        if (not(attribEnd,c)) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        if (c === ">") openTag(parser)
        else parser.state = S.ATTRIB
      continue

      case S.CLOSE_TAG:
        if (!parser.tagName) {
          if (is(whitespace, c)) continue
          else if (not(nameStart, c)) {
            if (parser.script) {
              parser.script += "</" + c
              parser.state = S.SCRIPT
            } else {
              strictFail(parser, "Invalid tagname in closing tag.")
            }
          } else parser.tagName = c
        }
        else if (c === ">") closeTag(parser)
        else if (is(nameBody, c)) parser.tagName += c
        else if (parser.script) {
          parser.script += "</" + parser.tagName
          parser.tagName = ""
          parser.state = S.SCRIPT
        } else {
          if (not(whitespace, c)) strictFail(parser,
            "Invalid tagname in closing tag")
          parser.state = S.CLOSE_TAG_SAW_WHITE
        }
      continue

      case S.CLOSE_TAG_SAW_WHITE:
        if (is(whitespace, c)) continue
        if (c === ">") closeTag(parser)
        else strictFail(parser, "Invalid characters in closing tag")
      continue

      case S.TEXT_ENTITY:
      case S.ATTRIB_VALUE_ENTITY_Q:
      case S.ATTRIB_VALUE_ENTITY_U:
        switch(parser.state) {
          case S.TEXT_ENTITY:
            var returnState = S.TEXT, buffer = "textNode"
          break

          case S.ATTRIB_VALUE_ENTITY_Q:
            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue"
          break

          case S.ATTRIB_VALUE_ENTITY_U:
            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue"
          break
        }
        if (c === ";") {
          parser[buffer] += parseEntity(parser)
          parser.entity = ""
          parser.state = returnState
        }
        else if (is(entity, c)) parser.entity += c
        else {
          strictFail(parser, "Invalid character entity")
          parser[buffer] += "&" + parser.entity + c
          parser.entity = ""
          parser.state = returnState
        }
      continue

      default:
        throw new Error(parser, "Unknown state: " + parser.state)
    }
  } // while
  // cdata blocks can get very big under normal conditions. emit and move on.
  // if (parser.state === S.CDATA && parser.cdata) {
  //   emitNode(parser, "oncdata", parser.cdata)
  //   parser.cdata = ""
  // }
  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)
  return parser
}

/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
if (!String.fromCodePoint) {
        (function() {
                var stringFromCharCode = String.fromCharCode;
                var floor = Math.floor;
                var fromCodePoint = function() {
                        var MAX_SIZE = 0x4000;
                        var codeUnits = [];
                        var highSurrogate;
                        var lowSurrogate;
                        var index = -1;
                        var length = arguments.length;
                        if (!length) {
                                return '';
                        }
                        var result = '';
                        while (++index < length) {
                                var codePoint = Number(arguments[index]);
                                if (
                                        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                                        codePoint < 0 || // not a valid Unicode code point
                                        codePoint > 0x10FFFF || // not a valid Unicode code point
                                        floor(codePoint) != codePoint // not an integer
                                ) {
                                        throw RangeError('Invalid code point: ' + codePoint);
                                }
                                if (codePoint <= 0xFFFF) { // BMP code point
                                        codeUnits.push(codePoint);
                                } else { // Astral code point; split in surrogate halves
                                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                                        codePoint -= 0x10000;
                                        highSurrogate = (codePoint >> 10) + 0xD800;
                                        lowSurrogate = (codePoint % 0x400) + 0xDC00;
                                        codeUnits.push(highSurrogate, lowSurrogate);
                                }
                                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                                        result += stringFromCharCode.apply(null, codeUnits);
                                        codeUnits.length = 0;
                                }
                        }
                        return result;
                };
                if (Object.defineProperty) {
                        Object.defineProperty(String, 'fromCodePoint', {
                                'value': fromCodePoint,
                                'configurable': true,
                                'writable': true
                        });
                } else {
                        String.fromCodePoint = fromCodePoint;
                }
        }());
}

})(typeof exports === "undefined" ? sax = {} : exports);

}).call(this,require("buffer").Buffer)
},{"buffer":5,"stream":26,"string_decoder":27}],37:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, create;

  create = require('lodash/object/create');

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return create(XMLAttribute.prototype, this);
    };

    XMLAttribute.prototype.toString = function(options, level) {
      return ' ' + this.name + '="' + this.value + '"';
    };

    return XMLAttribute;

  })();

}).call(this);

},{"lodash/object/create":107}],38:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

  XMLStringifier = require('./XMLStringifier');

  XMLDeclaration = require('./XMLDeclaration');

  XMLDocType = require('./XMLDocType');

  XMLElement = require('./XMLElement');

  module.exports = XMLBuilder = (function() {
    function XMLBuilder(name, options) {
      var root, temp;
      if (name == null) {
        throw new Error("Root element needs a name");
      }
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      temp = new XMLElement(this, 'doc');
      root = temp.element(name);
      root.isRoot = true;
      root.documentObject = this;
      this.rootObject = root;
      if (!options.headless) {
        root.declaration(options);
        if ((options.pubID != null) || (options.sysID != null)) {
          root.doctype(options);
        }
      }
    }

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return this.toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      r = '';
      if (this.xmldec != null) {
        r += this.xmldec.toString(options);
      }
      if (this.doctype != null) {
        r += this.doctype.toString(options);
      }
      r += this.rootObject.toString(options);
      if (pretty && r.slice(-newline.length) === newline) {
        r = r.slice(0, -newline.length);
      }
      return r;
    };

    return XMLBuilder;

  })();

}).call(this);

},{"./XMLDeclaration":45,"./XMLDocType":46,"./XMLElement":47,"./XMLStringifier":51}],39:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return create(XMLCData.prototype, this);
    };

    XMLCData.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<![CDATA[' + this.text + ']]>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLCData;

  })(XMLNode);

}).call(this);

},{"./XMLNode":48,"lodash/object/create":107}],40:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLComment, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return create(XMLComment.prototype, this);
    };

    XMLComment.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!-- ' + this.text + ' -->';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLComment;

  })(XMLNode);

}).call(this);

},{"./XMLNode":48,"lodash/object/create":107}],41:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDAttList, create;

  create = require('lodash/object/create');

  module.exports = XMLDTDAttList = (function() {
    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      this.stringify = parent.stringify;
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.clone = function() {
      return create(XMLDTDAttList.prototype, this);
    };

    XMLDTDAttList.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
      if (this.defaultValueType !== '#DEFAULT') {
        r += ' ' + this.defaultValueType;
      }
      if (this.defaultValue) {
        r += ' "' + this.defaultValue + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDAttList;

  })();

}).call(this);

},{"lodash/object/create":107}],42:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDElement, create, isArray;

  create = require('lodash/object/create');

  isArray = require('lodash/lang/isArray');

  module.exports = XMLDTDElement = (function() {
    function XMLDTDElement(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.clone = function() {
      return create(XMLDTDElement.prototype, this);
    };

    XMLDTDElement.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDElement;

  })();

}).call(this);

},{"lodash/lang/isArray":99,"lodash/object/create":107}],43:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDEntity, create, isObject;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  module.exports = XMLDTDEntity = (function() {
    function XMLDTDEntity(parent, pe, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.clone = function() {
      return create(XMLDTDEntity.prototype, this);
    };

    XMLDTDEntity.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ENTITY';
      if (this.pe) {
        r += ' %';
      }
      r += ' ' + this.name;
      if (this.value) {
        r += ' "' + this.value + '"';
      } else {
        if (this.pubID && this.sysID) {
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
        } else if (this.sysID) {
          r += ' SYSTEM "' + this.sysID + '"';
        }
        if (this.nData) {
          r += ' NDATA ' + this.nData;
        }
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDEntity;

  })();

}).call(this);

},{"lodash/lang/isObject":103,"lodash/object/create":107}],44:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDNotation, create;

  create = require('lodash/object/create');

  module.exports = XMLDTDNotation = (function() {
    function XMLDTDNotation(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.clone = function() {
      return create(XMLDTDNotation.prototype, this);
    };

    XMLDTDNotation.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!NOTATION ' + this.name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.pubID) {
        r += ' PUBLIC "' + this.pubID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDNotation;

  })();

}).call(this);

},{"lodash/object/create":107}],45:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDeclaration, XMLNode, create, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  XMLNode = require('./XMLNode');

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      if (version != null) {
        this.version = this.stringify.xmlVersion(version);
      }
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.clone = function() {
      return create(XMLDeclaration.prototype, this);
    };

    XMLDeclaration.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?xml';
      if (this.version != null) {
        r += ' version="' + this.version + '"';
      }
      if (this.encoding != null) {
        r += ' encoding="' + this.encoding + '"';
      }
      if (this.standalone != null) {
        r += ' standalone="' + this.standalone + '"';
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);

},{"./XMLNode":48,"lodash/lang/isObject":103,"lodash/object/create":107}],46:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  XMLCData = require('./XMLCData');

  XMLComment = require('./XMLComment');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDNotation = require('./XMLDTDNotation');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLDocType = (function() {
    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      this.documentObject = parent;
      this.stringify = this.documentObject.stringify;
      this.children = [];
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.clone = function() {
      return create(XMLDocType.prototype, this);
    };

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.instruction = function(target, value) {
      var child;
      child = new XMLProcessingInstruction(this, target, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.root = function() {
      return this.documentObject.root();
    };

    XMLDocType.prototype.document = function() {
      return this.documentObject;
    };

    XMLDocType.prototype.toString = function(options, level) {
      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!DOCTYPE ' + this.root().name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      if (this.children.length > 0) {
        r += ' [';
        if (pretty) {
          r += newline;
        }
        ref3 = this.children;
        for (i = 0, len = ref3.length; i < len; i++) {
          child = ref3[i];
          r += child.toString(options, level + 1);
        }
        r += ']';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocType.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocType.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root();
    };

    XMLDocType.prototype.doc = function() {
      return this.document();
    };

    return XMLDocType;

  })();

}).call(this);

},{"./XMLCData":39,"./XMLComment":40,"./XMLDTDAttList":41,"./XMLDTDElement":42,"./XMLDTDEntity":43,"./XMLDTDNotation":44,"./XMLProcessingInstruction":49,"lodash/lang/isObject":103,"lodash/object/create":107}],47:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isArray, isFunction, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  isArray = require('lodash/lang/isArray');

  isFunction = require('lodash/lang/isFunction');

  every = require('lodash/collection/every');

  XMLNode = require('./XMLNode');

  XMLAttribute = require('./XMLAttribute');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.children = [];
      this.instructions = [];
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, i, len, pi, ref, ref1;
      clonedSelf = create(XMLElement.prototype, this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref = this.attributes;
      for (attName in ref) {
        if (!hasProp.call(ref, attName)) continue;
        att = ref[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.instructions = [];
      ref1 = this.instructions;
      for (i = 0, len = ref1.length; i < len; i++) {
        pi = ref1[i];
        clonedSelf.instructions.push(pi.clone());
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, instruction, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.instructions.push(instruction);
      }
      return this;
    };

    XMLElement.prototype.toString = function(options, level) {
      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      ref3 = this.instructions;
      for (i = 0, len = ref3.length; i < len; i++) {
        instruction = ref3[i];
        r += instruction.toString(options, level + 1);
      }
      if (pretty) {
        r += space;
      }
      r += '<' + this.name;
      ref4 = this.attributes;
      for (name in ref4) {
        if (!hasProp.call(ref4, name)) continue;
        att = ref4[name];
        r += att.toString(options);
      }
      if (this.children.length === 0 || every(this.children, function(e) {
        return e.value === '';
      })) {
        r += '/>';
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        ref5 = this.children;
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          child = ref5[j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);

},{"./XMLAttribute":37,"./XMLNode":48,"./XMLProcessingInstruction":49,"lodash/collection/every":55,"lodash/lang/isArray":99,"lodash/lang/isFunction":101,"lodash/lang/isObject":103,"lodash/object/create":107}],48:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isArray, isEmpty, isFunction, isObject,
    hasProp = {}.hasOwnProperty;

  isObject = require('lodash/lang/isObject');

  isArray = require('lodash/lang/isArray');

  isFunction = require('lodash/lang/isFunction');

  isEmpty = require('lodash/lang/isEmpty');

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      this.options = this.parent.options;
      this.stringify = this.parent.stringify;
      if (XMLElement === null) {
        XMLElement = require('./XMLElement');
        XMLCData = require('./XMLCData');
        XMLComment = require('./XMLComment');
        XMLDeclaration = require('./XMLDeclaration');
        XMLDocType = require('./XMLDocType');
        XMLRaw = require('./XMLRaw');
        XMLText = require('./XMLText');
      }
    }

    XMLNode.prototype.clone = function() {
      throw new Error("Cannot clone generic XMLNode");
    };

    XMLNode.prototype.element = function(name, attributes, text) {
      var item, j, key, lastChild, len, ref, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) continue;
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
          } else if (isObject(val)) {
            if (!this.options.ignoreDecorators && this.stringify.convertListKey && key.indexOf(this.stringify.convertListKey) === 0 && isArray(val)) {
              lastChild = this.element(val);
            } else {
              lastChild = this.element(key);
              lastChild.element(val);
            }
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref;
      if (name != null) {
        name = name.valueOf();
      }
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      doc.xmldec = xmldec;
      return doc.root();
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var doc, doctype;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      doc.doctype = doctype;
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLNode.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLNode.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    return XMLNode;

  })();

}).call(this);

},{"./XMLCData":39,"./XMLComment":40,"./XMLDeclaration":45,"./XMLDocType":46,"./XMLElement":47,"./XMLRaw":50,"./XMLText":52,"lodash/lang/isArray":99,"lodash/lang/isEmpty":100,"lodash/lang/isFunction":101,"lodash/lang/isObject":103}],49:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLProcessingInstruction, create;

  create = require('lodash/object/create');

  module.exports = XMLProcessingInstruction = (function() {
    function XMLProcessingInstruction(parent, target, value) {
      this.stringify = parent.stringify;
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return create(XMLProcessingInstruction.prototype, this);
    };

    XMLProcessingInstruction.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?';
      r += this.target;
      if (this.value) {
        r += ' ' + this.value;
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLProcessingInstruction;

  })();

}).call(this);

},{"lodash/object/create":107}],50:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLRaw, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return create(XMLRaw.prototype, this);
    };

    XMLRaw.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);

},{"./XMLNode":48,"lodash/object/create":107}],51:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
      ref = (options != null ? options.stringify : void 0) || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      if (val.match(/]]>/)) {
        throw new Error("Invalid CDATA text: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.convertListKey = '#list';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var chars, chr;
      if (this.allowSurrogateChars) {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
      } else {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
      }
      chr = str.match(chars);
      if (chr) {
        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
    };

    return XMLStringifier;

  })();

}).call(this);

},{}],52:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLText, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return create(XMLText.prototype, this);
    };

    XMLText.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLText;

  })(XMLNode);

}).call(this);

},{"./XMLNode":48,"lodash/object/create":107}],53:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, assign;

  assign = require('lodash/object/assign');

  XMLBuilder = require('./XMLBuilder');

  module.exports.create = function(name, xmldec, doctype, options) {
    options = assign({}, xmldec, doctype, options);
    return new XMLBuilder(name, options).root();
  };

}).call(this);

},{"./XMLBuilder":38,"lodash/object/assign":106}],54:[function(require,module,exports){
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

},{}],55:[function(require,module,exports){
var arrayEvery = require('../internal/arrayEvery'),
    baseCallback = require('../internal/baseCallback'),
    baseEvery = require('../internal/baseEvery'),
    isArray = require('../lang/isArray'),
    isIterateeCall = require('../internal/isIterateeCall');

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * The predicate is bound to `thisArg` and invoked with three arguments:
 * (value, index|key, collection).
 *
 * If a property name is provided for `predicate` the created `_.property`
 * style callback returns the property value of the given element.
 *
 * If a value is also provided for `thisArg` the created `_.matchesProperty`
 * style callback returns `true` for elements that have a matching property
 * value, else `false`.
 *
 * If an object is provided for `predicate` the created `_.matches` style
 * callback returns `true` for elements that have the properties of the given
 * object, else `false`.
 *
 * @static
 * @memberOf _
 * @alias all
 * @category Collection
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked
 *  per iteration.
 * @param {*} [thisArg] The `this` binding of `predicate`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'active': false },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // using the `_.matches` callback shorthand
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // using the `_.matchesProperty` callback shorthand
 * _.every(users, 'active', false);
 * // => true
 *
 * // using the `_.property` callback shorthand
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, thisArg) {
  var func = isArray(collection) ? arrayEvery : baseEvery;
  if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
    predicate = undefined;
  }
  if (typeof predicate != 'function' || thisArg !== undefined) {
    predicate = baseCallback(predicate, thisArg, 3);
  }
  return func(collection, predicate);
}

module.exports = every;

},{"../internal/arrayEvery":57,"../internal/baseCallback":61,"../internal/baseEvery":65,"../internal/isIterateeCall":90,"../lang/isArray":99}],56:[function(require,module,exports){
/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Native method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as an array.
 *
 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.restParam(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function restParam(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        rest = Array(length);

    while (++index < length) {
      rest[index] = args[start + index];
    }
    switch (start) {
      case 0: return func.call(this, rest);
      case 1: return func.call(this, args[0], rest);
      case 2: return func.call(this, args[0], args[1], rest);
    }
    var otherArgs = Array(start + 1);
    index = -1;
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = rest;
    return func.apply(this, otherArgs);
  };
}

module.exports = restParam;

},{}],57:[function(require,module,exports){
/**
 * A specialized version of `_.every` for arrays without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;

},{}],58:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],59:[function(require,module,exports){
var keys = require('../object/keys');

/**
 * A specialized version of `_.assign` for customizing assigned values without
 * support for argument juggling, multiple sources, and `this` binding `customizer`
 * functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 */
function assignWith(object, source, customizer) {
  var index = -1,
      props = keys(source),
      length = props.length;

  while (++index < length) {
    var key = props[index],
        value = object[key],
        result = customizer(value, source[key], key, object, source);

    if ((result === result ? (result !== value) : (value === value)) ||
        (value === undefined && !(key in object))) {
      object[key] = result;
    }
  }
  return object;
}

module.exports = assignWith;

},{"../object/keys":108}],60:[function(require,module,exports){
var baseCopy = require('./baseCopy'),
    keys = require('../object/keys');

/**
 * The base implementation of `_.assign` without support for argument juggling,
 * multiple sources, and `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return source == null
    ? object
    : baseCopy(source, keys(source), object);
}

module.exports = baseAssign;

},{"../object/keys":108,"./baseCopy":62}],61:[function(require,module,exports){
var baseMatches = require('./baseMatches'),
    baseMatchesProperty = require('./baseMatchesProperty'),
    bindCallback = require('./bindCallback'),
    identity = require('../utility/identity'),
    property = require('../utility/property');

/**
 * The base implementation of `_.callback` which supports specifying the
 * number of arguments to provide to `func`.
 *
 * @private
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function baseCallback(func, thisArg, argCount) {
  var type = typeof func;
  if (type == 'function') {
    return thisArg === undefined
      ? func
      : bindCallback(func, thisArg, argCount);
  }
  if (func == null) {
    return identity;
  }
  if (type == 'object') {
    return baseMatches(func);
  }
  return thisArg === undefined
    ? property(func)
    : baseMatchesProperty(func, thisArg);
}

module.exports = baseCallback;

},{"../utility/identity":111,"../utility/property":112,"./baseMatches":72,"./baseMatchesProperty":73,"./bindCallback":78}],62:[function(require,module,exports){
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @returns {Object} Returns `object`.
 */
function baseCopy(source, props, object) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    object[key] = source[key];
  }
  return object;
}

module.exports = baseCopy;

},{}],63:[function(require,module,exports){
var isObject = require('../lang/isObject');

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(prototype) {
    if (isObject(prototype)) {
      object.prototype = prototype;
      var result = new object;
      object.prototype = undefined;
    }
    return result || {};
  };
}());

module.exports = baseCreate;

},{"../lang/isObject":103}],64:[function(require,module,exports){
var baseForOwn = require('./baseForOwn'),
    createBaseEach = require('./createBaseEach');

/**
 * The base implementation of `_.forEach` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object|string} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./baseForOwn":67,"./createBaseEach":80}],65:[function(require,module,exports){
var baseEach = require('./baseEach');

/**
 * The base implementation of `_.every` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  baseEach(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

module.exports = baseEvery;

},{"./baseEach":64}],66:[function(require,module,exports){
var createBaseFor = require('./createBaseFor');

/**
 * The base implementation of `baseForIn` and `baseForOwn` which iterates
 * over `object` properties returned by `keysFunc` invoking `iteratee` for
 * each property. Iteratee functions may exit iteration early by explicitly
 * returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./createBaseFor":81}],67:[function(require,module,exports){
var baseFor = require('./baseFor'),
    keys = require('../object/keys');

/**
 * The base implementation of `_.forOwn` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"../object/keys":108,"./baseFor":66}],68:[function(require,module,exports){
var toObject = require('./toObject');

/**
 * The base implementation of `get` without support for string paths
 * and default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path of the property to get.
 * @param {string} [pathKey] The key representation of path.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path, pathKey) {
  if (object == null) {
    return;
  }
  if (pathKey !== undefined && pathKey in toObject(object)) {
    path = [pathKey];
  }
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[path[index++]];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./toObject":96}],69:[function(require,module,exports){
var baseIsEqualDeep = require('./baseIsEqualDeep'),
    isObject = require('../lang/isObject'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` without support for `this` binding
 * `customizer` functions.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparing values.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
}

module.exports = baseIsEqual;

},{"../lang/isObject":103,"./baseIsEqualDeep":70,"./isObjectLike":93}],70:[function(require,module,exports){
var equalArrays = require('./equalArrays'),
    equalByTag = require('./equalByTag'),
    equalObjects = require('./equalObjects'),
    isArray = require('../lang/isArray'),
    isTypedArray = require('../lang/isTypedArray');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing objects.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = objToString.call(object);
    if (objTag == argsTag) {
      objTag = objectTag;
    } else if (objTag != objectTag) {
      objIsArr = isTypedArray(object);
    }
  }
  if (!othIsArr) {
    othTag = objToString.call(other);
    if (othTag == argsTag) {
      othTag = objectTag;
    } else if (othTag != objectTag) {
      othIsArr = isTypedArray(other);
    }
  }
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && !(objIsArr || objIsObj)) {
    return equalByTag(object, other, objTag);
  }
  if (!isLoose) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
    }
  }
  if (!isSameTag) {
    return false;
  }
  // Assume cyclic values are equal.
  // For more information on detecting circular references see https://es5.github.io/#JO.
  stackA || (stackA = []);
  stackB || (stackB = []);

  var length = stackA.length;
  while (length--) {
    if (stackA[length] == object) {
      return stackB[length] == other;
    }
  }
  // Add `object` and `other` to the stack of traversed objects.
  stackA.push(object);
  stackB.push(other);

  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

  stackA.pop();
  stackB.pop();

  return result;
}

module.exports = baseIsEqualDeep;

},{"../lang/isArray":99,"../lang/isTypedArray":105,"./equalArrays":82,"./equalByTag":83,"./equalObjects":84}],71:[function(require,module,exports){
var baseIsEqual = require('./baseIsEqual'),
    toObject = require('./toObject');

/**
 * The base implementation of `_.isMatch` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Array} matchData The propery names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparing objects.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = toObject(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./baseIsEqual":69,"./toObject":96}],72:[function(require,module,exports){
var baseIsMatch = require('./baseIsMatch'),
    getMatchData = require('./getMatchData'),
    toObject = require('./toObject');

/**
 * The base implementation of `_.matches` which does not clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    var key = matchData[0][0],
        value = matchData[0][1];

    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === value && (value !== undefined || (key in toObject(object)));
    };
  }
  return function(object) {
    return baseIsMatch(object, matchData);
  };
}

module.exports = baseMatches;

},{"./baseIsMatch":71,"./getMatchData":86,"./toObject":96}],73:[function(require,module,exports){
var baseGet = require('./baseGet'),
    baseIsEqual = require('./baseIsEqual'),
    baseSlice = require('./baseSlice'),
    isArray = require('../lang/isArray'),
    isKey = require('./isKey'),
    isStrictComparable = require('./isStrictComparable'),
    last = require('../array/last'),
    toObject = require('./toObject'),
    toPath = require('./toPath');

/**
 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to compare.
 * @returns {Function} Returns the new function.
 */
function baseMatchesProperty(path, srcValue) {
  var isArr = isArray(path),
      isCommon = isKey(path) && isStrictComparable(srcValue),
      pathKey = (path + '');

  path = toPath(path);
  return function(object) {
    if (object == null) {
      return false;
    }
    var key = pathKey;
    object = toObject(object);
    if ((isArr || !isCommon) && !(key in object)) {
      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
      if (object == null) {
        return false;
      }
      key = last(path);
      object = toObject(object);
    }
    return object[key] === srcValue
      ? (srcValue !== undefined || (key in object))
      : baseIsEqual(srcValue, object[key], undefined, true);
  };
}

module.exports = baseMatchesProperty;

},{"../array/last":54,"../lang/isArray":99,"./baseGet":68,"./baseIsEqual":69,"./baseSlice":76,"./isKey":91,"./isStrictComparable":94,"./toObject":96,"./toPath":97}],74:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],75:[function(require,module,exports){
var baseGet = require('./baseGet'),
    toPath = require('./toPath');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 */
function basePropertyDeep(path) {
  var pathKey = (path + '');
  path = toPath(path);
  return function(object) {
    return baseGet(object, path, pathKey);
  };
}

module.exports = basePropertyDeep;

},{"./baseGet":68,"./toPath":97}],76:[function(require,module,exports){
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  start = start == null ? 0 : (+start || 0);
  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = (end === undefined || end > length) ? length : (+end || 0);
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

},{}],77:[function(require,module,exports){
/**
 * Converts `value` to a string if it's not one. An empty string is returned
 * for `null` or `undefined` values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  return value == null ? '' : (value + '');
}

module.exports = baseToString;

},{}],78:[function(require,module,exports){
var identity = require('../utility/identity');

/**
 * A specialized version of `baseCallback` which only supports `this` binding
 * and specifying the number of arguments to provide to `func`.
 *
 * @private
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function bindCallback(func, thisArg, argCount) {
  if (typeof func != 'function') {
    return identity;
  }
  if (thisArg === undefined) {
    return func;
  }
  switch (argCount) {
    case 1: return function(value) {
      return func.call(thisArg, value);
    };
    case 3: return function(value, index, collection) {
      return func.call(thisArg, value, index, collection);
    };
    case 4: return function(accumulator, value, index, collection) {
      return func.call(thisArg, accumulator, value, index, collection);
    };
    case 5: return function(value, other, key, object, source) {
      return func.call(thisArg, value, other, key, object, source);
    };
  }
  return function() {
    return func.apply(thisArg, arguments);
  };
}

module.exports = bindCallback;

},{"../utility/identity":111}],79:[function(require,module,exports){
var bindCallback = require('./bindCallback'),
    isIterateeCall = require('./isIterateeCall'),
    restParam = require('../function/restParam');

/**
 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return restParam(function(object, sources) {
    var index = -1,
        length = object == null ? 0 : sources.length,
        customizer = length > 2 ? sources[length - 2] : undefined,
        guard = length > 2 ? sources[2] : undefined,
        thisArg = length > 1 ? sources[length - 1] : undefined;

    if (typeof customizer == 'function') {
      customizer = bindCallback(customizer, thisArg, 5);
      length -= 2;
    } else {
      customizer = typeof thisArg == 'function' ? thisArg : undefined;
      length -= (customizer ? 1 : 0);
    }
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"../function/restParam":56,"./bindCallback":78,"./isIterateeCall":90}],80:[function(require,module,exports){
var getLength = require('./getLength'),
    isLength = require('./isLength'),
    toObject = require('./toObject');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    var length = collection ? getLength(collection) : 0;
    if (!isLength(length)) {
      return eachFunc(collection, iteratee);
    }
    var index = fromRight ? length : -1,
        iterable = toObject(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./getLength":85,"./isLength":92,"./toObject":96}],81:[function(require,module,exports){
var toObject = require('./toObject');

/**
 * Creates a base function for `_.forIn` or `_.forInRight`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var iterable = toObject(object),
        props = keysFunc(object),
        length = props.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      var key = props[index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{"./toObject":96}],82:[function(require,module,exports){
var arraySome = require('./arraySome');

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing arrays.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var index = -1,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
    return false;
  }
  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index],
        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

    if (result !== undefined) {
      if (result) {
        continue;
      }
      return false;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (isLoose) {
      if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
          })) {
        return false;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
      return false;
    }
  }
  return true;
}

module.exports = equalArrays;

},{"./arraySome":58}],83:[function(require,module,exports){
/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    stringTag = '[object String]';

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag) {
  switch (tag) {
    case boolTag:
    case dateTag:
      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
      return +object == +other;

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case numberTag:
      // Treat `NaN` vs. `NaN` as equal.
      return (object != +object)
        ? other != +other
        : object == +other;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings primitives and string
      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
      return object == (other + '');
  }
  return false;
}

module.exports = equalByTag;

},{}],84:[function(require,module,exports){
var keys = require('../object/keys');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing values.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isLoose) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  var skipCtor = isLoose;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key],
        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

    // Recursively compare objects (susceptible to call stack limits).
    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
      return false;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (!skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      return false;
    }
  }
  return true;
}

module.exports = equalObjects;

},{"../object/keys":108}],85:[function(require,module,exports){
var baseProperty = require('./baseProperty');

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

module.exports = getLength;

},{"./baseProperty":74}],86:[function(require,module,exports){
var isStrictComparable = require('./isStrictComparable'),
    pairs = require('../object/pairs');

/**
 * Gets the propery names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = pairs(object),
      length = result.length;

  while (length--) {
    result[length][2] = isStrictComparable(result[length][1]);
  }
  return result;
}

module.exports = getMatchData;

},{"../object/pairs":110,"./isStrictComparable":94}],87:[function(require,module,exports){
var isNative = require('../lang/isNative');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

module.exports = getNative;

},{"../lang/isNative":102}],88:[function(require,module,exports){
var getLength = require('./getLength'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 */
function isArrayLike(value) {
  return value != null && isLength(getLength(value));
}

module.exports = isArrayLike;

},{"./getLength":85,"./isLength":92}],89:[function(require,module,exports){
/** Used to detect unsigned integer values. */
var reIsUint = /^\d+$/;

/**
 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

},{}],90:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isIndex = require('./isIndex'),
    isObject = require('../lang/isObject');

/**
 * Checks if the provided arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
      ? (isArrayLike(object) && isIndex(index, object.length))
      : (type == 'string' && index in object)) {
    var other = object[index];
    return value === value ? (value === other) : (other !== other);
  }
  return false;
}

module.exports = isIterateeCall;

},{"../lang/isObject":103,"./isArrayLike":88,"./isIndex":89}],91:[function(require,module,exports){
var isArray = require('../lang/isArray'),
    toObject = require('./toObject');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  var type = typeof value;
  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
    return true;
  }
  if (isArray(value)) {
    return false;
  }
  var result = !reIsDeepProp.test(value);
  return result || (object != null && value in toObject(object));
}

module.exports = isKey;

},{"../lang/isArray":99,"./toObject":96}],92:[function(require,module,exports){
/**
 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],93:[function(require,module,exports){
/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],94:[function(require,module,exports){
var isObject = require('../lang/isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"../lang/isObject":103}],95:[function(require,module,exports){
var isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isIndex = require('./isIndex'),
    isLength = require('./isLength'),
    keysIn = require('../object/keysIn');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A fallback implementation of `Object.keys` which creates an array of the
 * own enumerable property names of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function shimKeys(object) {
  var props = keysIn(object),
      propsLength = props.length,
      length = propsLength && object.length;

  var allowIndexes = !!length && isLength(length) &&
    (isArray(object) || isArguments(object));

  var index = -1,
      result = [];

  while (++index < propsLength) {
    var key = props[index];
    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = shimKeys;

},{"../lang/isArguments":98,"../lang/isArray":99,"../object/keysIn":109,"./isIndex":89,"./isLength":92}],96:[function(require,module,exports){
var isObject = require('../lang/isObject');

/**
 * Converts `value` to an object if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

module.exports = toObject;

},{"../lang/isObject":103}],97:[function(require,module,exports){
var baseToString = require('./baseToString'),
    isArray = require('../lang/isArray');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `value` to property path array if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Array} Returns the property path array.
 */
function toPath(value) {
  if (isArray(value)) {
    return value;
  }
  var result = [];
  baseToString(value).replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
}

module.exports = toPath;

},{"../lang/isArray":99,"./baseToString":77}],98:[function(require,module,exports){
var isArrayLike = require('../internal/isArrayLike'),
    isObjectLike = require('../internal/isObjectLike');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Native method references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is classified as an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  return isObjectLike(value) && isArrayLike(value) &&
    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
}

module.exports = isArguments;

},{"../internal/isArrayLike":88,"../internal/isObjectLike":93}],99:[function(require,module,exports){
var getNative = require('../internal/getNative'),
    isLength = require('../internal/isLength'),
    isObjectLike = require('../internal/isObjectLike');

/** `Object#toString` result references. */
var arrayTag = '[object Array]';

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/* Native method references for those with the same name as other `lodash` methods. */
var nativeIsArray = getNative(Array, 'isArray');

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(function() { return arguments; }());
 * // => false
 */
var isArray = nativeIsArray || function(value) {
  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
};

module.exports = isArray;

},{"../internal/getNative":87,"../internal/isLength":92,"../internal/isObjectLike":93}],100:[function(require,module,exports){
var isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('../internal/isArrayLike'),
    isFunction = require('./isFunction'),
    isObjectLike = require('../internal/isObjectLike'),
    isString = require('./isString'),
    keys = require('../object/keys');

/**
 * Checks if `value` is empty. A value is considered empty unless it's an
 * `arguments` object, array, string, or jQuery-like collection with a length
 * greater than `0` or an object with own enumerable properties.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {Array|Object|string} value The value to inspect.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
      (isObjectLike(value) && isFunction(value.splice)))) {
    return !value.length;
  }
  return !keys(value).length;
}

module.exports = isEmpty;

},{"../internal/isArrayLike":88,"../internal/isObjectLike":93,"../object/keys":108,"./isArguments":98,"./isArray":99,"./isFunction":101,"./isString":104}],101:[function(require,module,exports){
var isObject = require('./isObject');

/** `Object#toString` result references. */
var funcTag = '[object Function]';

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in older versions of Chrome and Safari which return 'function' for regexes
  // and Safari 8 which returns 'object' for typed array constructors.
  return isObject(value) && objToString.call(value) == funcTag;
}

module.exports = isFunction;

},{"./isObject":103}],102:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isObjectLike = require('../internal/isObjectLike');

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(fnToString.call(value));
  }
  return isObjectLike(value) && reIsHostCtor.test(value);
}

module.exports = isNative;

},{"../internal/isObjectLike":93,"./isFunction":101}],103:[function(require,module,exports){
/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],104:[function(require,module,exports){
var isObjectLike = require('../internal/isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
}

module.exports = isString;

},{"../internal/isObjectLike":93}],105:[function(require,module,exports){
var isLength = require('../internal/isLength'),
    isObjectLike = require('../internal/isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dateTag] = typedArrayTags[errorTag] =
typedArrayTags[funcTag] = typedArrayTags[mapTag] =
typedArrayTags[numberTag] = typedArrayTags[objectTag] =
typedArrayTags[regexpTag] = typedArrayTags[setTag] =
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
function isTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
}

module.exports = isTypedArray;

},{"../internal/isLength":92,"../internal/isObjectLike":93}],106:[function(require,module,exports){
var assignWith = require('../internal/assignWith'),
    baseAssign = require('../internal/baseAssign'),
    createAssigner = require('../internal/createAssigner');

/**
 * Assigns own enumerable properties of source object(s) to the destination
 * object. Subsequent sources overwrite property assignments of previous sources.
 * If `customizer` is provided it's invoked to produce the assigned values.
 * The `customizer` is bound to `thisArg` and invoked with five arguments:
 * (objectValue, sourceValue, key, object, source).
 *
 * **Note:** This method mutates `object` and is based on
 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
 *
 * @static
 * @memberOf _
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {*} [thisArg] The `this` binding of `customizer`.
 * @returns {Object} Returns `object`.
 * @example
 *
 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
 * // => { 'user': 'fred', 'age': 40 }
 *
 * // using a customizer callback
 * var defaults = _.partialRight(_.assign, function(value, other) {
 *   return _.isUndefined(value) ? other : value;
 * });
 *
 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
 * // => { 'user': 'barney', 'age': 36 }
 */
var assign = createAssigner(function(object, source, customizer) {
  return customizer
    ? assignWith(object, source, customizer)
    : baseAssign(object, source);
});

module.exports = assign;

},{"../internal/assignWith":59,"../internal/baseAssign":60,"../internal/createAssigner":79}],107:[function(require,module,exports){
var baseAssign = require('../internal/baseAssign'),
    baseCreate = require('../internal/baseCreate'),
    isIterateeCall = require('../internal/isIterateeCall');

/**
 * Creates an object that inherits from the given `prototype` object. If a
 * `properties` object is provided its own enumerable properties are assigned
 * to the created object.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties, guard) {
  var result = baseCreate(prototype);
  if (guard && isIterateeCall(prototype, properties, guard)) {
    properties = undefined;
  }
  return properties ? baseAssign(result, properties) : result;
}

module.exports = create;

},{"../internal/baseAssign":60,"../internal/baseCreate":63,"../internal/isIterateeCall":90}],108:[function(require,module,exports){
var getNative = require('../internal/getNative'),
    isArrayLike = require('../internal/isArrayLike'),
    isObject = require('../lang/isObject'),
    shimKeys = require('../internal/shimKeys');

/* Native method references for those with the same name as other `lodash` methods. */
var nativeKeys = getNative(Object, 'keys');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
var keys = !nativeKeys ? shimKeys : function(object) {
  var Ctor = object == null ? undefined : object.constructor;
  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
      (typeof object != 'function' && isArrayLike(object))) {
    return shimKeys(object);
  }
  return isObject(object) ? nativeKeys(object) : [];
};

module.exports = keys;

},{"../internal/getNative":87,"../internal/isArrayLike":88,"../internal/shimKeys":95,"../lang/isObject":103}],109:[function(require,module,exports){
var isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isIndex = require('../internal/isIndex'),
    isLength = require('../internal/isLength'),
    isObject = require('../lang/isObject');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  if (object == null) {
    return [];
  }
  if (!isObject(object)) {
    object = Object(object);
  }
  var length = object.length;
  length = (length && isLength(length) &&
    (isArray(object) || isArguments(object)) && length) || 0;

  var Ctor = object.constructor,
      index = -1,
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
      result = Array(length),
      skipIndexes = length > 0;

  while (++index < length) {
    result[index] = (index + '');
  }
  for (var key in object) {
    if (!(skipIndexes && isIndex(key, length)) &&
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keysIn;

},{"../internal/isIndex":89,"../internal/isLength":92,"../lang/isArguments":98,"../lang/isArray":99,"../lang/isObject":103}],110:[function(require,module,exports){
var keys = require('./keys'),
    toObject = require('../internal/toObject');

/**
 * Creates a two dimensional array of the key-value pairs for `object`,
 * e.g. `[[key1, value1], [key2, value2]]`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the new array of key-value pairs.
 * @example
 *
 * _.pairs({ 'barney': 36, 'fred': 40 });
 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
 */
function pairs(object) {
  object = toObject(object);

  var index = -1,
      props = keys(object),
      length = props.length,
      result = Array(length);

  while (++index < length) {
    var key = props[index];
    result[index] = [key, object[key]];
  }
  return result;
}

module.exports = pairs;

},{"../internal/toObject":96,"./keys":108}],111:[function(require,module,exports){
/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],112:[function(require,module,exports){
var baseProperty = require('../internal/baseProperty'),
    basePropertyDeep = require('../internal/basePropertyDeep'),
    isKey = require('../internal/isKey');

/**
 * Creates a function that returns the property value at `path` on a
 * given object.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': { 'c': 2 } } },
 *   { 'a': { 'b': { 'c': 1 } } }
 * ];
 *
 * _.map(objects, _.property('a.b.c'));
 * // => [2, 1]
 *
 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
}

module.exports = property;

},{"../internal/baseProperty":74,"../internal/basePropertyDeep":75,"../internal/isKey":91}]},{},[3]);
